const { Telegraf } = require("telegraf");
const bcrypt = require("bcryptjs");
const { db } = require('./src/database/supabase-client');
require("dotenv").config();

console.log("üöÄ Starting Aureus Alliance Holdings Telegram Bot...");
console.log("üîó VERSION CHECK: Bot links are https://t.me/AureusAllianceBot (PRODUCTION BOT)");
console.log("üî• DEPLOYMENT VERSION: 2025-01-05-PRODUCTION-BOT-RAILWAY");
console.log("üìÖ DEPLOYMENT: " + new Date().toISOString());
console.log("üîß FIXED: Share calculation using phase pricing + database wallet addresses");
console.log("üö® CRITICAL FIX DEPLOYED: $100 payment = 20 shares (not 100 shares)");
console.log("üí∞ SHARE CALCULATION: amount √∑ phase_price = shares");
console.log("üõ†Ô∏è SCOPE FIX: sharesAmount variable moved to outer scope - ReferenceError resolved");
console.log("üîó BOT LINK FIX: All referral links use AureusAllianceBot (PRODUCTION BOT)");
console.log("üö® PRODUCTION BOT: AureusAllianceBot running on Railway!");

// Bot configuration - Production only
const BOT_TOKEN = "7858706839:AAFRXBSlREW0wPvIyI57uFpHfYopi2CY464";
const ADMIN_USERNAME = "TTTFOUNDER";

console.log("üìä Database: Supabase PostgreSQL");

// üîí ESCROW SECURITY FUNCTIONS - Prevent Double-Spending Vulnerabilities
// These functions implement atomic escrow operations to prevent race conditions
// between concurrent commission withdrawal and conversion requests

/**
 * Atomically check available balance and create escrow for commission request
 * @param {string} userId - User ID
 * @param {number} requestAmount - Amount to escrow
 * @param {string} requestType - 'withdrawal' or 'conversion'
 * @returns {Promise<{success: boolean, availableBalance?: number, error?: string}>}
 */
async function createCommissionEscrow(userId, requestAmount, requestType) {
  try {
    // Use a database transaction to atomically check and update escrow
    const { data, error } = await db.client.rpc('create_commission_escrow', {
      p_user_id: userId,
      p_request_amount: requestAmount,
      p_request_type: requestType
    });

    if (error) {
      console.error(`‚ùå [ESCROW] Failed to create escrow for ${requestType}:`, error);
      return { success: false, error: error.message };
    }

    console.log(`‚úÖ [ESCROW] Created ${requestType} escrow: $${requestAmount} for user ${userId}`);
    return { success: true, availableBalance: data };
  } catch (error) {
    console.error(`‚ùå [ESCROW] Exception creating escrow:`, error);
    return { success: false, error: 'Internal escrow error' };
  }
}

/**
 * Release escrow when request is rejected (only deduct from escrowed_amount)
 * @param {string} userId - User ID
 * @param {number} escrowAmount - Amount to release from escrow
 * @returns {Promise<{success: boolean, error?: string}>}
 */
async function releaseCommissionEscrow(userId, escrowAmount) {
  try {
    const { error } = await db.client.rpc('release_commission_escrow', {
      p_user_id: userId,
      p_escrow_amount: escrowAmount
    });

    if (error) {
      console.error(`‚ùå [ESCROW] Failed to release escrow:`, error);
      return { success: false, error: error.message };
    }

    console.log(`‚úÖ [ESCROW] Released escrow: $${escrowAmount} for user ${userId}`);
    return { success: true };
  } catch (error) {
    console.error(`‚ùå [ESCROW] Exception releasing escrow:`, error);
    return { success: false, error: 'Internal escrow error' };
  }
}

/**
 * Audio notification system for enhanced user experience
 * Sends different notification sounds based on message type
 */
const AUDIO_NOTIFICATIONS = {
  SUCCESS: 'üîî', // Success sound emoji
  ERROR: 'üö®',   // Error sound emoji
  WARNING: '‚ö†Ô∏è', // Warning sound emoji
  INFO: '‚ÑπÔ∏è',    // Info sound emoji
  PAYMENT: 'üí∞', // Payment sound emoji
  APPROVAL: '‚úÖ', // Approval sound emoji
  REJECTION: '‚ùå', // Rejection sound emoji
  COMMISSION: 'üíé', // Commission update sound
  WITHDRAWAL: 'üí∏', // Withdrawal notification sound
  SYSTEM: 'üîß', // System notification sound
  URGENT: 'üö®', // Urgent alert sound
  CELEBRATION: 'üéâ' // Celebration sound for achievements
};

/**
 * Send notification with optional audio cue
 * @param {Object} ctx - Telegram context
 * @param {string} message - Message to send
 * @param {string} audioType - Type of audio notification
 * @param {Object} options - Additional options (keyboard, etc.)
 * @param {boolean} enableAudio - Whether to include audio notification
 */
async function sendNotificationWithAudio(ctx, message, audioType = 'INFO', options = {}, enableAudio = true) {
  try {
    // Add audio emoji to message if enabled
    let finalMessage = message;
    if (enableAudio && AUDIO_NOTIFICATIONS[audioType]) {
      finalMessage = `${AUDIO_NOTIFICATIONS[audioType]} ${message}`;
    }

    // Send the message with enhanced notification
    const messageOptions = {
      parse_mode: 'Markdown',
      disable_notification: !enableAudio, // Enable notification sound if audio is enabled
      ...options
    };

    await ctx.replyWithMarkdown(finalMessage, messageOptions);

    // Log audio notification for debugging
    if (enableAudio) {
      console.log(`üîä [AUDIO] Sent ${audioType} notification to user ${ctx.from.id}`);
    }

  } catch (error) {
    console.error('Error sending notification with audio:', error);
    // Fallback to regular message
    await ctx.replyWithMarkdown(message, options);
  }
}

/**
 * Check if user has audio notifications enabled
 * @param {number} telegramId - User's telegram ID
 * @param {string} notificationType - Type of notification (optional)
 * @returns {Promise<boolean>} - Whether audio notifications are enabled
 */
async function isAudioNotificationEnabled(telegramId, notificationType = null) {
  try {
    // Get user preferences from database
    const { data: preferences, error } = await db.client
      .rpc('get_user_audio_preferences', { p_telegram_id: telegramId });

    if (error) {
      console.error('Error getting user audio preferences:', error);
      return true; // Default to enabled on error
    }

    if (!preferences) {
      return true; // Default to enabled if no preferences found
    }

    // Check general audio setting first
    if (!preferences.audio_enabled) {
      return false;
    }

    // Check specific notification type if provided
    if (notificationType) {
      const typeMapping = {
        'PAYMENT': 'payment_approval_audio',
        'APPROVAL': 'payment_approval_audio',
        'REJECTION': 'payment_rejection_audio',
        'WITHDRAWAL': 'withdrawal_approval_audio',
        'COMMISSION': 'commission_update_audio',
        'REFERRAL': 'referral_bonus_audio',
        'SYSTEM': 'system_announcement_audio'
      };

      const preferenceKey = typeMapping[notificationType];
      if (preferenceKey && preferences[preferenceKey] !== undefined) {
        return preferences[preferenceKey];
      }
    }

    return preferences.audio_enabled;
  } catch (error) {
    console.error('Error checking audio notification preference:', error);
    return true; // Default to enabled on error
  }
}

/**
 * Send audio notification to user by telegram ID
 * @param {number} telegramId - User's telegram ID
 * @param {string} message - Message to send
 * @param {string} audioType - Type of audio notification
 * @param {Object} options - Additional options
 * @param {boolean} forceAudio - Force audio notification regardless of user preference
 */
async function sendAudioNotificationToUser(telegramId, message, audioType = 'INFO', options = {}, forceAudio = false) {
  try {
    // Check user preference for audio notifications with specific type
    const audioEnabled = forceAudio || await isAudioNotificationEnabled(telegramId, audioType);

    // Add audio emoji to message if enabled
    let finalMessage = message;
    if (audioEnabled && AUDIO_NOTIFICATIONS[audioType]) {
      finalMessage = `${AUDIO_NOTIFICATIONS[audioType]} ${message}`;
    }

    // Send the message with enhanced notification
    const messageOptions = {
      parse_mode: 'Markdown',
      disable_notification: !audioEnabled, // Enable notification sound if audio is enabled
      ...options
    };

    await bot.telegram.sendMessage(telegramId, finalMessage, messageOptions);

    // Log notification to database for analytics
    await logNotificationToDatabase(telegramId, audioType, message, audioEnabled, 'sent');

    // Log audio notification for debugging
    if (audioEnabled) {
      console.log(`üîä [AUDIO] Sent ${audioType} notification to user ${telegramId}`);
    } else {
      console.log(`üîá [SILENT] Sent silent ${audioType} notification to user ${telegramId}`);
    }

  } catch (error) {
    console.error('Error sending audio notification to user:', error);

    // Log failed notification
    await logNotificationToDatabase(telegramId, audioType, message, false, 'failed', error.message);

    // Fallback to regular message
    try {
      await bot.telegram.sendMessage(telegramId, message, options);
    } catch (fallbackError) {
      console.error('Error sending fallback message:', fallbackError);
    }
  }
}

/**
 * Log notification to database for analytics and tracking
 * @param {number} telegramId - User's telegram ID
 * @param {string} audioType - Type of audio notification
 * @param {string} message - Message content
 * @param {boolean} audioEnabled - Whether audio was enabled
 * @param {string} status - Delivery status
 * @param {string} errorMessage - Error message if failed
 */
async function logNotificationToDatabase(telegramId, audioType, message, audioEnabled, status, errorMessage = null) {
  try {
    // Get user_id from telegram_id
    const { data: telegramUser } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', telegramId)
      .single();

    const messagePreview = message.length > 100 ? message.substring(0, 100) + '...' : message;

    await db.client
      .from('notification_log')
      .insert({
        telegram_id: telegramId,
        user_id: telegramUser?.user_id || null,
        notification_type: audioType.toLowerCase(),
        audio_type: audioType,
        message_preview: messagePreview,
        audio_enabled: audioEnabled,
        delivery_status: status,
        error_message: errorMessage,
        sent_at: new Date().toISOString()
      });

  } catch (error) {
    console.error('Error logging notification to database:', error);
    // Don't throw error as this is just logging
  }
}

/**
 * Send admin notification for critical events
 * @param {string} eventType - Type of event (withdrawal_request, payment_received, etc.)
 * @param {Object} eventData - Event data
 * @param {string} priority - Priority level (low, medium, high, critical)
 */
async function sendAdminNotification(eventType, eventData, priority = 'medium') {
  try {
    // Get all admin users
    const { data: adminUsers, error } = await db.client
      .from('telegram_users')
      .select(`
        telegram_id,
        user_id,
        users!telegram_users_user_id_fkey!inner(
          username,
          is_admin
        )
      `)
      .eq('users.is_admin', true);

    if (error || !adminUsers || adminUsers.length === 0) {
      console.log('No admin users found for notification');
      return;
    }

    // Create notification message based on event type
    const notificationMessage = createAdminNotificationMessage(eventType, eventData, priority);
    const audioType = getAdminAudioType(eventType, priority);

    // Send to each admin
    for (const admin of adminUsers) {
      try {
        // Check admin notification preferences
        const adminAudioEnabled = await isAdminAudioNotificationEnabled(admin.telegram_id, eventType, priority);

        await sendAudioNotificationToUser(
          admin.telegram_id,
          notificationMessage.message,
          audioType,
          notificationMessage.options,
          adminAudioEnabled
        );

        console.log(`üì¢ [ADMIN] Sent ${eventType} notification to admin ${admin.users.username}`);

      } catch (adminError) {
        console.error(`Error sending notification to admin ${admin.users.username}:`, adminError);
      }
    }

  } catch (error) {
    console.error('Error sending admin notifications:', error);
  }
}

/**
 * Check if admin has audio notifications enabled for specific event type
 * @param {number} telegramId - Admin's telegram ID
 * @param {string} eventType - Type of event
 * @param {string} priority - Priority level
 * @returns {Promise<boolean>} - Whether audio notifications are enabled
 */
async function isAdminAudioNotificationEnabled(telegramId, eventType, priority) {
  try {
    const { data: preferences, error } = await db.client
      .from('admin_notification_preferences')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();

    if (error || !preferences) {
      // Default admin preferences if not found
      return true;
    }

    // Check general audio setting
    if (!preferences.audio_enabled) {
      return false;
    }

    // Check priority level preferences
    const priorityMapping = {
      'critical': preferences.critical_alerts_audio,
      'high': preferences.high_priority_audio,
      'medium': preferences.medium_priority_audio,
      'low': preferences.low_priority_audio
    };

    if (priorityMapping[priority] !== undefined) {
      if (!priorityMapping[priority]) {
        return false;
      }
    }

    // Check specific event type preferences
    const eventMapping = {
      'payment_received': preferences.new_payment_audio,
      'withdrawal_request': preferences.new_withdrawal_request_audio,
      'commission_conversion': preferences.new_commission_conversion_audio,
      'system_error': preferences.system_error_audio,
      'user_registration': preferences.user_registration_audio,
      'high_value_transaction': preferences.high_value_transaction_audio
    };

    const eventPreference = eventMapping[eventType];
    if (eventPreference !== undefined) {
      return eventPreference;
    }

    return preferences.audio_enabled;

  } catch (error) {
    console.error('Error checking admin audio notification preference:', error);
    return true; // Default to enabled for admins
  }
}

/**
 * Create admin notification message based on event type
 * @param {string} eventType - Type of event
 * @param {Object} eventData - Event data
 * @param {string} priority - Priority level
 * @returns {Object} - Message and options
 */
function createAdminNotificationMessage(eventType, eventData, priority) {
  const priorityEmoji = {
    'critical': 'üö®',
    'high': 'üî¥',
    'medium': 'üü°',
    'low': 'üü¢'
  };

  const emoji = priorityEmoji[priority] || 'üîî';

  switch (eventType) {
    case 'withdrawal_request':
      return {
        message: `${emoji} **NEW WITHDRAWAL REQUEST**

**User:** ${eventData.username || 'Unknown'}
**Amount:** $${eventData.amount} USDT
**Wallet:** ${eventData.wallet_address}
**Priority:** ${priority.toUpperCase()}

**Action Required:** Review and approve/reject this withdrawal request.`,
        options: {
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚è≥ View Pending Withdrawals", callback_data: "admin_pending_withdrawals" }],
              [{ text: "üîß Admin Panel", callback_data: "admin_panel" }]
            ]
          }
        }
      };

    case 'payment_received':
      return {
        message: `${emoji} **NEW PAYMENT RECEIVED**

**User:** ${eventData.username || 'Unknown'}
**Amount:** $${eventData.amount} USD
**Shares:** ${eventData.shares || 'TBD'}
**Priority:** ${priority.toUpperCase()}

**Action Required:** Review and approve/reject this payment.`,
        options: {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üí≥ View Pending Payments", callback_data: "admin_pending_payments" }],
              [{ text: "üîß Admin Panel", callback_data: "admin_panel" }]
            ]
          }
        }
      };

    case 'commission_conversion':
      return {
        message: `${emoji} **NEW COMMISSION CONVERSION REQUEST**

**Request ID:** #${eventData.conversion_id || 'Unknown'}
**User:** ${eventData.username || 'Unknown'}
**Shares Requested:** ${eventData.shares} shares
**USDT Amount:** $${eventData.amount}
**Available Commission:** $${eventData.available_commission || 'N/A'}
**Phase:** ${eventData.phase || 'N/A'}
**Priority:** ${priority.toUpperCase()}

**Action Required:** Review and approve/reject this conversion request.`,
        options: {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ Approve", callback_data: `approve_conv_${eventData.conversion_id}` },
                { text: "‚ùå Reject", callback_data: `reject_conv_${eventData.conversion_id}` }
              ],
              [{ text: "üíé View All Requests", callback_data: "admin_commissions" }],
              [{ text: "üîß Admin Panel", callback_data: "admin_panel" }]
            ]
          }
        }
      };

    default:
      return {
        message: `${emoji} **ADMIN NOTIFICATION**

**Event:** ${eventType}
**Priority:** ${priority.toUpperCase()}
**Data:** ${JSON.stringify(eventData, null, 2)}`,
        options: {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîß Admin Panel", callback_data: "admin_panel" }]
            ]
          }
        }
      };
  }
}

/**
 * Get appropriate audio type for admin notifications
 * @param {string} eventType - Type of event
 * @param {string} priority - Priority level
 * @returns {string} - Audio type
 */
function getAdminAudioType(eventType, priority) {
  if (priority === 'critical') {
    return 'URGENT';
  }

  if (priority === 'high') {
    return 'WARNING';
  }

  switch (eventType) {
    case 'payment_received':
      return 'PAYMENT';
    case 'withdrawal_request':
      return 'WARNING';
    case 'commission_conversion':
      return 'COMMISSION';
    case 'system_error':
      return 'ERROR';
    default:
      return 'INFO';
  }
}

/**
 * Get available commission balance (usdt_balance - escrowed_amount)
 * @param {string} userId - User ID
 * @returns {Promise<{availableBalance: number, totalBalance: number, escrowedAmount: number}>}
 */
async function getAvailableCommissionBalance(userId) {
  try {
    const { data: balance, error } = await db.client
      .from('commission_balances')
      .select('usdt_balance, escrowed_amount')
      .eq('user_id', userId)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error(`‚ùå [ESCROW] Error fetching balance:`, error);
      return { availableBalance: 0, totalBalance: 0, escrowedAmount: 0 };
    }

    const totalBalance = balance ? parseFloat(balance.usdt_balance || 0) : 0;
    const escrowedAmount = balance ? parseFloat(balance.escrowed_amount || 0) : 0;
    const availableBalance = totalBalance - escrowedAmount;

    console.log(`üí∞ [ESCROW] Balance check for user ${userId}: Total=$${totalBalance}, Escrowed=$${escrowedAmount}, Available=$${availableBalance}`);

    return {
      availableBalance: Math.max(0, availableBalance),
      totalBalance,
      escrowedAmount
    };
  } catch (error) {
    console.error(`‚ùå [ESCROW] Exception getting balance:`, error);
    return { availableBalance: 0, totalBalance: 0, escrowedAmount: 0 };
  }
}

/**
 * Get enhanced commission balance with comprehensive information
 * @param {string} userId - User ID
 * @returns {Promise<{success: boolean, data?: object, error?: string}>}
 */
async function getEnhancedCommissionBalance(userId) {
  try {
    console.log(`üîç [ENHANCED_BALANCE] Starting enhanced balance fetch for user ${userId}`);

    // Get commission balance
    const { data: commissionBalance, error: balanceError } = await db.client
      .from('commission_balances')
      .select('*')
      .eq('user_id', userId)
      .single();

    console.log(`üîç [ENHANCED_BALANCE] Commission balance query result:`, { commissionBalance, balanceError });

    if (balanceError && balanceError.code !== 'PGRST116') {
      console.error('Enhanced commission balance fetch error:', balanceError);
      return { success: false, error: balanceError.message };
    }

    // Get pending withdrawals
    const { data: pendingWithdrawals, error: withdrawalError } = await db.client
      .from('commission_withdrawals')
      .select('id, amount, created_at, withdrawal_type')
      .eq('user_id', userId)
      .eq('status', 'pending')
      .order('created_at', { ascending: false });

    // Get pending conversions
    const { data: pendingConversions, error: conversionError } = await db.client
      .from('commission_conversions')
      .select('id, usdt_amount, shares_requested, created_at')
      .eq('user_id', userId)
      .eq('status', 'pending')
      .order('created_at', { ascending: false });

    // Get conversion history (approved conversions)
    const { data: conversionHistory, error: historyError } = await db.client
      .from('commission_conversions')
      .select('usdt_amount, shares_requested')
      .eq('user_id', userId)
      .eq('status', 'approved');

    // Calculate values
    const totalEarnedUSDT = commissionBalance ? parseFloat(commissionBalance.total_earned_usdt || 0) : 0;
    const totalEarnedShares = commissionBalance ? parseFloat(commissionBalance.total_earned_shares || 0) : 0;
    const totalBalance = commissionBalance ? parseFloat(commissionBalance.usdt_balance || 0) : 0;
    const escrowedAmount = commissionBalance ? parseFloat(commissionBalance.escrowed_amount || 0) : 0;
    const availableUSDT = Math.max(0, totalBalance - escrowedAmount);
    const totalWithdrawnUSDT = commissionBalance ? parseFloat(commissionBalance.total_withdrawn || 0) : 0;

    // Calculate conversion totals
    const totalConvertedUSDT = conversionHistory ? conversionHistory.reduce((sum, conv) => sum + parseFloat(conv.usdt_amount || 0), 0) : 0;
    const sharesFromConversions = conversionHistory ? conversionHistory.reduce((sum, conv) => sum + parseFloat(conv.shares_requested || 0), 0) : 0;

    // Get current phase price for accurate share value calculation
    let currentSharePrice = 5.00; // Default to $5
    try {
      const currentPhase = await db.getCurrentPhase();
      if (currentPhase && currentPhase.price_per_share) {
        currentSharePrice = parseFloat(currentPhase.price_per_share);
      }
      console.log(`üîç [ENHANCED_BALANCE] Current phase price: $${currentSharePrice}`);
    } catch (phaseError) {
      console.error('Error getting current phase for share value calculation:', phaseError);
      // Continue with default price
    }

    // Calculate share value using current phase price
    const shareValue = totalEarnedShares * currentSharePrice;
    const totalCommissionValue = totalEarnedUSDT + shareValue;

    console.log(`üîç [ENHANCED_BALANCE] Share value calculation: ${totalEarnedShares} shares √ó $${currentSharePrice} = $${shareValue}`);

    return {
      success: true,
      data: {
        totalEarnedUSDT,
        totalEarnedShares,
        availableUSDT,
        escrowedAmount,
        totalWithdrawnUSDT,
        totalConvertedUSDT,
        sharesFromConversions,
        shareValue,
        totalCommissionValue,
        pendingWithdrawals: pendingWithdrawals || [],
        pendingConversions: pendingConversions || []
      }
    };
  } catch (error) {
    console.error('Enhanced commission balance exception:', error);
    return { success: false, error: error.message };
  }
}

// üö® SHARES SOLD TRACKING FUNCTIONS - Critical Bug Fix
// These functions ensure shares_sold field is properly updated when shares are allocated

/**
 * Atomically increment shares_sold for a specific investment phase
 * @param {string} phaseId - Investment phase ID
 * @param {number} sharesAllocated - Number of shares to add to shares_sold
 * @param {string} source - Source of allocation (e.g., 'direct_purchase', 'commission_conversion', 'referral_bonus')
 * @returns {Promise<{success: boolean, error?: string}>}
 */
async function incrementSharesSold(phaseId, sharesAllocated, source = 'unknown') {
  try {
    console.log(`üìä [SHARES_SOLD] Incrementing shares_sold: Phase ${phaseId}, +${sharesAllocated} shares, Source: ${source}`);

    // Use atomic update with current value check
    const { data: currentPhase, error: fetchError } = await db.client
      .from('investment_phases')
      .select('id, phase_number, shares_sold, total_shares_available')
      .eq('id', phaseId)
      .single();

    if (fetchError || !currentPhase) {
      console.error(`‚ùå [SHARES_SOLD] Phase ${phaseId} not found:`, fetchError);
      return { success: false, error: `Phase ${phaseId} not found` };
    }

    const currentSharesSold = parseFloat(currentPhase.shares_sold || 0);
    const newSharesSold = currentSharesSold + sharesAllocated;
    const totalAvailable = parseFloat(currentPhase.total_shares_available || 0);

    // Validate we don't exceed total available shares
    if (newSharesSold > totalAvailable) {
      console.error(`‚ùå [SHARES_SOLD] Would exceed total available shares: ${newSharesSold} > ${totalAvailable}`);
      return { success: false, error: `Would exceed total available shares (${totalAvailable})` };
    }

    // Atomic update with decimal precision
    const { error: updateError } = await db.client
      .from('investment_phases')
      .update({
        shares_sold: newSharesSold,
        updated_at: new Date().toISOString()
      })
      .eq('id', phaseId)
      .eq('shares_sold', currentSharesSold); // Ensure no concurrent updates

    if (updateError) {
      console.error(`‚ùå [SHARES_SOLD] Failed to update shares_sold:`, updateError);
      return { success: false, error: updateError.message };
    }

    console.log(`‚úÖ [SHARES_SOLD] Updated Phase ${currentPhase.phase_number}: ${currentSharesSold} -> ${newSharesSold} shares sold`);

    // Log the update for audit trail
    await logAdminAction(
      null, // No specific admin for system actions
      'SYSTEM',
      'shares_sold_increment',
      'investment_phase',
      phaseId,
      {
        source,
        shares_allocated: sharesAllocated,
        previous_shares_sold: currentSharesSold,
        new_shares_sold: newSharesSold,
        remaining_shares: totalAvailable - newSharesSold
      }
    );

    return { success: true };
  } catch (error) {
    console.error(`‚ùå [SHARES_SOLD] Exception incrementing shares_sold:`, error);
    return { success: false, error: 'Internal error updating shares_sold' };
  }
}

/**
 * Get current active phase for share allocation
 * @returns {Promise<{phase: object|null, error?: string}>}
 */
async function getCurrentActivePhase() {
  try {
    const { data: phase, error } = await db.client
      .from('investment_phases')
      .select('*')
      .eq('is_active', true)
      .single();

    if (error) {
      console.error(`‚ùå [SHARES_SOLD] Error fetching active phase:`, error);
      return { phase: null, error: error.message };
    }

    return { phase };
  } catch (error) {
    console.error(`‚ùå [SHARES_SOLD] Exception fetching active phase:`, error);
    return { phase: null, error: 'Internal error fetching active phase' };
  }
}

/**
 * Validate shares_sold integrity across all phases
 * @returns {Promise<{valid: boolean, issues?: Array, summary?: object}>}
 */
async function validateSharesSoldIntegrity() {
  try {
    console.log(`üîç [VALIDATION] Starting shares_sold integrity check...`);

    // Get all phases
    const { data: phases, error: phasesError } = await db.client
      .from('investment_phases')
      .select('*')
      .order('phase_number');

    if (phasesError) {
      console.error(`‚ùå [VALIDATION] Error fetching phases:`, phasesError);
      return { valid: false, issues: ['Failed to fetch investment phases'] };
    }

    const issues = [];
    let totalSharesSold = 0;
    let totalSharesAvailable = 0;

    for (const phase of phases) {
      const sharesSold = parseFloat(phase.shares_sold || 0);
      const totalAvailable = parseFloat(phase.total_shares_available || 0);
      const remaining = totalAvailable - sharesSold;

      totalSharesSold += sharesSold;
      totalSharesAvailable += totalAvailable;

      // Check for negative remaining shares
      if (remaining < 0) {
        issues.push(`Phase ${phase.phase_number}: Negative remaining shares (${remaining})`);
      }

      // Check for impossible values
      if (sharesSold > totalAvailable) {
        issues.push(`Phase ${phase.phase_number}: shares_sold (${sharesSold}) exceeds total_shares_available (${totalAvailable})`);
      }

      console.log(`üìä [VALIDATION] Phase ${phase.phase_number}: ${sharesSold}/${totalAvailable} shares sold (${remaining} remaining)`);
    }

    const summary = {
      total_phases: phases.length,
      total_shares_sold: totalSharesSold,
      total_shares_available: totalSharesAvailable,
      total_remaining: totalSharesAvailable - totalSharesSold,
      issues_found: issues.length
    };

    console.log(`üìä [VALIDATION] Summary:`, summary);

    if (issues.length > 0) {
      console.error(`‚ùå [VALIDATION] Found ${issues.length} integrity issues:`, issues);
      return { valid: false, issues, summary };
    }

    console.log(`‚úÖ [VALIDATION] shares_sold integrity check passed`);
    return { valid: true, summary };
  } catch (error) {
    console.error(`‚ùå [VALIDATION] Exception during integrity check:`, error);
    return { valid: false, issues: ['Internal validation error'] };
  }
}

// Create bot instance
const bot = new Telegraf(BOT_TOKEN);

// Simple session storage for temporary data
const sessions = new Map();

// Session middleware
bot.use((ctx, next) => {
  const sessionKey = `${ctx.from.id}`;
  ctx.session = sessions.get(sessionKey) || {};

  return next().then(() => {
    sessions.set(sessionKey, ctx.session);
  });
});

// Utility functions
function formatCurrency(amount) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
}

// Package formatting function removed - using custom amounts only

function createMainMenuKeyboard(isAdmin = false, hasKYC = true) {
  const keyboard = [
    [
      { text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }
    ],
    [
      { text: "üë• Referral Program", callback_data: "menu_referrals" },
      { text: "üìä My Portfolio", callback_data: "menu_portfolio" }
    ],
    [
      { text: "üí≥ Payment Status", callback_data: "menu_payments" },
      { text: "üìã Company Presentation", callback_data: "menu_presentation" }
    ],
    [
      { text: "üìã Legal Documents", callback_data: "menu_legal_documents" }
    ],
    [
      { text: "‚õèÔ∏è Mining Operations", callback_data: "menu_mining_operations" },
      { text: "üèòÔ∏è Community Relations", callback_data: "menu_community" }
    ],
    [
      { text: "üÜò Support Center", callback_data: "menu_help" },
      { text: "‚öôÔ∏è Settings", callback_data: "user_settings" }
    ]
  ];

  // Add KYC reminder if not completed
  if (!hasKYC) {
    keyboard.unshift([
      { text: "üîí Complete KYC (Required)", callback_data: "start_kyc_process" }
    ]);
  }

  // Add admin options if user is admin
  if (isAdmin) {
    keyboard.push([
      { text: "üîë Admin Panel", callback_data: "admin_panel" },
      { text: "üìä System Status", callback_data: "admin_status" }
    ]);
  }

  return { inline_keyboard: keyboard };
}

// Package keyboard function removed - using custom amounts only

function createTermsKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "‚úÖ I Accept Terms & Conditions", callback_data: "accept_terms" }
      ],
      [
        { text: "üìã Read Full Terms", url: "https://aureus.africa/terms" }
      ],
      [
        { text: "üîô Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };
}

async function createPaymentMethodKeyboard(userId = null) {
  const keyboard = [
    [
      { text: "üíé Tether (USDT)", callback_data: "payment_usdt" }
    ]
  ];

  // Check if user is eligible for bank transfer (ZAF, SWZ, NAM)
  if (userId) {
    const isBankTransferEligible = await checkBankTransferEligibility(userId);
    if (isBankTransferEligible) {
      keyboard.splice(2, 0, [
        { text: "üè¶ Bank Transfer (ZAR)", callback_data: "payment_bank_transfer" }
      ]);
    }
  }

  keyboard.push([
    { text: "üîô Back to Dashboard", callback_data: "main_menu" }
  ]);

  return {
    inline_keyboard: keyboard
  };
}

function createReferralKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üë• My Referrals", callback_data: "view_referrals" },
        { text: "üí∞ Commission Balance", callback_data: "view_commission" }
      ],
      [
        { text: "üí∏ Request Withdrawal", callback_data: "request_withdrawal" }
      ],
      [
        { text: "üîô Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };
}

function createPortfolioKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üìä Share Holdings", callback_data: "view_holdings" },
        { text: "üí∞ Investment History", callback_data: "view_history" }
      ],
      [
        { text: "üìà Performance", callback_data: "view_performance" }
      ],
      [
        { text: "üîô Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };
}



function createAdminKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "‚è≥ Pending Payments", callback_data: "admin_pending" },
        { text: "üë• User Management", callback_data: "admin_users" }
      ],
      [
        { text: "üí∞ Commission Requests", callback_data: "admin_commissions" },
        { text: "üìä System Stats", callback_data: "admin_stats" }
      ],
      [
        { text: "üìã Audit Logs", callback_data: "admin_logs" }
      ],
      [
        { text: "üîô Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };
}

// Authentication functions
async function authenticateUser(ctx, sponsorUsername = null) {
  const telegramId = ctx.from.id;
  const username = ctx.from.username;

  if (!username) {
    await ctx.reply("‚ùå Please set a Telegram username to use this bot.");
    return null;
  }

  try {
    // Get or create main user record by username first
    let user = await db.getUserByUsername(username);
    let isNewUser = false;

    if (!user) {
      isNewUser = true;
      // Create new user record (users table doesn't have telegram_id)
      user = await db.createUser({
        username: username,
        email: `${username}@telegram.local`, // Dummy email since it's required
        password_hash: 'telegram_auth', // Dummy password since it's required
        full_name: `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim()
      });

      if (!user) {
        throw new Error('Failed to create user record');
      }
    }

    // Get or create telegram user record linked to main user
    let telegramUser = await db.getTelegramUser(telegramId);

    if (!telegramUser) {
      // Create new telegram user record linked to main user
      telegramUser = await db.createTelegramUser(telegramId, {
        user_id: user.id, // Link to main user
        username: username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name
      });
    }

    // Link telegram user to main user if not already linked
    if (!telegramUser.user_id) {
      await db.updateTelegramUser(telegramId, {
        user_id: user.id,
        is_registered: true
      });
    }

    // Handle sponsor assignment
    if (sponsorUsername) {
      console.log(`üîó [authenticateUser] Sponsor provided via referral: ${sponsorUsername}`);
      // Check if user already has a sponsor
      const hasSponsor = await checkUserHasSponsor(user.id);
      if (!hasSponsor) {
        console.log(`ü§ù [authenticateUser] Assigning sponsor ${sponsorUsername} to user ${user.id}`);
        await assignSponsor(user.id, sponsorUsername);
      } else {
        console.log(`‚ö†Ô∏è [authenticateUser] User ${user.id} already has a sponsor, skipping assignment`);
      }
    } else if (isNewUser && !sponsorUsername) {
      // New user without sponsor - will be prompted later
      console.log(`üÜï New user ${user.username} registered without sponsor - will prompt for assignment`);
    }

    return user;
  } catch (error) {
    console.error('Authentication error:', error);
    await ctx.reply("‚ùå Authentication failed. Please try again.");
    return null;
  }
}

// Referral Registration Handler
async function handleReferralRegistration(ctx, sponsorUsername) {
  console.log(`üîó [handleReferralRegistration] Processing referral registration with sponsor: ${sponsorUsername}`);

  try {
    // Validate sponsor exists
    console.log(`üîç [handleReferralRegistration] Looking up sponsor: ${sponsorUsername}`);
    const sponsor = await db.getUserByUsername(sponsorUsername);
    if (!sponsor) {
      console.log(`‚ùå [handleReferralRegistration] Sponsor not found: ${sponsorUsername}, using TTTFOUNDER as fallback`);
      sponsorUsername = 'TTTFOUNDER';
    } else {
      console.log(`‚úÖ [handleReferralRegistration] Sponsor found: ${sponsor.username} (ID: ${sponsor.id})`);
    }

    // Authenticate user with sponsor assignment
    console.log(`üîê [handleReferralRegistration] Authenticating user with sponsor: ${sponsorUsername}`);
    const user = await authenticateUser(ctx, sponsorUsername);
    if (!user) {
      console.error(`‚ùå [handleReferralRegistration] User authentication failed`);
      return;
    }

    console.log(`‚úÖ [handleReferralRegistration] User authenticated: ${user.username} (ID: ${user.id})`);

    // Verify sponsor assignment was successful
    const hasSponsor = await checkUserHasSponsor(user.id);
    console.log(`üîç [handleReferralRegistration] Sponsor assignment check: ${hasSponsor ? 'SUCCESS' : 'FAILED'}`);

    if (!hasSponsor) {
      console.error(`‚ùå [handleReferralRegistration] CRITICAL: Sponsor assignment failed for user ${user.id}`);
    }

    // Show welcome message with sponsor confirmation
    const welcomeMessage = `üéâ **WELCOME TO AUREUS ALLIANCE HOLDINGS!**

‚úÖ **Registration Successful**
üë§ **Your Sponsor:** ${sponsorUsername}
ü§ù **Referral Bonus:** You're now part of our referral network!

**üéØ NEXT STEPS:**
‚Ä¢ Explore our gold mining investment opportunities
‚Ä¢ Review company presentation and mining operations
‚Ä¢ Start your investment journey with confidence

**üíé Your sponsor will earn commissions when you invest:**
‚Ä¢ 15% USDT commission
‚Ä¢ 15% additional shares commission

Let's get started with your gold mining investment!`;

    await ctx.replyWithMarkdown(welcomeMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
          [{ text: "üìã Company Presentation", callback_data: "menu_presentation" }],
          [{ text: "üíº My Portfolio", callback_data: "menu_portfolio" }],
          [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

    // TRIGGER COUNTRY SELECTION FOR NEW USERS
    console.log(`üåç [COUNTRY] Checking country selection status for new user ${user.id}...`);
    await triggerCountrySelectionIfNeeded(user.id);

  } catch (error) {
    console.error('Referral registration error:', error);
    await ctx.reply("‚ùå Error processing referral registration. Please try again.");
    await showMainMenu(ctx);
  }
}

// Sponsor Assignment Function
async function assignSponsor(userId, sponsorUsername) {
  try {
    console.log(`ü§ù [assignSponsor] Starting assignment: ${sponsorUsername} -> User ${userId}`);

    // Get sponsor user record
    let sponsor = await db.getUserByUsername(sponsorUsername);
    if (!sponsor) {
      console.log(`‚ùå [assignSponsor] Sponsor ${sponsorUsername} not found, using TTTFOUNDER`);
      sponsor = await db.getUserByUsername('TTTFOUNDER');
      if (!sponsor) {
        console.error('‚ùå [assignSponsor] TTTFOUNDER fallback sponsor not found!');
        return false;
      }
      sponsorUsername = 'TTTFOUNDER';
    }

    console.log(`‚úÖ [assignSponsor] Sponsor found: ${sponsor.username} (ID: ${sponsor.id})`);

    // Check if referral relationship already exists
    const { data: existingReferral, error: checkError } = await db.client
      .from('referrals')
      .select('id')
      .eq('referred_id', userId)
      .eq('status', 'active')
      .single();

    if (existingReferral && !checkError) {
      console.log(`‚ö†Ô∏è [assignSponsor] User ${userId} already has an active sponsor`);
      return true; // Consider this a success since they already have a sponsor
    }

    // Create referral relationship
    console.log(`üìù [assignSponsor] Creating referral relationship...`);
    const { data: referral, error: referralError } = await db.client
      .from('referrals')
      .insert({
        referrer_id: sponsor.id,
        referred_id: userId,
        referral_code: `${sponsorUsername}_${userId}_${Date.now()}`,
        commission_rate: 15.00,
        status: 'active',
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (referralError) {
      console.error('‚ùå [assignSponsor] Error creating referral relationship:', referralError);
      return false;
    }

    console.log(`‚úÖ [assignSponsor] Referral created successfully:`, referral);
    console.log(`‚úÖ [assignSponsor] Sponsor assigned successfully: ${sponsorUsername} -> User ${userId}`);
    return true;

  } catch (error) {
    console.error('‚ùå [assignSponsor] Error assigning sponsor:', error);
    return false;
  }
}

// Check if user has a sponsor
async function checkUserHasSponsor(userId) {
  try {
    const { data: referral, error } = await db.client
      .from('referrals')
      .select('id')
      .eq('referred_id', userId)
      .eq('status', 'active')
      .single();

    return !error && referral;
  } catch (error) {
    console.error('Error checking sponsor:', error);
    return false;
  }
}

// Check if user has accepted terms
async function checkTermsAcceptance(userId) {
  try {
    console.log(`üîç [checkTermsAcceptance] Checking terms for user ${userId}`);
    const { data: termsRecord, error } = await db.client
      .from('terms_acceptance')
      .select('id, accepted_at')
      .eq('user_id', userId)
      .eq('terms_type', 'general_terms')
      .single();

    const hasAccepted = !error && termsRecord;
    console.log(`üìã [checkTermsAcceptance] User ${userId} terms status: ${hasAccepted ? 'ACCEPTED' : 'NOT ACCEPTED'}`);
    return hasAccepted;
  } catch (error) {
    console.error('‚ùå Error checking terms acceptance:', error);
    return false;
  }
}

// Show Terms and Conditions
async function showTermsAndConditions(ctx, referralPayload = null) {
  console.log(`üìã [showTermsAndConditions] Displaying terms to user ${ctx.from.username}`);

  const termsMessage = `üìã **TERMS AND CONDITIONS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üèÜ AUREUS ALLIANCE HOLDINGS**
*Premium Gold Mining Investment Platform*

**üìú TERMS OF SERVICE:**

**1. INVESTMENT NATURE**
‚Ä¢ Gold mining shares represent ownership in physical mining operations
‚Ä¢ Returns depend on actual gold production and market conditions
‚Ä¢ No guaranteed returns or investment promises

**2. RISK DISCLOSURE**
‚Ä¢ Mining operations involve inherent risks
‚Ä¢ Share values may fluctuate based on operational performance
‚Ä¢ Past performance does not guarantee future results

**3. COMMISSION STRUCTURE**
‚Ä¢ Referral commissions: 15% USDT + 15% shares
‚Ä¢ Commissions paid on successful share purchases
‚Ä¢ Withdrawal subject to admin approval

**4. PLATFORM USAGE**
‚Ä¢ Users must provide accurate information
‚Ä¢ Prohibited: fraud, manipulation, unauthorized access
‚Ä¢ Platform reserves right to suspend accounts for violations

**5. DATA PRIVACY**
‚Ä¢ Personal information protected per privacy policy
‚Ä¢ Transaction data stored securely
‚Ä¢ No sharing with third parties without consent

**6. DISPUTE RESOLUTION**
‚Ä¢ Good faith resolution attempts required
‚Ä¢ Binding arbitration for unresolved disputes
‚Ä¢ Governing law: [Jurisdiction to be specified]

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚ö†Ô∏è MANDATORY ACCEPTANCE REQUIRED**
You must accept these terms to use the platform.`;

  const keyboard = [
    [{ text: "‚úÖ I Accept Terms & Conditions", callback_data: `accept_terms_${referralPayload || 'direct'}` }],
    [{ text: "‚ùå I Decline", callback_data: "decline_terms" }],
    [{ text: "üìÑ View Privacy Policy", callback_data: "view_privacy_policy" }]
  ];

  await ctx.replyWithMarkdown(termsMessage, {
    reply_markup: { inline_keyboard: keyboard }
  });
}

// Prompt user to assign sponsor
async function promptSponsorAssignment(ctx) {
  const sponsorMessage = `ü§ù **SPONSOR ASSIGNMENT REQUIRED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚ö†Ô∏è MANDATORY REFERRAL SYSTEM**

To proceed with Aureus Alliance Holdings, you need a sponsor. This ensures proper commission tracking and support throughout your investment journey.

**üéØ YOUR OPTIONS:**

**1Ô∏è‚É£ ENTER SPONSOR USERNAME**
If someone referred you, enter their username below.

**2Ô∏è‚É£ NO SPONSOR AVAILABLE**
You can continue without a sponsor and join directly.

**üí° WHY SPONSORS MATTER:**
‚Ä¢ Personalized investment guidance
‚Ä¢ Commission structure for referrers
‚Ä¢ Community support network
‚Ä¢ Proper tracking and accountability

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Please choose an option below:**`;

  await ctx.replyWithMarkdown(sponsorMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚úçÔ∏è Enter Sponsor Username", callback_data: "enter_sponsor_manual" }],
        [{ text: "üö´ I Don't Have A Sponsor", callback_data: "assign_default_sponsor" }],
        [{ text: "‚ÑπÔ∏è Learn About Referral System", callback_data: "menu_referrals" }]
      ]
    }
  });
}

// Handle manual sponsor entry
async function handleEnterSponsorManual(ctx) {
  console.log('üìù handleEnterSponsorManual called');
  const user = ctx.from;

  try {
    // Set user state for sponsor entry
    console.log(`üîß Setting user state for ${user.id}: awaiting_sponsor_username`);
    await setUserState(user.id, 'awaiting_sponsor_username', { timestamp: Date.now() });
    console.log(`‚úÖ User state set successfully for ${user.id}`);

  const instructionMessage = `‚úçÔ∏è **ENTER SPONSOR USERNAME**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Please type the Telegram username of your sponsor:**

**üìù FORMAT:** Just the username (without @)
**üìù EXAMPLE:** If sponsor is @JohnDoe, type: JohnDoe

**‚è∞ You have 5 minutes to enter the username.**

**üîô To cancel, type:** cancel`;

    await ctx.replyWithMarkdown(instructionMessage);
    console.log('‚úÖ Manual sponsor entry instructions sent');

  } catch (error) {
    console.error('‚ùå Error in handleEnterSponsorManual:', error);
    await ctx.reply('‚ùå Error setting up sponsor entry. Please try again.');
  }
}

// Handle default sponsor assignment
async function handleAssignDefaultSponsor(ctx) {
  console.log('ü§ù handleAssignDefaultSponsor called');
  const user = await authenticateUser(ctx);
  if (!user) return;

  try {
    console.log(`üîß Assigning TTTFOUNDER as sponsor for user ${user.id}`);
    const success = await assignSponsor(user.id, 'TTTFOUNDER');

    if (success) {
      const successMessage = `‚úÖ **SPONSOR ASSIGNED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**ü§ù Your Sponsor:** TTTFOUNDER
**üìÖ Assigned:** ${new Date().toLocaleDateString()}
**‚úÖ Status:** Active

**üéØ NEXT STEPS:**
You can now access all platform features and start your gold mining investment journey!

**üíé Your sponsor will provide:**
‚Ä¢ Investment guidance and support
‚Ä¢ Commission tracking for referrals
‚Ä¢ Access to exclusive updates

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

      await ctx.replyWithMarkdown(successMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
            [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
            [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
          ]
        }
      });
    } else {
      await ctx.reply("‚ùå Error assigning sponsor. Please try again.");
    }
  } catch (error) {
    console.error('Error assigning default sponsor:', error);
    await ctx.reply("‚ùå Error assigning sponsor. Please try again.");
  }
}

// Terms acceptance handler
async function handleTermsAcceptance(ctx) {
  const user = await authenticateUser(ctx);
  if (!user) return;

  try {
    // Check if user has already accepted terms
    const existingAcceptance = await db.getUserTermsAcceptance(user.id);
    
    if (existingAcceptance) {
      await ctx.answerCbQuery("‚úÖ You have already accepted the terms and conditions.");
      await ctx.editMessageText(
        "‚úÖ **Terms Already Accepted**\n\nYou have previously accepted our terms and conditions. You can proceed with all platform features.",
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
              [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
            ]
          }
        }
      );
      return;
    }

    // Record terms acceptance
    const accepted = await db.recordTermsAcceptance(user.id, ctx.from.id);
    
    if (accepted) {
      await ctx.answerCbQuery("‚úÖ Terms accepted successfully!");
      await ctx.editMessageText(
        "‚úÖ **Terms & Conditions Accepted**\n\nThank you for accepting our terms and conditions. You can now proceed with purchasing gold shares.",
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
              [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
            ]
          }
        }
      );
    } else {
      await ctx.answerCbQuery("‚ùå Failed to record terms acceptance");
      await ctx.reply("‚ùå Failed to record terms acceptance. Please try again.");
    }
  } catch (error) {
    console.error('Terms acceptance error:', error);
    await ctx.answerCbQuery("‚ùå Error processing terms acceptance");
    await ctx.reply("‚ùå Error processing terms acceptance. Please try again.");
  }
}

async function showMainMenu(ctx) {
  const user = ctx.from;

  // Authenticate user first
  const authenticatedUser = await authenticateUser(ctx);
  if (!authenticatedUser) return;

  // Check if user has a sponsor (required for new users)
  const hasSponsor = await checkUserHasSponsor(authenticatedUser.id);
  if (!hasSponsor) {
    await promptSponsorAssignment(ctx);
    return;
  }

  // Check if user has selected country (required for new users)
  const hasSelectedCountry = await checkCountrySelection(authenticatedUser.id);
  if (!hasSelectedCountry) {
    console.log(`üåç [COUNTRY] User ${authenticatedUser.id} has not selected country - showing country selection`);
    await showCountrySelection(ctx);
    return;
  }

  // Check KYC status and show KYC dashboard if needed
  const hasKYC = await checkKYCCompletion(authenticatedUser.id);
  if (!hasKYC) {
    console.log(`üìã [KYC] User ${authenticatedUser.id} has not completed KYC - showing KYC dashboard`);
    await showKYCDashboard(ctx, authenticatedUser.id);
    return;
  }

  const currentPhase = await db.getCurrentPhase();
  const isAdmin = user.username === ADMIN_USERNAME;

  // Send the new Aureus Alliance Holdings company logo
  try {
    const logoUrl = 'https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/logonew.png';
    await ctx.replyWithPhoto(logoUrl, {
      caption: `üèÜ **AUREUS ALLIANCE HOLDINGS** üèÜ\n*Premium Gold Mining Investments*`,
      parse_mode: 'Markdown'
    });
  } catch (logoError) {
    console.log('Company logo not available, proceeding with text menu:', logoError.message);
  }

  const phaseInfo = currentPhase
    ? `üìà **CURRENT PHASE:** ${currentPhase.phase_name}\nüí∞ **Share Price:** ${formatCurrency(currentPhase.price_per_share)}\nüìä **Available:** ${(currentPhase.total_shares_available - currentPhase.shares_sold).toLocaleString()} shares`
    : 'üìà **PHASE:** Loading...';

  const menuMessage = `üèÜ **AUREUS ALLIANCE HOLDINGS**
*Premium Gold Mining Share Purchase Dashboard*

Welcome back, **${user.first_name}**! üëã

${phaseInfo}

‚õèÔ∏è **MINING OPERATIONS STATUS:**
‚Ä¢ üè≠ **Washplants:** 10 units (200 tons/hour each)
‚Ä¢ ü•á **Annual Target:** 3,200 KG gold production
‚Ä¢ üìÖ **Full Capacity:** June 2026
‚Ä¢ üìä **Total Shares:** 1,400,000 available

üíé **SHARE PURCHASE OPPORTUNITIES:**
Choose your preferred method to buy shares in Aureus Alliance Holdings below.`;

  await ctx.replyWithMarkdown(menuMessage, {
    reply_markup: createMainMenuKeyboard(isAdmin, hasKYC)
  });
}

// Company Presentation Handler
async function handleCompanyPresentation(ctx) {
  const presentationMessage = `üìã **COMPANY PRESENTATION**

üèÜ **AUREUS ALLIANCE HOLDINGS**
*Premium Gold Mining Investment Opportunity*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä **EXECUTIVE SUMMARY:**
‚Ä¢ ü•á **Focus:** Alluvial gold mining operations
‚Ä¢ üìç **Location:** Mpumalanga Province, South Africa
‚Ä¢ ‚õèÔ∏è **Method:** Environmentally responsible placer mining
‚Ä¢ üí∞ **Investment:** Share-based ownership structure

üéØ **INVESTMENT HIGHLIGHTS:**
‚Ä¢ üè≠ **10 Washplants:** 200 tons/hour processing capacity each
‚Ä¢ üìà **Production Target:** 3,200 KG gold annually at full capacity
‚Ä¢ üìÖ **Timeline:** Full operations by June 2026
‚Ä¢ üíé **Total Shares:** 1,400,000 available for purchase

üìã **COMPREHENSIVE DOCUMENTATION:**
Access our complete business plan, geological surveys, and financial projections.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(presentationMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìÑ Download Full Presentation", url: "https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/presentation.pdf" }],
        [{ text: "üìä View Gold Chart", callback_data: "view_gold_chart" }],
        [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
        [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Mining Operations Handler
async function handleMiningOperations(ctx) {
  const miningMessage = `‚õèÔ∏è **MINING OPERATIONS OVERVIEW**

üè≠ **AUREUS ALLIANCE HOLDINGS**
*Advanced Alluvial Gold Mining Operations*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîß **OPERATIONAL SPECIFICATIONS:**
‚Ä¢ üè≠ **Washplants:** 10 units operational
‚Ä¢ ‚ö° **Capacity:** 200 tons/hour per unit
‚Ä¢ üìä **Daily Processing:** 48,000 tons potential
‚Ä¢ ü•á **Annual Target:** 3,200 KG gold production

üåç **ENVIRONMENTAL COMMITMENT:**
‚Ä¢ ‚ôªÔ∏è **Sustainable Methods:** Eco-friendly extraction
‚Ä¢ üíß **Water Management:** Closed-loop systems
‚Ä¢ üå± **Land Restoration:** Post-mining rehabilitation
‚Ä¢ üìã **Compliance:** All environmental permits secured

üìπ **MULTIMEDIA DOCUMENTATION:**
Explore our comprehensive visual documentation of mining operations.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(miningMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üé¨ Excavation Videos", callback_data: "mining_excavation" }],
        [{ text: "üî¨ Geological Evidence", callback_data: "mining_geology" }],
        [{ text: "üìä Project Overview", callback_data: "mining_overview" }],
        [{ text: "üëî Executive Assessment", callback_data: "mining_executive" }],
        [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Community Relations Handler
async function handleCommunityRelations(ctx) {
  const communityMessage = `üèòÔ∏è **COMMUNITY RELATIONS**

ü§ù **AUREUS ALLIANCE HOLDINGS**
*Building Sustainable Community Partnerships*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåü **COMMUNITY ENGAGEMENT:**
‚Ä¢ üë• **Local Employment:** Priority hiring from surrounding communities
‚Ä¢ üè´ **Education Support:** Funding for local schools and training programs
‚Ä¢ üè• **Healthcare Initiatives:** Medical facility support and health programs
‚Ä¢ üõ§Ô∏è **Infrastructure:** Road improvements and utility upgrades

üíº **ECONOMIC IMPACT:**
‚Ä¢ üí∞ **Job Creation:** 200+ direct employment opportunities
‚Ä¢ üè™ **Local Business:** Support for community suppliers and services
‚Ä¢ üìà **Economic Growth:** Sustainable development initiatives
‚Ä¢ üéì **Skills Development:** Mining and technical training programs

ü§ù **STAKEHOLDER RELATIONS:**
Regular community meetings and transparent communication about our operations.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(communityMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìÖ Community Meetings", callback_data: "community_meetings" }],
        [{ text: "üèóÔ∏è Development Plans", callback_data: "community_development" }],
        [{ text: "üìû Contact Community Liaison", url: "mailto:support@aureus.africa" }],
        [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Bot commands
bot.start(async (ctx) => {
  console.log(`üë§ [START] User started bot: ${ctx.from.first_name} (@${ctx.from.username})`);

  // Check for referral parameter in start command
  const startPayload = ctx.startPayload;

  // First, check if user has accepted terms
  const user = await authenticateUser(ctx, startPayload);
  if (!user) return;

  console.log(`üîç [START] Checking terms acceptance for user ${user.id}`);
  const hasAcceptedTerms = await checkTermsAcceptance(user.id);

  if (!hasAcceptedTerms) {
    console.log(`üìã [START] User ${user.id} has not accepted terms - showing terms`);
    await showTermsAndConditions(ctx, startPayload);
  } else {
    console.log(`‚úÖ [START] User ${user.id} has accepted terms - proceeding`);
    if (startPayload) {
      console.log(`üîó [START] Referral link detected with payload: ${startPayload}`);
      await handleReferralRegistration(ctx, startPayload);
    } else {
      console.log(`üè† [START] No referral payload, showing main menu`);
      await showMainMenu(ctx);
    }
  }
});

bot.command("menu", async (ctx) => {
  await showMainMenu(ctx);
});

// Version check command (temporary for debugging)
bot.command('version', async (ctx) => {
  const versionInfo = `üîç **BOT VERSION CHECK**

üìÖ **Deployment Time:** ${new Date().toISOString()}
üîó **Bot Link:** https://t.me/AureusAllianceBot
‚úÖ **Status:** Running aureus-bot-new.js
üéØ **NEW BOT TOKEN:** AureusAllianceBot (clean slate)
üîó **REFERRAL LINK FIX:** Applied ${new Date().toISOString()}

üö® **CRITICAL FIX STATUS:**
üí∞ Share Calculation: amount √∑ phase_price = shares
üìä Example: $100 √∑ $5.00 = 20 shares (NOT 100!)
üîß Fixed in handleApprovePayment line 2680
üîó Bot links: ALL use AureusAllianceBot (NEW BOT)

‚úÖ **New bot token resolves all username inconsistencies!**`;

  await ctx.replyWithMarkdown(versionInfo);
});



// Callback query handler
bot.on('callback_query', async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const user = await authenticateUser(ctx);

  if (!user && !['main_menu', 'accept_terms'].includes(callbackData)) {
    await ctx.answerCbQuery("‚ùå Authentication required");
    return;
  }

  // Check if user has a sponsor (except for sponsor-related actions and admin functions)
  const excludedCallbacks = [
    'main_menu', 'accept_terms', 'menu_referrals', 'enter_sponsor_manual', 'assign_default_sponsor',
    'view_approved', 'view_rejected', 'view_pending'
  ];

  // Exclude all admin callbacks from sponsor check
  const isAdminCallback = callbackData.startsWith('admin_') || callbackData.includes('admin');

  if (user && !excludedCallbacks.includes(callbackData) && !isAdminCallback) {
    const hasSponsor = await checkUserHasSponsor(user.id);
    if (!hasSponsor) {
      await promptSponsorAssignment(ctx);
      return;
    }
  }

  console.log(`üîç Callback: ${callbackData} from ${ctx.from.username}`);
  console.log(`üîç [DEBUG] Callback data type: ${typeof callbackData}, length: ${callbackData.length}`);
  console.log(`üîç [DEBUG] Callback data exact: "${callbackData}"`);

  // Direct handling for payment callbacks (bypassing switch statement issues)
  if (callbackData === 'admin_approved_payments') {
    console.log('üîß [FIXED] Handling admin_approved_payments directly');
    await handleAdminApprovedPayments(ctx);
    return;
  }

  if (callbackData === 'admin_rejected_payments') {
    console.log('üîß [FIXED] Handling admin_rejected_payments directly');
    await handleAdminRejectedPayments(ctx);
    return;
  }

  if (callbackData === 'view_approved') {
    console.log('üîß [FIXED] Handling view_approved directly');
    await handleViewApprovedPayments(ctx);
    return;
  }

  if (callbackData === 'view_rejected') {
    console.log('üîß [FIXED] Handling view_rejected directly');
    await handleViewRejectedPayments(ctx);
    return;
  }

  if (callbackData === 'view_pending') {
    console.log('üîß [FIXED] Handling view_pending directly');
    await handleViewPendingPayments(ctx);
    return;
  }

  try {
    console.log('üîç [DEBUG] Entering switch statement for:', callbackData);
    switch (callbackData) {
      case 'main_menu':
        await showMainMenu(ctx);
        break;

      case 'accept_terms':
        await handleTermsAcceptance(ctx);
        break;



      case 'menu_presentation':
        await handleCompanyPresentation(ctx);
        break;

      case 'menu_mining_operations':
        await handleMiningOperations(ctx);
        break;

      case 'menu_community':
        await handleCommunityRelations(ctx);
        break;

      case 'menu_legal_documents':
        await handleLegalDocuments(ctx);
        break;

      case 'menu_help':
        await handleSupportCenter(ctx);
        break;

      // Gold Chart Handler
      case 'view_gold_chart':
        await ctx.answerCbQuery('Opening gold chart...');
        await ctx.replyWithPhoto('https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/chart.png', {
          caption: 'üìä *AUREUS ALLIANCE HOLDINGS*\n*Gold Price Performance Chart*\n\nüìà Historical gold price trends and market analysis for informed investment decisions.',
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîô Back to Presentation", callback_data: "menu_presentation" }],
              [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
            ]
          }
        });
        break;

      // Mining Operations Handlers
      case 'mining_excavation':
        await showExcavationVideos(ctx);
        break;

      case 'mining_geology':
        await showGeologicalEvidence(ctx);
        break;

      case 'mining_overview':
        await showProjectOverview(ctx);
        break;

      case 'mining_executive':
        await showExecutiveAssessment(ctx);
        break;

      // Community Relations Handlers
      case 'community_meetings':
        await showCommunityMeetings(ctx);
        break;

      case 'community_development':
        await showDevelopmentPlans(ctx);
        break;

      // RESTORED PAYMENT SYSTEM HANDLERS
      case 'menu_purchase_shares':
        await handlePurchaseSharesStart(ctx);
        break;

      case 'admin_validate_shares_sold':
        await handleValidateSharesSold(ctx);
        break;

      case 'menu_referrals':
        await handleReferralSystem(ctx);
        break;

      case 'menu_portfolio':
        await handlePortfolio(ctx);
        break;

      case 'menu_payments':
        await handlePaymentStatus(ctx);
        break;

      case 'admin_panel':
        await handleAdminPanel(ctx);
        break;

      case 'admin_status':
        await handleAdminStatus(ctx);
        break;

      case 'admin_pending':
        await handleAdminPayments(ctx);
        break;

      case 'admin_users':
        await handleAdminUsers(ctx);
        break;

      case 'admin_commissions':
        await handleAdminCommissions(ctx);
        break;

      case 'admin_commission_conversions':
        await handleAdminCommissionConversions(ctx);
        break;

      case 'admin_pending_withdrawals':
        await handleAdminPendingWithdrawals(ctx);
        break;

      case 'admin_stats':
        await handleAdminAnalytics(ctx);
        break;

      case 'admin_logs':
        await handleAdminLogs(ctx);
        break;

      case 'admin_payments':
        await handleAdminPayments(ctx);
        break;

      case 'admin_analytics':
        await handleAdminAnalytics(ctx);
        break;

      case 'admin_broadcast':
        await handleAdminBroadcast(ctx);
        break;

      case 'admin_settings':
        await handleAdminSettings(ctx);
        break;

      case 'toggle_maintenance':
        await handleToggleMaintenance(ctx);
        break;

      case 'admin_user_sponsors':
        await handleAdminUserSponsors(ctx);
        break;



      default:
        console.log('üîç [DEBUG] Entered default case for callback:', callbackData);
        // Check for dynamic callback patterns
        if (callbackData.startsWith('continue_payment_')) {
          await handleContinuePayment(ctx, callbackData);
        } else if (callbackData.startsWith('cancel_payment_')) {
          await handleCancelPayment(ctx, callbackData);
        } else if (callbackData.startsWith('confirm_cancel_')) {
          await handleConfirmCancel(ctx, callbackData);
        } else if (callbackData.startsWith('confirm_purchase_')) {
          await handleConfirmPurchase(ctx, callbackData);
        } else if (callbackData.startsWith('upload_proof_')) {
          await handleUploadProof(ctx, callbackData);
        } else if (callbackData.startsWith('review_payment_')) {
          await handleReviewPayment(ctx, callbackData);
        } else if (callbackData.startsWith('approve_payment_')) {
          await handleApprovePayment(ctx, callbackData);
        } else if (callbackData.startsWith('reject_payment_')) {
          await handleRejectPaymentPrompt(ctx, callbackData);
        } else if (callbackData.startsWith('view_screenshot_')) {
          await handleViewScreenshot(ctx, callbackData);
        } else if (callbackData.startsWith('view_bank_proof_')) {
          await handleViewBankProof(ctx, callbackData);
        } else if (callbackData === 'cancel_proof_upload') {
          await handleCancelProofUpload(ctx);
        } else if (callbackData === 'view_portfolio') {
          await handlePortfolio(ctx);
        } else if (callbackData === 'share_referral') {
          await handleShareReferral(ctx);
        } else if (callbackData === 'view_commission') {
          await handleViewCommission(ctx);
        } else if (callbackData === 'view_pending_requests') {
          await handleViewPendingRequests(ctx);
        } else if (callbackData === 'manage_pending_requests') {
          await handleManagePendingRequests(ctx);
        } else if (callbackData === 'user_settings') {
          await handleUserSettings(ctx);
        } else if (callbackData === 'test_audio_notification') {
          await handleTestAudioNotification(ctx);
        } else if (callbackData === 'toggle_audio_notifications') {
          await handleToggleAudioNotifications(ctx);
        } else if (callbackData === 'customize_audio_types') {
          await handleCustomizeAudioTypes(ctx);
        } else if (callbackData === 'toggle_payment_approval_audio') {
          await handleToggleSpecificAudioType(ctx, 'payment_approval_audio');
        } else if (callbackData === 'toggle_payment_rejection_audio') {
          await handleToggleSpecificAudioType(ctx, 'payment_rejection_audio');
        } else if (callbackData === 'toggle_withdrawal_audio') {
          await handleToggleSpecificAudioType(ctx, 'withdrawal_approval_audio');
        } else if (callbackData === 'toggle_commission_audio') {
          await handleToggleSpecificAudioType(ctx, 'commission_update_audio');
        } else if (callbackData === 'toggle_referral_audio') {
          await handleToggleSpecificAudioType(ctx, 'referral_bonus_audio');
        } else if (callbackData === 'toggle_system_audio') {
          await handleToggleSpecificAudioType(ctx, 'system_announcement_audio');
        } else if (callbackData === 'view_referrals') {
          await handleViewReferrals(ctx);
        } else if (callbackData === 'withdraw_commissions') {
          await handleWithdrawCommissions(ctx);
        } else if (callbackData === 'withdraw_usdt_commission') {
          await handleWithdrawUSDTCommission(ctx);
        } else if (callbackData === 'commission_to_shares') {
          await handleCommissionToShares(ctx);
        } else if (callbackData === 'commission_to_shares') {
          await handleCommissionToShares(ctx);
        } else if (callbackData.startsWith('confirm_commission_conversion_')) {
          await handleConfirmCommissionConversion(ctx, callbackData);
        } else if (callbackData.startsWith('approve_commission_conversion_')) {
          await handleApproveCommissionConversion(ctx, callbackData);
        } else if (callbackData.startsWith('reject_commission_conversion_')) {
          await handleRejectCommissionConversion(ctx, callbackData);
        } else if (callbackData.startsWith('approve_conv_')) {
          await handleApproveCommissionConversionShort(ctx, callbackData);
        } else if (callbackData.startsWith('reject_conv_')) {
          await handleRejectCommissionConversionShort(ctx, callbackData);
        } else if (callbackData.startsWith('approve_withdrawal_')) {
          await handleApproveWithdrawalShort(ctx, callbackData);
        } else if (callbackData.startsWith('reject_withdrawal_')) {
          await handleRejectWithdrawalPrompt(ctx, callbackData);
        } else if (callbackData === 'withdrawal_history') {
          await handleWithdrawalHistory(ctx);
        } else if (callbackData.startsWith('copy_referral_link_')) {
          await handleCopyReferralLink(ctx, callbackData);
        } else if (callbackData.startsWith('copy_referral_')) {
          await handleCopyReferral(ctx, callbackData);
        } else if (callbackData === 'enter_sponsor_manual') {
          console.log('üîß Handling enter_sponsor_manual callback');
          await ctx.answerCbQuery("Setting up manual sponsor entry...");
          await handleEnterSponsorManual(ctx);
        } else if (callbackData === 'assign_default_sponsor') {
          console.log('üîß Handling assign_default_sponsor callback');
          await ctx.answerCbQuery("Assigning default sponsor...");
          await handleAssignDefaultSponsor(ctx);
        } else if (callbackData.startsWith('accept_terms_')) {
          await handleTermsAcceptance(ctx, callbackData);
        } else if (callbackData === 'decline_terms') {
          await handleTermsDecline(ctx);
        } else if (callbackData === 'view_privacy_policy') {
          await showPrivacyPolicy(ctx);
        } else if (callbackData === 'payment_usdt') {
          console.log('üîç [DEBUG] Handling payment_usdt callback');
          await ctx.answerCbQuery('üíé Loading USDT networks...');
          await handleUSDTPaymentNetworkSelection(ctx);
        } else if (callbackData === 'payment_bank_transfer') {
          await handleBankTransferPayment(ctx);
        } else if (callbackData.startsWith('usdt_network_')) {
          await handleUSDTNetworkSelection(ctx, callbackData);
        } else if (callbackData === 'accept_nda') {
          await handleNDAAcceptance(ctx);
        } else if (callbackData === 'decline_nda') {
          await handleNDADecline(ctx);
        } else if (callbackData.startsWith('view_document_')) {
          await handleDocumentView(ctx, callbackData);
        } else if (callbackData === 'start_kyc_process') {
          await handleStartKYCProcess(ctx);
        } else if (callbackData === 'kyc_info') {
          await handleKYCInfo(ctx);
        } else if (callbackData === 'kyc_later') {
          await handleKYCLater(ctx);
        } else if (callbackData.startsWith('kyc_')) {
          await handleKYCStep(ctx, callbackData);
        } else if (callbackData.startsWith('select_country_')) {
          await handleCountrySelection(ctx, callbackData);
        } else if (callbackData === 'show_more_countries') {
          await showMoreCountries(ctx);
        } else if (callbackData === 'country_selection_other') {
          await handleOtherCountrySelection(ctx);
        } else if (callbackData === 'show_asia_countries') {
          await showAsiaCountries(ctx);
        } else if (callbackData === 'show_africa_countries') {
          await showAfricaCountries(ctx);
        } else if (callbackData === 'show_americas_countries') {
          await showAmericasCountries(ctx);
        } else if (callbackData === 'show_oceania_countries') {
          await showOceaniaCountries(ctx);
        } else if (callbackData.startsWith('upload_proof_')) {
          await handleUploadProofRequest(ctx, callbackData);
        } else {
          await ctx.answerCbQuery("üöß Feature coming soon!");
        }
        break;
    }
  } catch (error) {
    console.error('Callback error:', error);
    await ctx.answerCbQuery("‚ùå Error processing request");
  }
});

// Support Center Handler
async function handleSupportCenter(ctx) {
  const supportMessage = `üÜò **AUREUS SUPPORT CENTER**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**24/7 PREMIUM SUPPORT**

üåü **CONTACT OPTIONS:**
‚Ä¢ üìß **Email:** support@aureus.africa
‚Ä¢ üåê **Website:** https://aureus.africa
‚Ä¢ üí¨ **Live Chat:** Available on website
‚Ä¢ üì± **WhatsApp:** +27 XX XXX XXXX

üîß **SUPPORT SERVICES:**
‚Ä¢ ‚ùì General inquiries and assistance
‚Ä¢ üí∞ Payment and transaction support
‚Ä¢ üìä Portfolio and investment guidance
‚Ä¢ üîê Account security and access issues

‚è∞ **RESPONSE TIMES:**
‚Ä¢ üìß Email: Within 24 hours
‚Ä¢ üí¨ Live Chat: Immediate during business hours
‚Ä¢ üì± WhatsApp: Within 2 hours

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(supportMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìß Email Support", url: "mailto:support@aureus.africa" }],
        [{ text: "üåê Visit Website", url: "https://aureus.africa" }],
        [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// TERMS AND CONDITIONS HANDLERS

// Handle Terms Acceptance
async function handleTermsAcceptance(ctx, callbackData = null) {
  const user = ctx.from;
  console.log(`‚úÖ [handleTermsAcceptance] User ${user.username} accepting terms`);

  try {
    // Get user ID from database
    const authenticatedUser = await db.getUserByUsername(user.username);
    if (!authenticatedUser) {
      await ctx.answerCbQuery("‚ùå Authentication error");
      return;
    }

    // Record terms acceptance (use insert with error handling for duplicates)
    const { error: termsError } = await db.client
      .from('terms_acceptance')
      .insert({
        user_id: authenticatedUser.id,
        terms_type: 'general_terms',
        version: '1.0',
        accepted_at: new Date().toISOString()
      });

    if (termsError) {
      // Check if it's a duplicate key error (user already accepted terms)
      if (termsError.code === '23505' || termsError.message?.includes('duplicate')) {
        console.log(`‚ÑπÔ∏è User ${authenticatedUser.id} already accepted terms - proceeding`);
      } else {
        console.error('‚ùå Error recording terms acceptance:', termsError);
        console.error('‚ùå Terms acceptance data:', {
          user_id: authenticatedUser.id,
          terms_type: 'general_terms',
          version: '1.0'
        });
        await ctx.answerCbQuery("‚ùå Error recording acceptance");
        return;
      }
    }

    console.log(`‚úÖ Terms accepted successfully for user ${authenticatedUser.id}`);
    await ctx.answerCbQuery("‚úÖ Terms accepted successfully!");

    // Extract referral payload if present
    const referralPayload = callbackData && callbackData.startsWith('accept_terms_')
      ? callbackData.replace('accept_terms_', '')
      : null;

    // Proceed with registration flow
    if (referralPayload && referralPayload !== 'direct') {
      console.log(`üîó Processing referral registration with sponsor: ${referralPayload}`);
      await handleReferralRegistration(ctx, referralPayload);
    } else {
      console.log(`üè† Showing main menu after terms acceptance`);
      await showMainMenu(ctx);
    }

  } catch (error) {
    console.error('‚ùå Error handling terms acceptance:', error);
    await ctx.answerCbQuery("‚ùå Error processing acceptance");
  }
}

// Handle Terms Decline
async function handleTermsDecline(ctx) {
  console.log(`‚ùå [handleTermsDecline] User ${ctx.from.username} declined terms`);

  await ctx.answerCbQuery("Terms declined");

  const declineMessage = `‚ùå **TERMS DECLINED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚ö†Ô∏è ACCESS RESTRICTED**

You have declined to accept our Terms and Conditions.

**üìã IMPORTANT:**
‚Ä¢ Terms acceptance is mandatory to use this platform
‚Ä¢ You cannot access any features without accepting terms
‚Ä¢ Your data will not be stored or processed

**üîÑ TO CONTINUE:**
‚Ä¢ Restart the bot with /start
‚Ä¢ Review and accept the terms
‚Ä¢ Begin your gold mining investment journey

**üìû QUESTIONS?**
Contact @TTTFOUNDER for clarification about our terms.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(declineMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîÑ Restart Bot", callback_data: "restart_bot" }],
        [{ text: "üìß Contact Support", url: "https://t.me/TTTFOUNDER" }]
      ]
    }
  });
}

// Handle USDT Payment Network Selection
async function handleUSDTPaymentNetworkSelection(ctx) {
  const networkMessage = `üíé **USDT PAYMENT NETWORKS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Choose your preferred USDT network:**

üî∑ **Ethereum (ETH)** - ERC-20
‚Ä¢ Network: Ethereum Mainnet
‚Ä¢ Gas fees: Higher but most secure
‚Ä¢ Confirmation time: ~15 minutes

üü° **Binance Smart Chain (BSC)** - BEP-20
‚Ä¢ Network: BSC Mainnet
‚Ä¢ Gas fees: Low
‚Ä¢ Confirmation time: ~3 minutes

üü£ **Polygon (POL)** - Polygon
‚Ä¢ Network: Polygon Mainnet
‚Ä¢ Gas fees: Very low
‚Ä¢ Confirmation time: ~2 minutes

üî¥ **TRON (TRX)** - TRC-20
‚Ä¢ Network: Tron Mainnet
‚Ä¢ Gas fees: Lowest
‚Ä¢ Confirmation time: ~3 minutes

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ Only send USDT on the selected network
‚Ä¢ Wrong network = lost funds
‚Ä¢ Double-check network before sending`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üî∑ Ethereum (ETH-ERC20)", callback_data: "usdt_network_ETH" },
        { text: "üü° BSC (BEP-20)", callback_data: "usdt_network_BSC" }
      ],
      [
        { text: "üü£ Polygon (POL)", callback_data: "usdt_network_POL" },
        { text: "üî¥ TRON (TRC-20)", callback_data: "usdt_network_TRON" }
      ],
      [
        { text: "üîô Back to Payment Methods", callback_data: "menu_purchase_shares" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(networkMessage, { reply_markup: keyboard });
}

// Handle USDT Network Selection
async function handleUSDTNetworkSelection(ctx, callbackData) {
  const network = callbackData.split('_')[2]; // Extract network from usdt_network_ETH

  // Map network names to display names and technical details
  const networkInfo = {
    'ETH': {
      name: 'Ethereum',
      displayName: 'ETH-ERC20',
      technical: 'ERC-20',
      confirmTime: '~15 minutes',
      gasFees: 'Higher',
      icon: 'üî∑'
    },
    'BSC': {
      name: 'Binance Smart Chain',
      displayName: 'BSC-BEP20',
      technical: 'BEP-20',
      confirmTime: '~3 minutes',
      gasFees: 'Low',
      icon: 'üü°'
    },
    'POL': {
      name: 'Polygon',
      displayName: 'POL-Polygon',
      technical: 'Polygon',
      confirmTime: '~2 minutes',
      gasFees: 'Very Low',
      icon: 'üü£'
    },
    'TRON': {
      name: 'TRON',
      displayName: 'TRON-TRC20',
      technical: 'TRC-20',
      confirmTime: '~3 minutes',
      gasFees: 'Lowest',
      icon: 'üî¥'
    }
  };

  const selectedNetwork = networkInfo[network];

  if (!selectedNetwork) {
    await ctx.answerCbQuery("‚ùå Invalid network selection");
    return;
  }

  await ctx.answerCbQuery(`${selectedNetwork.icon} ${selectedNetwork.name} selected`);

  // Now proceed with the custom amount purchase using the selected network
  await handleCustomAmountPurchaseWithNetwork(ctx, network);
}

// Show Privacy Policy
async function showPrivacyPolicy(ctx) {
  const privacyMessage = `üîí **PRIVACY POLICY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üèÜ AUREUS ALLIANCE HOLDINGS**
*Data Protection & Privacy*

**üìä DATA COLLECTION:**
‚Ä¢ Username and contact information
‚Ä¢ Transaction and payment data
‚Ä¢ Investment portfolio information
‚Ä¢ Communication records

**üîê DATA USAGE:**
‚Ä¢ Platform operation and maintenance
‚Ä¢ Investment processing and tracking
‚Ä¢ Customer support and communication
‚Ä¢ Legal compliance and reporting

**üõ°Ô∏è DATA PROTECTION:**
‚Ä¢ Encrypted data transmission
‚Ä¢ Secure database storage
‚Ä¢ Limited access controls
‚Ä¢ Regular security audits

**üì§ DATA SHARING:**
‚Ä¢ No sharing with third parties
‚Ä¢ Exception: Legal requirements only
‚Ä¢ Anonymous analytics may be used
‚Ä¢ User consent required for marketing

**üóëÔ∏è DATA RETENTION:**
‚Ä¢ Active accounts: Indefinite storage
‚Ä¢ Inactive accounts: 7 years maximum
‚Ä¢ Deletion upon written request
‚Ä¢ Legal requirements may override

**üë§ YOUR RIGHTS:**
‚Ä¢ Access your personal data
‚Ä¢ Request data correction
‚Ä¢ Request data deletion
‚Ä¢ Withdraw consent anytime

**üìû PRIVACY CONTACT:**
‚Ä¢ Email: support@aureus.africa
‚Ä¢ Telegram: @TTTFOUNDER
‚Ä¢ Response: 30 days maximum

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Last Updated:** January 2025`;

  await ctx.replyWithMarkdown(privacyMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîô Back to Terms", callback_data: "show_terms" }],
        [{ text: "‚úÖ Accept All Terms", callback_data: "accept_terms_direct" }]
      ]
    }
  });
}

// Multimedia Documentation Functions
async function showExcavationVideos(ctx) {
  const videosMessage = `üé¨ *EXCAVATION VIDEOS*
‚õèÔ∏è *AUREUS ALLIANCE HOLDINGS*
*Live Mining Operations Documentation*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üé• **PRIMARY PIT EXCAVATION:**
‚Ä¢ Video: Active washplant operations
‚Ä¢ Location: Main excavation site
‚Ä¢ Equipment: 200 tons/hour processing capacity

üé¨ **SOIL PROCESSING OPERATIONS:**
‚Ä¢ Video: Real-time gold extraction process
‚Ä¢ Method: Environmentally responsible mining
‚Ä¢ Output: Continuous gold recovery operations

üìπ **SECONDARY SITE DOCUMENTATION:**
‚Ä¢ Video: Additional excavation activities
‚Ä¢ Scope: Comprehensive operational coverage
‚Ä¢ Quality: Professional documentation standards

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(videosMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üé• Primary Pit Video", url: "https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/pits.mp4" }],
        [{ text: "‚öíÔ∏è Processing Video", url: "https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/digging.mp4" }],
        [{ text: "üìπ Secondary Site", url: "https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/digging%202.mp4" }],
        [{ text: "üîô Back to Mining Operations", callback_data: "menu_mining_operations" }]
      ]
    }
  });
}

async function showGeologicalEvidence(ctx) {
  const evidenceMessage = `üî¨ *GEOLOGICAL EVIDENCE*
‚õèÔ∏è *AUREUS ALLIANCE HOLDINGS*
*Scientific Gold Discovery Documentation*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üèîÔ∏è **GOLD PARTICLES IN SAND:**
‚Ä¢ Analysis: Visible gold particles in processed sand
‚Ä¢ Concentration: High-grade alluvial deposits
‚Ä¢ Verification: Professional geological assessment

üíé **GOLD VEINS IN ROCK SAMPLES:**
‚Ä¢ Discovery: Natural gold veins in rock formations
‚Ä¢ Quality: Premium grade ore samples
‚Ä¢ Significance: Substantial mineral reserves confirmed

üîç **TECHNICAL ANALYSIS:**
‚Ä¢ Method: Professional geological surveying
‚Ä¢ Results: Confirmed gold-bearing formations
‚Ä¢ Potential: Extensive mineral resource base

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(evidenceMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üèñÔ∏è Gold in Sand", url: "https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/goldinsand.jpg" }],
        [{ text: "üíé Gold in Rock", url: "https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets/goldinrock.JPG" }],
        [{ text: "üîô Back to Mining Operations", callback_data: "menu_mining_operations" }]
      ]
    }
  });
}

async function showProjectOverview(ctx) {
  const overviewMessage = `üìä *PROJECT OVERVIEW*
‚õèÔ∏è *AUREUS ALLIANCE HOLDINGS*
*Comprehensive Mining Project Scope*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üèûÔ∏è **PROJECT SCALE:**
‚Ä¢ Total Area: 300 hectares of mining concessions
‚Ä¢ Operations: 10 washplants (200 tons/hour each)
‚Ä¢ Capacity: 48,000 tons daily processing potential
‚Ä¢ Target: 3,200 KG annual gold production

üåç **LOCATION ADVANTAGES:**
‚Ä¢ Region: Mpumalanga Province, South Africa
‚Ä¢ Access: Established infrastructure and logistics
‚Ä¢ Resources: Abundant water and power supply
‚Ä¢ Community: Strong local partnerships

üìà **DEVELOPMENT TIMELINE:**
‚Ä¢ Phase 1: Equipment deployment and site preparation
‚Ä¢ Phase 2: Full operational capacity by June 2026
‚Ä¢ Phase 3: Expansion and optimization programs
‚Ä¢ Long-term: Sustainable 20-year operation plan

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(overviewMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîô Back to Mining Operations", callback_data: "menu_mining_operations" }],
        [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

async function showExecutiveAssessment(ctx) {
  const executiveMessage = `üëî *EXECUTIVE ASSESSMENT*
‚õèÔ∏è *AUREUS ALLIANCE HOLDINGS*
*Leadership Team & Strategic Vision*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë®‚Äçüíº **JP RADEMEYER - CEO & FOUNDER:**
‚Ä¢ Experience: 15+ years in mining operations
‚Ä¢ Expertise: Gold extraction and processing
‚Ä¢ Vision: Sustainable and profitable mining
‚Ä¢ Leadership: Community-focused development

üéØ **STRATEGIC OBJECTIVES:**
‚Ä¢ Operational Excellence: Maximum efficiency standards
‚Ä¢ Environmental Responsibility: Eco-friendly practices
‚Ä¢ Community Development: Local economic growth
‚Ä¢ Investor Returns: Consistent dividend payments

üìä **PERFORMANCE METRICS:**
‚Ä¢ Safety Record: Zero-incident operational standards
‚Ä¢ Environmental Compliance: 100% regulatory adherence
‚Ä¢ Community Relations: Active stakeholder engagement
‚Ä¢ Financial Transparency: Regular investor reporting

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(executiveMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîô Back to Mining Operations", callback_data: "menu_mining_operations" }],
        [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

async function showCommunityMeetings(ctx) {
  const meetingsMessage = `üèòÔ∏è *COMMUNITY MEETINGS*
‚õèÔ∏è *AUREUS ALLIANCE HOLDINGS*
*Stakeholder Engagement & Communication*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÖ **REGULAR MEETINGS SCHEDULE:**
‚Ä¢ Monthly: Community liaison meetings
‚Ä¢ Quarterly: Stakeholder progress reports
‚Ä¢ Annually: Comprehensive impact assessments
‚Ä¢ Ad-hoc: Issue resolution and feedback sessions

ü§ù **ENGAGEMENT TOPICS:**
‚Ä¢ Employment Opportunities: Local hiring priorities
‚Ä¢ Environmental Impact: Monitoring and mitigation
‚Ä¢ Infrastructure Development: Community improvements
‚Ä¢ Economic Benefits: Revenue sharing programs

üë• **STAKEHOLDER GROUPS:**
‚Ä¢ Local Communities: Direct engagement programs
‚Ä¢ Traditional Leaders: Respect for cultural values
‚Ä¢ Government Officials: Regulatory compliance
‚Ä¢ Environmental Groups: Sustainability partnerships

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(meetingsMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîô Back to Community Relations", callback_data: "menu_community" }],
        [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

async function showDevelopmentPlans(ctx) {
  const developmentMessage = `üèóÔ∏è *DEVELOPMENT PLANS*
‚õèÔ∏è *AUREUS ALLIANCE HOLDINGS*
*Long-term Community Development Initiatives*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üè´ **EDUCATION INITIATIVES:**
‚Ä¢ School Infrastructure: Classroom construction
‚Ä¢ Scholarship Programs: Student support funding
‚Ä¢ Technical Training: Mining skills development
‚Ä¢ Adult Education: Literacy and numeracy programs

üè• **HEALTHCARE DEVELOPMENT:**
‚Ä¢ Medical Facilities: Clinic establishment
‚Ä¢ Health Programs: Preventive care initiatives
‚Ä¢ Emergency Services: First aid and ambulance
‚Ä¢ Community Health: Wellness and nutrition

üöß **INFRASTRUCTURE PROJECTS:**
‚Ä¢ Road Construction: Improved transportation
‚Ä¢ Water Systems: Clean water access
‚Ä¢ Electricity: Power grid connections
‚Ä¢ Communication: Internet and mobile coverage

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(developmentMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîô Back to Community Relations", callback_data: "menu_community" }],
        [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Error handling
bot.catch((err, ctx) => {
  console.error("üö® Bot error:", err);
  ctx.reply("Sorry, something went wrong. Please try again later.");
});

// Database setup for new features - REMOVED
// All database schema changes are handled manually by the user
// The bot cannot create tables, only update existing data

// üîç Admin function to validate and fix shares_sold integrity
async function handleValidateSharesSold(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    await ctx.answerCbQuery('üîç Running shares_sold validation...');

    const validation = await validateSharesSoldIntegrity();

    let message = `üîç **SHARES SOLD INTEGRITY CHECK**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìä SUMMARY:**
‚Ä¢ **Total Phases:** ${validation.summary?.total_phases || 0}
‚Ä¢ **Total Shares Sold:** ${validation.summary?.total_shares_sold || 0}
‚Ä¢ **Total Shares Available:** ${validation.summary?.total_shares_available || 0}
‚Ä¢ **Total Remaining:** ${validation.summary?.total_remaining || 0}
‚Ä¢ **Issues Found:** ${validation.summary?.issues_found || 0}

**üîç STATUS:** ${validation.valid ? '‚úÖ VALID' : '‚ùå ISSUES DETECTED'}`;

    if (!validation.valid && validation.issues) {
      message += `

**‚ö†Ô∏è ISSUES DETECTED:**`;
      validation.issues.forEach((issue, index) => {
        message += `\n${index + 1}. ${issue}`;
      });

      message += `

**üí° RECOMMENDED ACTIONS:**
‚Ä¢ Run the audit SQL query to calculate correct totals
‚Ä¢ Update shares_sold values manually in database
‚Ä¢ Re-run this validation to confirm fixes`;
    }

    message += `

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîß This validation checks:**
‚Ä¢ shares_sold doesn't exceed total_shares_available
‚Ä¢ No negative remaining shares
‚Ä¢ Data consistency across all phases

**üìù All future share allocations will automatically update shares_sold.**`;

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üîÑ Run Validation Again", callback_data: "admin_validate_shares_sold" }],
          [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error validating shares_sold:', error);
    await ctx.replyWithMarkdown('‚ùå **Error running validation**\n\nPlease check logs and try again.');
  }
}

// Start bot
async function startBot() {
  try {
    console.log("üîç Testing database connection...");
    const isDbConnected = await db.testConnection();

    if (!isDbConnected) {
      console.log("‚ö†Ô∏è Database connection failed, but starting bot anyway...");
    }

    console.log("ü§ñ Starting bot in polling mode...");
    await bot.launch();
    console.log("‚úÖ Aureus Alliance Holdings Bot is running!");
    console.log(`ü§ñ Bot username: @${BOT_USERNAME} (${NODE_ENV.toUpperCase()})`);
  } catch (error) {
    console.error("‚ùå Failed to start bot:", error);
    process.exit(1);
  }
}

// Graceful shutdown
process.once("SIGINT", () => {
  console.log("üõë Stopping bot...");
  bot.stop("SIGINT");
});

process.once("SIGTERM", () => {
  console.log("üõë Stopping bot...");
  bot.stop("SIGTERM");
});

// RESTORED PAYMENT SYSTEM FUNCTIONS

// Maintenance Mode Helper Functions
async function getMaintenanceMode() {
  try {
    const { data, error } = await db.client
      .from('system_settings')
      .select('setting_value')
      .eq('setting_name', 'maintenance_mode')
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error('Error getting maintenance mode:', error);
      return false;
    }

    return data?.setting_value === 'true';
  } catch (error) {
    console.error('Error checking maintenance mode:', error);
    return false;
  }
}

async function setMaintenanceMode(enabled) {
  try {
    const { error } = await db.client
      .from('system_settings')
      .upsert({
        setting_name: 'maintenance_mode',
        setting_value: enabled ? 'true' : 'false',
        description: 'Controls whether share purchasing is disabled for maintenance',
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'setting_name'
      });

    if (error) {
      console.error('Error setting maintenance mode:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error updating maintenance mode:', error);
    return false;
  }
}

// Handle custom amount purchase with network selection
async function handleCustomAmountPurchaseWithNetwork(ctx, selectedNetwork = null) {
  // If no network selected, show payment methods first
  if (!selectedNetwork) {
    return await handleCustomAmountPurchase(ctx);
  }

  // Store selected network and payment method in session for later use
  ctx.session.selectedNetwork = selectedNetwork;
  ctx.session.selectedPaymentMethod = 'usdt';

  // Show amount input for USDT payment
  await showUSDTAmountInput(ctx, selectedNetwork);
}

// Show amount input for USDT payment
async function showUSDTAmountInput(ctx, selectedNetwork) {
  const networkInfo = {
    'ETH': { name: 'Ethereum', icon: 'üî∑', technical: 'ERC-20' },
    'BSC': { name: 'Binance Smart Chain', icon: 'üü°', technical: 'BEP-20' },
    'POL': { name: 'Polygon', icon: 'üü£', technical: 'Polygon' },
    'TRON': { name: 'TRON', icon: 'üî¥', technical: 'TRC-20' }
  };

  const network = networkInfo[selectedNetwork];

  const customAmountMessage = `üíé **USDT PAYMENT**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ ENTER INVESTMENT AMOUNT**

Enter your desired investment amount between $5 and $50,000:

**üìã PAYMENT DETAILS:**
‚Ä¢ Minimum: $5 USD
‚Ä¢ Maximum: $50,000 USD
‚Ä¢ Currency: USDT (Tether)
‚Ä¢ Network: ${network.icon} ${network.name} (${network.technical})
‚Ä¢ No additional fees

**üí° CALCULATION:**
$100 USD = 100 USDT (1:1 ratio)

**‚ö†Ô∏è IMPORTANT:**
Make sure to send USDT on the ${network.name} network only. Wrong network = lost funds.

**Type your investment amount in USD (numbers only):**`;

  await ctx.replyWithMarkdown(customAmountMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîô Back to Networks", callback_data: "payment_usdt" }],
        [{ text: "üîô Back to Payment Methods", callback_data: "menu_purchase_shares" }],
        [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });

  // Set user state to expect amount input
  await setUserState(ctx.from.id, 'awaiting_custom_amount');
}

// This function has been replaced by handlePurchaseSharesStart
// Keeping this stub for any remaining references
async function handleCustomAmountPurchase(ctx) {
  await handlePurchaseSharesStart(ctx);
}

// Handle purchase shares start - main entry point
async function handlePurchaseSharesStart(ctx) {
  const user = ctx.from;

  // Check maintenance mode first (admin bypass)
  const isMaintenanceMode = await getMaintenanceMode();
  if (isMaintenanceMode && user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown(`üîß **SYSTEM MAINTENANCE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**System is currently under maintenance and being upgraded.**

üö´ **Share purchasing is temporarily disabled**
‚úÖ **All other functions remain available**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**You can still access:**
‚Ä¢ üìä Portfolio management
‚Ä¢ üí≥ Payment status
‚Ä¢ üë• Referral program
‚Ä¢ üìã Company information

**Maintenance will be completed soon. Thank you for your patience!**

*Note: Admin users can still access all functions for testing purposes.*`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìä View Portfolio", callback_data: "menu_portfolio" }],
          [{ text: "üí≥ Payment Status", callback_data: "menu_payments" }],
          [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
        ]
      }
    });
    return;
  }

  // Get user from database
  const { data: telegramUser, error: telegramError } = await db.client
    .from('telegram_users')
    .select('user_id')
    .eq('telegram_id', user.id)
    .single();

  if (telegramError || !telegramUser) {
    await ctx.replyWithMarkdown('‚ùå **Authentication Error**\n\nPlease restart the bot and try again.');
    return;
  }

  const userId = telegramUser.user_id;

  console.log(`üîç [DEBUG] handlePurchaseSharesStart - userId: ${userId}, type: ${typeof userId}`);
  console.log(`üîç [DEBUG] handlePurchaseSharesStart - telegramUser:`, telegramUser);

  // Check for incomplete payments (missing proof uploads, not admin-pending payments)
  const { data: incompletePayments, error: pendingError } = await db.client
    .from('crypto_payment_transactions')
    .select('id, amount, network, created_at, status, user_id, sender_wallet')
    .eq('user_id', userId)
    .eq('status', 'pending')
    .order('created_at', { ascending: false });

  if (pendingError) {
    console.error('üîç [DEBUG] Error checking pending payments:', pendingError);
    console.error('üîç [DEBUG] Query details - userId:', userId, 'type:', typeof userId);
    // Continue anyway, don't block the user
  } else if (incompletePayments && incompletePayments.length > 0) {
    console.log(`üîç [DEBUG] Found ${incompletePayments.length} pending payments for user ${userId}`);

    // Only block if payment is incomplete (no proof uploaded yet)
    const incompletePayment = incompletePayments.find(payment =>
      payment.sender_wallet === 'PENDING_PROOF_UPLOAD' ||
      payment.sender_wallet === '' ||
      !payment.sender_wallet
    );

    if (incompletePayment) {
      console.log(`üîç [DEBUG] Found incomplete payment (no proof uploaded):`, incompletePayment.id);

      // User has incomplete payment - show management options
      const paymentDate = new Date(incompletePayment.created_at);
      const now = new Date();
      const daysDiff = Math.floor((now - paymentDate) / (1000 * 60 * 60 * 24));
      const hoursAgo = Math.floor((now - paymentDate) / (1000 * 60 * 60));

      const timeAgo = daysDiff > 0 ? `${daysDiff} day${daysDiff > 1 ? 's' : ''} ago` :
                      hoursAgo > 0 ? `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago` :
                      'Less than 1 hour ago';

      const isOld = daysDiff >= 1;
      const statusIcon = isOld ? 'üî¥' : 'üü°';

      // Format date safely for Telegram Markdown
      const safeDate = paymentDate.toISOString().split('T')[0]; // YYYY-MM-DD format

      // Create safe message without nested markdown
      let pendingMessage = `‚ö†Ô∏è INCOMPLETE PAYMENT DETECTED

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${statusIcon} You have an incomplete payment that needs attention:

üí∞ Amount: $${incompletePayment.amount}
üåê Network: ${incompletePayment.network.toUpperCase()}
üìÖ Submitted: ${safeDate} (${timeAgo})
‚è≥ Status: Awaiting Proof Upload`;

      // Add age warning if payment is old
      if (isOld) {
        pendingMessage += `\n\nüî¥ OLD PAYMENT: This payment is over 24 hours old.`;
      }

      pendingMessage += `

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîß WHAT WOULD YOU LIKE TO DO?

You must complete this payment before making a new purchase.`;

      const keyboard = [
        [{ text: "üí≥ Continue with Payment", callback_data: `continue_payment_${incompletePayment.id}` }],
        [{ text: "üóëÔ∏è Delete Payment", callback_data: `cancel_payment_${incompletePayment.id}` }]
      ];

      if (isOld) {
        keyboard.push([{ text: "üìû Contact Support (Old Payment)", callback_data: "menu_help" }]);
      }

      keyboard.push([{ text: "üìä View Payment Details", callback_data: "view_portfolio" }]);
      keyboard.push([{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]);

      await ctx.reply(pendingMessage, {
        reply_markup: { inline_keyboard: keyboard }
      });
      return;
    } else {
      console.log(`üîç [DEBUG] All pending payments have proof uploaded - allowing new purchase`);
    }
  }

  // No pending payments - proceed with payment method selection
  await showPaymentMethodSelection(ctx, userId);
}

// Show payment method selection
async function showPaymentMethodSelection(ctx, userId) {
  const paymentMethodMessage = `üõí **SELECT PAYMENT METHOD**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí≥ CHOOSE YOUR PREFERRED PAYMENT METHOD:**

Select how you would like to pay for your shares:

**üíé CRYPTOCURRENCY:**
‚Ä¢ Tether (USDT) - Available on multiple networks
‚Ä¢ Supports ETH, BSC, Polygon, and TRON networks
‚Ä¢ Fast processing and low fees

**üè¶ BANK TRANSFER:**
‚Ä¢ Available for South Africa, Eswatini & Namibia
‚Ä¢ Pay in South African Rand (ZAR)
‚Ä¢ 10% transaction fee applies
‚Ä¢ Secure FNB bank account

**üí° RECOMMENDATION:**
USDT offers the fastest processing and lowest fees for most users.`;

  const keyboard = await createPaymentMethodKeyboard(userId);

  await ctx.replyWithMarkdown(paymentMethodMessage, {
    reply_markup: keyboard
  });
}

// Text input handler for custom amounts
bot.on('text', async (ctx) => {
  const user = ctx.from;
  const text = ctx.message.text;

  console.log(`üìù [TEXT HANDLER] Received text: "${text}" from user ${user.username} (ID: ${user.id})`);

  // Skip if it's a command
  if (text.startsWith('/')) {
    console.log(`‚è≠Ô∏è [TEXT HANDLER] Skipping command: ${text}`);
    return;
  }

  // Get user state
  const userState = await getUserState(user.id);
  console.log(`üîç [TEXT HANDLER] User state for ${user.id}:`, userState);

  if (userState && userState.state === 'awaiting_custom_amount') {
    console.log(`üí∞ [TEXT HANDLER] Processing custom amount input`);
    await handleCustomAmountInput(ctx, text);
  } else if (userState && userState.state === 'upload_proof_wallet') {
    console.log(`üí≥ [TEXT HANDLER] Processing wallet address input`);
    await handleWalletAddressInput(ctx, text, userState.data);
  } else if (userState && userState.state === 'upload_proof_hash') {
    console.log(`üîó [TEXT HANDLER] Processing transaction hash input`);
    await handleTransactionHashInput(ctx, text, userState.data);
  } else if (userState && userState.state === 'awaiting_sponsor_username') {
    console.log(`üë• [TEXT HANDLER] Processing sponsor username input`);
    await handleSponsorUsernameInput(ctx, text);
  } else if (userState && userState.state === 'awaiting_withdrawal_amount') {
    console.log(`üí∏ [TEXT HANDLER] Processing withdrawal amount input`);
    await handleWithdrawalAmountInput(ctx, text, userState.data);
  } else if (userState && userState.state === 'awaiting_withdrawal_wallet') {
    console.log(`üí≥ [TEXT HANDLER] Processing withdrawal wallet address input`);
    await handleWithdrawalWalletInput(ctx, text, userState.data);
  } else if (userState && userState.state === 'awaiting_commission_shares') {
    console.log(`üõí [TEXT HANDLER] Processing commission shares input`);
    await handleCommissionSharesInput(ctx, text, userState.data);
  } else if (userState && userState.state === 'awaiting_withdrawal_hash') {
    console.log(`üîê [TEXT HANDLER] Processing withdrawal transaction hash input`);
    await handleWithdrawalHashInput(ctx, text, userState.data);
  } else if (ctx.session && ctx.session.pendingRejection) {
    console.log(`‚ùå [TEXT HANDLER] Processing payment rejection reason`);
    await handleRejectionReasonInput(ctx, text);
  } else if (ctx.session && ctx.session.pendingWithdrawalRejection) {
    console.log(`üí∏ [TEXT HANDLER] Processing withdrawal rejection reason`);
    await handleWithdrawalRejectionReasonInput(ctx, text);
  } else if (ctx.session && ctx.session.kyc && ctx.session.kyc.step) {
    console.log(`üìã [TEXT HANDLER] Processing KYC input for step: ${ctx.session.kyc.step}`);
    await handleKYCTextInput(ctx, text);
  } else if (ctx.session && ctx.session.awaitingCustomCountry) {
    console.log(`üåç [TEXT HANDLER] Processing custom country input`);
    await handleCustomCountryInput(ctx, text);
  } else {
    console.log(`‚ùì [TEXT HANDLER] No matching state handler for: ${userState?.state || 'null'}`);
  }
});

// Handle payment rejection reason input
async function handleRejectionReasonInput(ctx, rejectionReason) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.reply('‚ùå Access denied');
    return;
  }

  try {
    const paymentId = ctx.session.pendingRejection;

    if (!paymentId) {
      await ctx.reply('‚ùå No pending rejection found. Please try again.');
      return;
    }

    // Clear the session data
    delete ctx.session.pendingRejection;

    // Validate rejection reason
    if (!rejectionReason || rejectionReason.trim().length < 5) {
      await ctx.reply('‚ùå Rejection reason must be at least 5 characters long. Please try again.');
      return;
    }

    // Process the rejection with the custom reason
    await handleRejectPayment(ctx, paymentId, rejectionReason.trim());

  } catch (error) {
    console.error('Error processing rejection reason:', error);
    await ctx.reply('‚ùå Error processing rejection. Please try again.');
  }
}

// Handle commission shares input
async function handleCommissionSharesInput(ctx, text, conversionData) {
  const user = ctx.from;

  try {
    // Clear user state first
    await clearUserState(user.id);

    // Validate input
    const sharesRequested = parseInt(text.trim());

    if (isNaN(sharesRequested) || sharesRequested <= 0) {
      await ctx.reply('‚ùå Please enter a valid number of shares (greater than 0).');
      return;
    }

    if (sharesRequested > conversionData.max_shares) {
      await ctx.reply(`‚ùå You can only purchase up to ${conversionData.max_shares} shares with your current commission balance.`);
      return;
    }

    const totalCost = sharesRequested * conversionData.share_price;

    if (totalCost > conversionData.available_usdt) {
      // Get detailed balance information for better error message
      const balanceInfo = await getAvailableCommissionBalance(telegramUser.user_id);

      await ctx.replyWithMarkdown(`‚ùå **INSUFFICIENT COMMISSION BALANCE FOR CONVERSION**

**üõí Conversion Request:**
‚Ä¢ **Shares Requested:** ${sharesRequested} shares
‚Ä¢ **Share Price:** $${conversionData.share_price.toFixed(2)} per share
‚Ä¢ **Total Cost:** $${totalCost.toFixed(2)} USDT

**üí∞ Your Balance Details:**
‚Ä¢ **Total Balance:** $${balanceInfo.totalBalance.toFixed(2)} USDT
‚Ä¢ **Currently Escrowed:** $${balanceInfo.escrowedAmount.toFixed(2)} USDT
‚Ä¢ **Available for Conversion:** $${balanceInfo.availableBalance.toFixed(2)} USDT

${balanceInfo.escrowedAmount > 0 ?
`**‚ö†Ô∏è FUNDS LOCKED:** You have $${balanceInfo.escrowedAmount.toFixed(2)} USDT locked in pending requests.

**üí° WHAT YOU CAN DO:**
‚Ä¢ **Wait:** Pending requests will be processed within 24-48 hours
‚Ä¢ **Convert Less:** Maximum ${Math.floor(balanceInfo.availableBalance / conversionData.share_price)} shares available
‚Ä¢ **Check Status:** View your pending requests for details` :
`**üí° WHAT YOU CAN DO:**
‚Ä¢ **Convert Less:** Maximum ${Math.floor(balanceInfo.availableBalance / conversionData.share_price)} shares available
‚Ä¢ **Earn More:** Refer more users to increase your commission balance`}

**üìû Need Help?** Contact @TTTFOUNDER for assistance.`);
      return;
    }

    // Show confirmation
    const confirmationMessage = `‚úÖ **COMMISSION TO SHARES CONVERSION**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**CONVERSION DETAILS:**
‚Ä¢ **Shares to Purchase:** ${sharesRequested} shares
‚Ä¢ **Share Price:** $${conversionData.share_price.toFixed(2)} per share
‚Ä¢ **Total Cost:** $${totalCost.toFixed(2)} USDT
‚Ä¢ **Phase:** ${conversionData.phase_number}

**YOUR COMMISSION:**
‚Ä¢ **Available:** $${conversionData.available_usdt.toFixed(2)} USDT
‚Ä¢ **After Conversion:** $${(conversionData.available_usdt - totalCost).toFixed(2)} USDT

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ This request will be sent to admin for approval
‚Ä¢ Your commission will be deducted only after approval
‚Ä¢ Shares will be added to your portfolio once approved

**Confirm this conversion?**`;

    await ctx.replyWithMarkdown(confirmationMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ Confirm Conversion", callback_data: `confirm_commission_conversion_${sharesRequested}_${totalCost.toFixed(2)}_${conversionData.phase_id}` }],
          [{ text: "‚ùå Cancel", callback_data: "view_commission" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error processing commission shares input:', error);
    await ctx.reply('‚ùå Error processing your request. Please try again.');
  }
}

// Handle commission conversion confirmation
async function handleConfirmCommissionConversion(ctx, callbackData) {
  const user = ctx.from;

  try {
    // Parse callback data: confirm_commission_conversion_SHARES_COST_PHASEID
    const parts = callbackData.replace('confirm_commission_conversion_', '').split('_');
    const sharesRequested = parseInt(parts[0]);
    const totalCost = parseFloat(parts[1]);
    const phaseId = parts[2];

    // Get user ID
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.answerCbQuery('‚ùå User not found');
      return;
    }

    // Get current phase info
    const { data: phase, error: phaseError } = await db.client
      .from('investment_phases')
      .select('*')
      .eq('id', phaseId)
      .single();

    if (phaseError || !phase) {
      await ctx.answerCbQuery('‚ùå Phase information not found');
      return;
    }

    // üîí SECURE ESCROW: Check available balance and create escrow atomically
    console.log(`üîí [ESCROW] Creating commission conversion escrow for user ${telegramUser.user_id}, amount: $${totalCost}`);

    const escrowResult = await createCommissionEscrow(telegramUser.user_id, totalCost, 'conversion');

    if (!escrowResult.success) {
      console.error(`‚ùå [ESCROW] Failed to create conversion escrow:`, escrowResult.error);

      if (escrowResult.error.includes('Insufficient available balance')) {
        // Get current balance info for detailed error message
        const balanceInfo = await getAvailableCommissionBalance(telegramUser.user_id);
        await ctx.replyWithMarkdown(`‚ùå **INSUFFICIENT AVAILABLE COMMISSION BALANCE**

**üí∞ Balance Details:**
‚Ä¢ **Total Balance:** $${balanceInfo.totalBalance.toFixed(2)} USDT
‚Ä¢ **Currently Escrowed:** $${balanceInfo.escrowedAmount.toFixed(2)} USDT
‚Ä¢ **Available Balance:** $${balanceInfo.availableBalance.toFixed(2)} USDT
‚Ä¢ **Required for Request:** $${totalCost.toFixed(2)} USDT

**‚ö†Ô∏è You have pending commission requests that have locked some of your balance.**

**üí° Options:**
‚Ä¢ Wait for pending requests to be processed
‚Ä¢ Cancel existing pending requests
‚Ä¢ Request a smaller amount

Your commission balance is secure and will be available once pending requests are resolved.`);
      } else {
        await ctx.replyWithMarkdown('‚ùå **Error processing commission request**\n\nPlease try again or contact support.');
      }
      return;
    }

    // Create commission conversion request (escrow already secured)
    const { data: conversion, error: insertError } = await db.client
      .from('commission_conversions')
      .insert({
        user_id: telegramUser.user_id,
        shares_requested: sharesRequested,
        usdt_amount: totalCost,
        share_price: phase.price_per_share,
        phase_id: phaseId,
        phase_number: phase.phase_number,
        status: 'pending'
      })
      .select('id')
      .single();

    if (insertError) {
      console.error('Error creating commission conversion:', insertError);

      // üîí ROLLBACK: Release escrow if conversion creation failed
      console.log(`üîí [ESCROW] Rolling back escrow due to conversion creation failure`);
      await releaseCommissionEscrow(telegramUser.user_id, totalCost);

      await ctx.answerCbQuery('‚ùå Error creating conversion request');
      return;
    }

    // Notify user
    await ctx.replyWithMarkdown(`‚úÖ **CONVERSION REQUEST SUBMITTED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Request ID:** #${conversion.id.substring(0, 8)}
**Shares:** ${sharesRequested} shares
**Cost:** $${totalCost.toFixed(2)} USDT
**Phase:** ${phase.phase_number}

**Status:** Pending admin approval

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Your conversion request has been submitted to the admin for approval. You will be notified once it's processed.

**Your commission balance will be deducted only after approval.**`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìä View Commission Dashboard", callback_data: "view_commission" }],
          [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

    // Notify admin using new audio notification system (skip if admin is testing their own conversion)
    try {
      if (user.username !== 'TTTFOUNDER') {
        await sendAdminNotification('commission_conversion', {
          username: user.username || user.first_name || 'Unknown',
          amount: totalCost.toFixed(2),
          shares: sharesRequested,
          user_id: telegramUser.user_id,
          conversion_id: conversion.id.substring(0, 8),
          available_commission: availableUSDT.toFixed(2),
          phase: phase.phase_number
        }, 'medium'); // Medium priority for commission conversions
      } else {
        console.log('üìù Admin testing conversion - skipping self-notification');
      }
    } catch (adminNotifyError) {
      console.error('Error notifying admin:', adminNotifyError);
    }

  } catch (error) {
    console.error('Error confirming commission conversion:', error);
    await ctx.answerCbQuery('‚ùå Error processing conversion');
  }
}

// Handle admin approval of commission conversion
async function handleApproveCommissionConversion(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    const conversionId = callbackData.replace('approve_commission_conversion_', '');

    // Get conversion details
    const { data: conversion, error: conversionError } = await db.client
      .from('commission_conversions')
      .select(`
        *,
        users!inner(id, full_name, username),
        investment_phases!inner(phase_number, price_per_share)
      `)
      .eq('id', conversionId)
      .eq('status', 'pending')
      .single();

    if (conversionError || !conversion) {
      await ctx.answerCbQuery('‚ùå Conversion request not found or already processed');
      return;
    }

    // Verify user still has sufficient commission balance
    const { data: commissionBalance, error: balanceError } = await db.client
      .from('commission_balances')
      .select('usdt_balance')
      .eq('user_id', conversion.user_id)
      .single();

    const availableUSDT = commissionBalance ? parseFloat(commissionBalance.usdt_balance || 0) : 0;

    if (availableUSDT < conversion.usdt_amount) {
      await ctx.replyWithMarkdown(`‚ùå **INSUFFICIENT USER COMMISSION BALANCE**

**User:** ${conversion.users.full_name || conversion.users.username}
**Required:** $${conversion.usdt_amount.toFixed(2)} USDT
**Available:** $${availableUSDT.toFixed(2)} USDT

Cannot approve this conversion due to insufficient balance.`);
      return;
    }

    // Start transaction
    const { error: transactionError } = await db.client.rpc('process_commission_conversion', {
      p_conversion_id: conversionId,
      p_admin_id: user.id,
      p_admin_username: user.username
    });

    if (transactionError) {
      console.error('Commission conversion transaction error:', transactionError);
      await ctx.answerCbQuery('‚ùå Error processing conversion');
      return;
    }

    // Success notification to admin
    await ctx.replyWithMarkdown(`‚úÖ **COMMISSION CONVERSION APPROVED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Request ID:** #${conversionId.substring(0, 8)}
**User:** ${conversion.users.full_name || conversion.users.username}
**Shares Added:** ${conversion.shares_requested} shares
**USDT Deducted:** $${conversion.usdt_amount.toFixed(2)}
**Phase:** ${conversion.phase_number}

**‚úÖ Transaction completed successfully**
‚Ä¢ User's commission balance updated
‚Ä¢ Shares added to user's portfolio
‚Ä¢ Commission history recorded

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üë• View All Requests", callback_data: "admin_commission_conversions" }],
          [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
        ]
      }
    });

    // Notify user of approval
    try {
      const { data: telegramUser } = await db.client
        .from('telegram_users')
        .select('telegram_id')
        .eq('user_id', conversion.user_id)
        .single();

      if (telegramUser) {
        const userNotification = `‚úÖ **COMMISSION CONVERSION APPROVED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Request ID:** #${conversionId.substring(0, 8)}
**Shares Purchased:** ${conversion.shares_requested} shares
**USDT Used:** $${conversion.usdt_amount.toFixed(2)}
**Share Price:** $${conversion.share_price.toFixed(2)}
**Phase:** ${conversion.phase_number}

**‚úÖ Your conversion has been completed!**

Your commission balance has been updated and the shares have been added to your portfolio.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        await sendAudioNotificationToUser(
          telegramUser.telegram_id,
          userNotification,
          'APPROVAL',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üìä View Portfolio", callback_data: "menu_portfolio" }],
                [{ text: "üí∞ View Commission", callback_data: "view_commission" }]
              ]
            }
          },
          true // Enable audio notification for commission conversion approvals
        );
      }
    } catch (notifyError) {
      console.error('Error notifying user of approval:', notifyError);
    }

  } catch (error) {
    console.error('Error approving commission conversion:', error);
    await ctx.answerCbQuery('‚ùå Error processing approval');
  }
}

// Handle admin rejection of commission conversion
async function handleRejectCommissionConversion(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    const conversionId = callbackData.replace('reject_commission_conversion_', '');

    // Get conversion details
    const { data: conversion, error: conversionError } = await db.client
      .from('commission_conversions')
      .select(`
        *,
        users!inner(id, full_name, username)
      `)
      .eq('id', conversionId)
      .eq('status', 'pending')
      .single();

    if (conversionError || !conversion) {
      await ctx.answerCbQuery('‚ùå Conversion request not found or already processed');
      return;
    }

    // Update conversion status to rejected
    const { error: updateError } = await db.client
      .from('commission_conversions')
      .update({
        status: 'rejected',
        rejected_by_admin_id: user.id,
        rejected_at: new Date().toISOString(),
        rejection_reason: 'Rejected by admin',
        updated_at: new Date().toISOString()
      })
      .eq('id', conversionId);

    if (updateError) {
      console.error('Error rejecting commission conversion:', updateError);
      await ctx.answerCbQuery('‚ùå Error rejecting conversion');
      return;
    }

    // üîí SECURE ESCROW: Release escrow when conversion is rejected
    console.log(`üîí [ESCROW] Releasing escrow for rejected conversion: $${conversion.usdt_amount}`);
    const escrowReleaseResult = await releaseCommissionEscrow(conversion.user_id, conversion.usdt_amount);

    if (!escrowReleaseResult.success) {
      console.error(`‚ùå [ESCROW] Failed to release escrow for rejected conversion:`, escrowReleaseResult.error);
      // Continue with the rejection process even if escrow release fails
      // This will be logged for manual review
    }

    // Log admin action
    await logAdminAction(
      user.id,
      user.username,
      'commission_conversion_rejected',
      'commission_conversion',
      conversionId,
      {
        user: conversion.users.username,
        shares: conversion.shares_requested,
        amount: conversion.usdt_amount
      }
    );

    // Success notification to admin
    await ctx.replyWithMarkdown(`‚ùå **COMMISSION CONVERSION REJECTED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Request ID:** #${conversionId.substring(0, 8)}
**User:** ${conversion.users.full_name || conversion.users.username}
**Shares:** ${conversion.shares_requested} shares
**Amount:** $${conversion.usdt_amount.toFixed(2)} USDT

**‚úÖ Conversion request has been rejected**

The user will be notified of the rejection.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üë• View All Requests", callback_data: "admin_commission_conversions" }],
          [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
        ]
      }
    });

    // Notify user of rejection
    try {
      const { data: telegramUser } = await db.client
        .from('telegram_users')
        .select('telegram_id')
        .eq('user_id', conversion.user_id)
        .single();

      if (telegramUser) {
        const userNotification = `‚ùå **COMMISSION CONVERSION REJECTED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Request ID:** #${conversionId.substring(0, 8)}
**Shares Requested:** ${conversion.shares_requested} shares
**Amount:** $${conversion.usdt_amount.toFixed(2)} USDT

**Status:** Rejected by Admin

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Your commission conversion request has been rejected. Your commission balance remains unchanged.

**You can:**
‚Ä¢ Try submitting a new conversion request
‚Ä¢ Contact support for more information
‚Ä¢ Use your commission for other purposes

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        await bot.telegram.sendMessage(telegramUser.telegram_id, userNotification, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: "üõí Try Again", callback_data: "commission_to_shares" }],
              [{ text: "üí∞ View Commission", callback_data: "view_commission" }],
              [{ text: "üìû Contact Support", url: "https://t.me/TTTFOUNDER" }]
            ]
          }
        });
      }
    } catch (notifyError) {
      console.error('Error notifying user of rejection:', notifyError);
    }

  } catch (error) {
    console.error('Error rejecting commission conversion:', error);
    await ctx.answerCbQuery('‚ùå Error processing rejection');
  }
}

// Handle admin commission conversions view
async function handleAdminCommissionConversions(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    // Get pending commission conversions
    const { data: conversions, error: conversionsError } = await db.client
      .from('commission_conversions')
      .select(`
        *,
        users!inner(full_name, username)
      `)
      .eq('status', 'pending')
      .order('created_at', { ascending: false })
      .limit(10);

    if (conversionsError) {
      console.error('Error fetching commission conversions:', conversionsError);
      await ctx.reply('‚ùå Error loading commission conversions');
      return;
    }

    if (!conversions || conversions.length === 0) {
      await ctx.replyWithMarkdown(`üîÑ **COMMISSION CONVERSIONS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**No pending commission conversion requests**

All conversion requests have been processed.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
          ]
        }
      });
      return;
    }

    let message = `üîÑ **COMMISSION CONVERSIONS**\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n**${conversions.length} Pending Request${conversions.length > 1 ? 's' : ''}:**\n\n`;

    const keyboard = [];

    conversions.forEach((conversion, index) => {
      const shortId = conversion.id.substring(0, 8);
      const userName = conversion.users.full_name || conversion.users.username;
      const createdDate = new Date(conversion.created_at).toLocaleDateString();

      message += `**${index + 1}. Request #${shortId}**\n`;
      message += `‚Ä¢ **User:** ${userName}\n`;
      message += `‚Ä¢ **Shares:** ${conversion.shares_requested} shares\n`;
      message += `‚Ä¢ **Amount:** $${conversion.usdt_amount} USDT\n`;
      message += `‚Ä¢ **Phase:** ${conversion.phase_number}\n`;
      message += `‚Ä¢ **Date:** ${createdDate}\n\n`;

      // Add approve/reject buttons for each conversion (using short ID to avoid 64-byte limit)
      keyboard.push([
        { text: `‚úÖ Approve #${shortId}`, callback_data: `approve_conv_${shortId}` },
        { text: `‚ùå Reject #${shortId}`, callback_data: `reject_conv_${shortId}` }
      ]);
    });

    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n**Select an action for each request above.**`;

    keyboard.push([{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]);

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

  } catch (error) {
    console.error('Error handling admin commission conversions:', error);
    await ctx.reply('‚ùå Error loading commission conversions');
  }
}

// Handle admin approval of commission conversion (short callback)
async function handleApproveCommissionConversionShort(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    const shortId = callbackData.replace('approve_conv_', '');
    console.log(`üîç Looking for commission conversion with short ID: ${shortId}`);

    // Find the conversion by short ID - robust approach
    const { data: allPending, error: conversionError } = await db.client
      .from('commission_conversions')
      .select('*')
      .eq('status', 'pending');

    if (conversionError) {
      console.error('Error fetching pending conversions:', conversionError);
      await ctx.answerCbQuery('‚ùå Error loading conversion data');
      return;
    }

    const conversion = allPending?.find(c => c.id.startsWith(shortId));

    if (!conversion) {
      console.error('Conversion not found:', { shortId, availableIds: allPending?.map(c => c.id.substring(0, 8)) });
      await ctx.answerCbQuery('‚ùå Conversion request not found');
      return;
    }

    // Call the original approval handler with the full ID
    await handleApproveCommissionConversion(ctx, `approve_commission_conversion_${conversion.id}`);

  } catch (error) {
    console.error('Error handling short approval:', error);
    await ctx.answerCbQuery('‚ùå Error processing approval');
  }
}

// Handle admin rejection of commission conversion (short callback)
async function handleRejectCommissionConversionShort(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    const shortId = callbackData.replace('reject_conv_', '');
    console.log(`üîç Looking for commission conversion to reject with short ID: ${shortId}`);

    // Find the conversion by short ID - robust approach
    const { data: allPending, error: conversionError } = await db.client
      .from('commission_conversions')
      .select('*')
      .eq('status', 'pending');

    if (conversionError) {
      console.error('Error fetching pending conversions:', conversionError);
      await ctx.answerCbQuery('‚ùå Error loading conversion data');
      return;
    }

    const conversion = allPending?.find(c => c.id.startsWith(shortId));

    if (!conversion) {
      console.error('Conversion not found:', { shortId, availableIds: allPending?.map(c => c.id.substring(0, 8)) });
      await ctx.answerCbQuery('‚ùå Conversion request not found');
      return;
    }

    // Call the original rejection handler with the full ID
    await handleRejectCommissionConversion(ctx, `reject_commission_conversion_${conversion.id}`);

  } catch (error) {
    console.error('Error handling short rejection:', error);
    await ctx.answerCbQuery('‚ùå Error processing rejection');
  }
}

// Handle admin pending withdrawals view
async function handleAdminPendingWithdrawals(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    // Get pending withdrawal requests with user info
    const { data: withdrawals, error: withdrawalsError } = await db.client
      .from('commission_withdrawals')
      .select(`
        *,
        users!commission_withdrawals_user_id_fkey!inner(full_name, username)
      `)
      .eq('status', 'pending')
      .order('created_at', { ascending: false })
      .limit(10);

    if (withdrawalsError) {
      console.error('Error fetching pending withdrawals:', withdrawalsError);
      await ctx.reply('‚ùå Error loading pending withdrawals');
      return;
    }

    if (!withdrawals || withdrawals.length === 0) {
      await ctx.replyWithMarkdown(`‚è≥ **PENDING WITHDRAWALS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**No pending withdrawal requests**

All withdrawal requests have been processed.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîô Back to Commission Requests", callback_data: "admin_commissions" }]
          ]
        }
      });
      return;
    }

    let message = `‚è≥ **PENDING WITHDRAWALS**\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n**${withdrawals.length} Pending Request${withdrawals.length > 1 ? 's' : ''}:**\n\n`;

    const keyboard = [];

    for (let i = 0; i < withdrawals.length; i++) {
      const withdrawal = withdrawals[i];
      const shortId = withdrawal.id.substring(0, 8);
      const userName = withdrawal.users.full_name || withdrawal.users.username;
      const createdDate = new Date(withdrawal.created_at).toLocaleDateString();
      const walletShort = withdrawal.wallet_address ?
        `${withdrawal.wallet_address.substring(0, 6)}...${withdrawal.wallet_address.substring(-4)}` :
        'N/A';

      message += `**${i + 1}. Request #${shortId}**\n`;
      message += `‚Ä¢ **User:** ${userName}\n`;
      message += `‚Ä¢ **Amount:** $${withdrawal.amount} USDT\n`;
      message += `‚Ä¢ **Wallet:** ${walletShort}\n`;
      message += `‚Ä¢ **Date:** ${createdDate}\n`;
      message += `‚Ä¢ **Type:** ${withdrawal.withdrawal_type.toUpperCase()}\n\n`;

      // Add approve/reject buttons for each withdrawal (using short ID to avoid 64-byte limit)
      keyboard.push([
        { text: `‚úÖ Approve #${shortId}`, callback_data: `approve_withdrawal_${shortId}` },
        { text: `‚ùå Reject #${shortId}`, callback_data: `reject_withdrawal_${shortId}` }
      ]);
    }

    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n**Select an action for each request above.**`;

    keyboard.push([{ text: "üîô Back to Commission Requests", callback_data: "admin_commissions" }]);

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

  } catch (error) {
    console.error('Error handling admin pending withdrawals:', error);
    await ctx.reply('‚ùå Error loading pending withdrawals');
  }
}

// Handle admin approval of withdrawal (short callback)
async function handleApproveWithdrawalShort(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    const shortId = callbackData.replace('approve_withdrawal_', '');
    console.log(`üîç Looking for withdrawal with short ID: ${shortId}`);

    // Find the withdrawal by short ID - try different approaches
    let withdrawal = null;
    let withdrawalError = null;

    // First try: exact match with LIKE
    const { data: withdrawalData1, error: error1 } = await db.client
      .from('commission_withdrawals')
      .select(`
        *,
        users!commission_withdrawals_user_id_fkey!inner(full_name, username)
      `)
      .filter('id', 'like', `${shortId}%`)
      .eq('status', 'pending');

    if (error1) {
      console.error('Error with LIKE query:', error1);
      // Try second approach: get all pending and filter in code
      const { data: allPending, error: error2 } = await db.client
        .from('commission_withdrawals')
        .select(`
          *,
          users!commission_withdrawals_user_id_fkey!inner(full_name, username)
        `)
        .eq('status', 'pending');

      if (error2) {
        withdrawalError = error2;
      } else if (allPending && allPending.length > 0) {
        withdrawal = allPending.find(w => w.id.startsWith(shortId));
      }
    } else if (withdrawalData1 && withdrawalData1.length > 0) {
      withdrawal = withdrawalData1[0];
    }

    console.log(`üîç Found withdrawal:`, withdrawal ? `ID: ${withdrawal.id}` : 'Not found');

    if (withdrawalError || !withdrawal) {
      console.error('Withdrawal lookup failed:', { shortId, withdrawalError });
      await ctx.answerCbQuery('‚ùå Withdrawal request not found or already processed');
      return;
    }

    // Verify user still has sufficient commission balance
    const { data: commissionBalance, error: balanceError } = await db.client
      .from('commission_balances')
      .select('usdt_balance')
      .eq('user_id', withdrawal.user_id)
      .single();

    const availableUSDT = commissionBalance ? parseFloat(commissionBalance.usdt_balance || 0) : 0;

    if (availableUSDT < withdrawal.amount) {
      await ctx.replyWithMarkdown(`‚ùå **INSUFFICIENT USER COMMISSION BALANCE**

**User:** ${withdrawal.users.full_name || withdrawal.users.username}
**Withdrawal Amount:** $${withdrawal.amount.toFixed(2)} USDT
**Available Balance:** $${availableUSDT.toFixed(2)} USDT

Cannot approve this withdrawal due to insufficient balance.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîô Back to Pending Withdrawals", callback_data: "admin_pending_withdrawals" }]
          ]
        }
      });
      return;
    }

    // Ask admin for transaction hash before final approval
    await ctx.replyWithMarkdown(`üîê **WITHDRAWAL APPROVAL - TRANSACTION HASH REQUIRED**

**User:** ${withdrawal.users.full_name || withdrawal.users.username}
**Amount:** $${withdrawal.amount.toFixed(2)} USDT
**Wallet:** \`${withdrawal.wallet_address}\`
**Available Balance:** $${availableUSDT.toFixed(2)} USDT

‚ö†Ô∏è **Please provide the transaction hash for this withdrawal payment:**

*This hash will be sent to the user as proof of payment.*`, {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: "Enter transaction hash (e.g., 0x1234...)"
      }
    });

    // Set user state to await transaction hash
    await setUserState(user.id, 'awaiting_withdrawal_hash', {
      withdrawal_id: withdrawal.id,
      short_id: shortId,
      user_name: withdrawal.users.full_name || withdrawal.users.username,
      amount: withdrawal.amount,
      wallet_address: withdrawal.wallet_address,
      available_balance: availableUSDT
    });

    await ctx.answerCbQuery('üí≥ Please provide transaction hash');
    return;



  } catch (error) {
    console.error('Error approving withdrawal:', error);
    await ctx.answerCbQuery('‚ùå Error processing approval');
  }
}

// Handle withdrawal rejection prompt
async function handleRejectWithdrawalPrompt(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    const shortId = callbackData.replace('reject_withdrawal_', '');
    console.log(`üîç Looking for withdrawal to reject with short ID: ${shortId}`);

    // Find the withdrawal by short ID - robust approach
    const { data: allPending, error: withdrawalError } = await db.client
      .from('commission_withdrawals')
      .select(`
        *,
        users!commission_withdrawals_user_id_fkey!inner(full_name, username)
      `)
      .eq('status', 'pending');

    if (withdrawalError) {
      console.error('Error fetching pending withdrawals:', withdrawalError);
      await ctx.answerCbQuery('‚ùå Error loading withdrawal data');
      return;
    }

    const withdrawal = allPending?.find(w => w.id.startsWith(shortId));

    if (!withdrawal) {
      console.error('Withdrawal not found:', { shortId, availableIds: allPending?.map(w => w.id.substring(0, 8)) });
      await ctx.answerCbQuery('‚ùå Withdrawal request not found');
      return;
    }

    const promptMessage = `‚ùå **REJECT WITHDRAWAL CONFIRMATION**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Withdrawal Details:**
‚Ä¢ **ID:** #${withdrawal.id.substring(0, 8)}
‚Ä¢ **User:** ${withdrawal.users.full_name || withdrawal.users.username}
‚Ä¢ **Amount:** $${withdrawal.amount} USDT
‚Ä¢ **Wallet:** ${withdrawal.wallet_address}
‚Ä¢ **Type:** ${withdrawal.withdrawal_type.toUpperCase()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Please enter the reason for rejecting this withdrawal:**

*This message will be sent to the user along with the rejection notification.*`;

    await ctx.replyWithMarkdown(promptMessage, {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: "Enter rejection reason..."
      }
    });

    // Store the withdrawal ID in session for the next message
    ctx.session = ctx.session || {};
    ctx.session.pendingWithdrawalRejection = withdrawal.id;

  } catch (error) {
    console.error('Error showing withdrawal rejection prompt:', error);
    await ctx.answerCbQuery('‚ùå Error processing rejection');
  }
}

// Handle withdrawal rejection reason input
async function handleWithdrawalRejectionReasonInput(ctx, rejectionReason) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.reply('‚ùå Access denied');
    return;
  }

  try {
    const withdrawalId = ctx.session.pendingWithdrawalRejection;

    if (!withdrawalId) {
      await ctx.reply('‚ùå No pending withdrawal rejection found. Please try again.');
      return;
    }

    // Clear the session data
    delete ctx.session.pendingWithdrawalRejection;

    // Validate rejection reason
    if (!rejectionReason || rejectionReason.trim().length < 5) {
      await ctx.reply('‚ùå Rejection reason must be at least 5 characters long. Please try again.');
      return;
    }

    // Get withdrawal details
    const { data: withdrawal, error: withdrawalError } = await db.client
      .from('commission_withdrawals')
      .select(`
        *,
        users!commission_withdrawals_user_id_fkey!inner(full_name, username)
      `)
      .eq('id', withdrawalId)
      .eq('status', 'pending')
      .single();

    if (withdrawalError || !withdrawal) {
      await ctx.reply('‚ùå Withdrawal request not found or already processed.');
      return;
    }

    // Update withdrawal status to rejected
    const { error: updateError } = await db.client
      .from('commission_withdrawals')
      .update({
        status: 'rejected',
        rejected_by_admin_id: user.id,
        rejected_at: new Date().toISOString(),
        admin_notes: rejectionReason.trim(),
        updated_at: new Date().toISOString()
      })
      .eq('id', withdrawalId);

    if (updateError) {
      console.error('Error rejecting withdrawal:', updateError);
      await ctx.reply('‚ùå Error rejecting withdrawal. Please try again.');
      return;
    }

    // üîí SECURE ESCROW: Release escrow when withdrawal is rejected
    console.log(`üîí [ESCROW] Releasing escrow for rejected withdrawal: $${withdrawal.amount}`);
    const escrowReleaseResult = await releaseCommissionEscrow(withdrawal.user_id, withdrawal.amount);

    if (!escrowReleaseResult.success) {
      console.error(`‚ùå [ESCROW] Failed to release escrow for rejected withdrawal:`, escrowReleaseResult.error);
      // Continue with the rejection process even if escrow release fails
      // This will be logged for manual review
    }

    // Log admin action
    await logAdminAction(
      user.id,
      user.username,
      'withdrawal_rejected',
      'withdrawal',
      withdrawalId,
      {
        user: withdrawal.users.username,
        amount: withdrawal.amount,
        rejection_reason: rejectionReason.trim()
      }
    );

    // Get updated balance information for detailed confirmation
    const { data: updatedBalance, error: balanceCheckError } = await db.client
      .from('commission_balances')
      .select('usdt_balance, escrowed_amount, total_withdrawn')
      .eq('user_id', withdrawal.user_id)
      .single();

    const currentBalance = updatedBalance ? parseFloat(updatedBalance.usdt_balance || 0) : 0;
    const finalEscrowBalance = updatedBalance ? parseFloat(updatedBalance.escrowed_amount || 0) : 0;
    const totalWithdrawn = updatedBalance ? parseFloat(updatedBalance.total_withdrawn || 0) : 0;

    // Enhanced rejection notification to admin
    await ctx.replyWithMarkdown(`‚ùå **WITHDRAWAL REJECTED & PROCESSED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã REQUEST DETAILS:**
‚Ä¢ **Request ID:** #${withdrawalId.substring(0, 8)}
‚Ä¢ **User:** ${withdrawal.users.full_name || withdrawal.users.username}
‚Ä¢ **Amount:** $${withdrawal.amount.toFixed(2)} USDT
‚Ä¢ **Wallet:** ${withdrawal.wallet_address}
‚Ä¢ **Type:** ${withdrawal.withdrawal_type.toUpperCase()}

**üìù REJECTION REASON:**
${rejectionReason.trim()}

**üí∞ BALANCE STATUS:**
‚Ä¢ **Current Balance:** $${currentBalance.toFixed(2)} USDT (unchanged)
‚Ä¢ **Escrowed Amount:** $${finalEscrowBalance.toFixed(2)} USDT (released)
‚Ä¢ **Total Withdrawn:** $${totalWithdrawn.toFixed(2)} USDT
‚Ä¢ **Funds Released:** $${withdrawal.amount.toFixed(2)} USDT (back to available balance)

**‚úÖ SYSTEM ACTIONS COMPLETED:**
‚Ä¢ ‚úÖ Withdrawal status updated to 'rejected'
‚Ä¢ ‚úÖ Escrowed funds released back to user
‚Ä¢ ‚úÖ User notification sent with custom reason
‚Ä¢ ‚úÖ Audit log entry created
‚Ä¢ ‚úÖ Balance integrity maintained

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìß USER NOTIFICATION:** Sent successfully with rejection reason and next steps.
**üí° USER OPTIONS:** They can review, correct issues, and submit a new request.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è≥ View Pending Withdrawals", callback_data: "admin_pending_withdrawals" }],
          [{ text: "üîô Back to Commission Requests", callback_data: "admin_commissions" }]
        ]
      }
    });

    // Notify user of rejection
    try {
      const { data: telegramUser } = await db.client
        .from('telegram_users')
        .select('telegram_id')
        .eq('user_id', withdrawal.user_id)
        .single();

      if (telegramUser) {
        const userNotification = `‚ùå **WITHDRAWAL REJECTED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Request ID:** #${withdrawalId.substring(0, 8)}
**Amount:** $${withdrawal.amount.toFixed(2)} USDT
**Wallet Address:** ${withdrawal.wallet_address}

**Status:** Rejected by Admin

**Reason for Rejection:**
${rejectionReason.trim()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Your withdrawal request has been rejected. Your commission balance remains unchanged.

**You can:**
‚Ä¢ Review the rejection reason above
‚Ä¢ Correct any issues mentioned
‚Ä¢ Submit a new withdrawal request
‚Ä¢ Contact support for assistance

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        await sendAudioNotificationToUser(
          telegramUser.telegram_id,
          userNotification,
          'REJECTION',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üí∏ Try New Withdrawal", callback_data: "withdraw_usdt_commission" }],
                [{ text: "üí∞ View Commission", callback_data: "view_commission" }],
                [{ text: "üìû Contact Support", url: "https://t.me/TTTFOUNDER" }]
              ]
            }
          },
          true // Enable audio notification for rejections
        );
      }
    } catch (notifyError) {
      console.error('Error notifying user of withdrawal rejection:', notifyError);
    }

  } catch (error) {
    console.error('Error processing withdrawal rejection reason:', error);
    await ctx.reply('‚ùå Error processing rejection. Please try again.');
  }
}

// Handle sponsor username input
async function handleSponsorUsernameInput(ctx, text) {
  const user = ctx.from;

  try {
    console.log(`üîç Processing sponsor username input: "${text}" from user ${user.username}`);

    // Clear user state first
    await clearUserState(user.id);

    // Check for cancel
    if (text.toLowerCase() === 'cancel') {
      await ctx.reply("‚ùå Sponsor assignment cancelled.");
      await promptSponsorAssignment(ctx);
      return;
    }

    // Clean the username (remove @ if present)
    const sponsorUsername = text.replace('@', '').trim();
    console.log(`üßπ Cleaned sponsor username: "${sponsorUsername}"`);

    if (!sponsorUsername || sponsorUsername.length < 3) {
      await ctx.reply("‚ùå Invalid username. Please enter a valid Telegram username (minimum 3 characters).");
      await handleEnterSponsorManual(ctx);
      return;
    }

    // Validate sponsor exists
    console.log(`üîç Looking up sponsor: ${sponsorUsername}`);
    const sponsor = await db.getUserByUsername(sponsorUsername);
    if (!sponsor) {
      console.log(`‚ùå Sponsor ${sponsorUsername} not found in database`);
      const notFoundMessage = `‚ùå **SPONSOR NOT FOUND**

The username "${sponsorUsername}" was not found in our system.

**üéØ OPTIONS:**
‚Ä¢ Check the spelling and try again
‚Ä¢ Ask your sponsor to register first
‚Ä¢ Continue without a sponsor`;

      await ctx.replyWithMarkdown(notFoundMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úçÔ∏è Try Again", callback_data: "enter_sponsor_manual" }],
            [{ text: "üö´ I Don't Have A Sponsor", callback_data: "assign_default_sponsor" }]
          ]
        }
      });
      return;
    }

    console.log(`‚úÖ Sponsor found: ${sponsor.username} (ID: ${sponsor.id})`);

    // Get the current user (should already exist since they're using the bot)
    const authenticatedUser = await db.getUserByUsername(user.username);
    if (!authenticatedUser) {
      console.error(`‚ùå Current user ${user.username} not found in database`);
      await ctx.reply("‚ùå User authentication error. Please restart the bot with /start");
      return;
    }

    console.log(`‚úÖ Current user found: ${authenticatedUser.username} (ID: ${authenticatedUser.id})`);

    // Assign sponsor
    console.log(`ü§ù Assigning sponsor ${sponsorUsername} to user ${authenticatedUser.id}`);
    const success = await assignSponsor(authenticatedUser.id, sponsorUsername);

    if (success) {
      console.log(`‚úÖ Sponsor assignment successful for user ${authenticatedUser.id}`);

      const successMessage = `‚úÖ **SPONSOR ASSIGNED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**ü§ù Your Sponsor:** ${sponsor.full_name || sponsorUsername} (@${sponsorUsername})
**üìÖ Assigned:** ${new Date().toLocaleDateString()}
**‚úÖ Status:** Active

**üéØ NEXT STEPS:**
You can now access all platform features and start your gold mining investment journey!

**üíé Your sponsor will provide:**
‚Ä¢ Investment guidance and support
‚Ä¢ Commission tracking for referrals
‚Ä¢ Access to exclusive updates

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

      console.log(`üì§ Sending success message to user ${user.username}`);
      await ctx.replyWithMarkdown(successMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
            [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
            [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
          ]
        }
      });
      console.log(`‚úÖ Success message sent successfully to user ${user.username}`);
    } else {
      console.error(`‚ùå Sponsor assignment failed for user ${authenticatedUser.id}`);
      await ctx.reply("‚ùå Error assigning sponsor. Please try again.");
      await promptSponsorAssignment(ctx);
    }

  } catch (error) {
    console.error('Error handling sponsor username input:', error);
    await ctx.reply("‚ùå Error processing sponsor assignment. Please try again.");
    await promptSponsorAssignment(ctx);
  }
}

// Photo handler for proof upload
bot.on('photo', async (ctx) => {
  try {
    const user = ctx.from;
    const userState = await getUserState(user.id);

    if (userState && userState.state === 'upload_proof_screenshot') {
      await handleProofScreenshot(ctx, userState.data);
    } else if (userState && userState.state === 'uploading_payment_proof') {
      await handleBankTransferProofUpload(ctx);
    }
  } catch (error) {
    console.error('Error in photo handler:', error);
    await ctx.reply('‚ùå Error processing image. Please try again or contact support.');
  }
});

// Document handler for proof upload
bot.on('document', async (ctx) => {
  try {
    const user = ctx.from;
    const userState = await getUserState(user.id);

    if (userState && userState.state === 'upload_proof_screenshot') {
      const document = ctx.message.document;
      if (document.mime_type && document.mime_type.startsWith('image/')) {
        await handleProofScreenshot(ctx, userState.data, true);
      } else {
        await ctx.reply('üì∑ Please upload an image file for payment verification.');
      }
    } else if (userState && userState.state === 'uploading_payment_proof') {
      const document = ctx.message.document;
      if (document.mime_type && (document.mime_type.startsWith('image/') || document.mime_type === 'application/pdf')) {
        await handleBankTransferProofUpload(ctx, true);
      } else {
        await ctx.reply('üì∑ Please upload an image file (JPG, PNG) or PDF for payment proof.');
      }
    }
  } catch (error) {
    console.error('Error in document handler:', error);
    await ctx.reply('‚ùå Error processing document. Please try again or contact support.');
  }
});

// Handle custom amount input
async function handleCustomAmountInput(ctx, amountText) {
  const user = ctx.from;

  // Parse the amount
  const amount = parseFloat(amountText.replace(/[^0-9.]/g, ''));

  // Check minimum amount based on payment method
  const selectedPaymentMethod = ctx.session.selectedPaymentMethod || 'usdt';
  const minAmount = selectedPaymentMethod === 'bank_transfer' ? 15 : 5;
  const maxAmount = 50000;

  if (isNaN(amount) || amount < minAmount || amount > maxAmount) {
    const paymentMethodName = selectedPaymentMethod === 'bank_transfer' ? 'bank transfer' : 'USDT';
    await ctx.reply(`‚ùå Invalid amount. Please enter a number between $${minAmount} and $${maxAmount.toLocaleString()} for ${paymentMethodName} payments.`);
    return;
  }

  // Clear user state
  await setUserState(user.id, null);

  // Proceed with payment process
  await processCustomAmountPurchase(ctx, amount);
}

// Handle wallet address input
async function handleWalletAddressInput(ctx, walletAddress, sessionData) {
  const user = ctx.from;
  const { paymentId } = sessionData;

  try {
    // Update payment with sender wallet address
    const { error: updateError } = await db.client
      .from('crypto_payment_transactions')
      .update({
        sender_wallet: walletAddress,
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId);

    if (updateError) {
      console.error('Error updating payment with wallet:', updateError);
      await ctx.reply('‚ùå Error saving wallet address. Please try again.');
      return;
    }

    // Set state for transaction hash input
    await setUserState(user.id, 'upload_proof_hash', { paymentId, walletAddress });

    const hashMessage = `üí≥ **PAYMENT PROOF SUBMISSION - STEP 2 OF 3**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ **Wallet Address Saved:** ${walletAddress.substring(0, 10)}...

**üìç STEP 2: TRANSACTION HASH (TXID)**

Please type the transaction hash (TXID) of your payment:

‚ö†Ô∏è **Important:** This is the unique transaction ID from your wallet or exchange

**Next Step:** Screenshot Upload`;

    await ctx.replyWithMarkdown(hashMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå Cancel Upload", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling wallet address:', error);
    await ctx.reply('‚ùå Error processing wallet address. Please try again.');
  }
}

// Handle transaction hash input
async function handleTransactionHashInput(ctx, transactionHash, sessionData) {
  const user = ctx.from;
  const { paymentId } = sessionData;

  try {
    // Update payment with transaction hash
    const { error: updateError } = await db.client
      .from('crypto_payment_transactions')
      .update({
        transaction_hash: transactionHash,
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId);

    if (updateError) {
      console.error('Error updating payment with hash:', updateError);
      await ctx.reply('‚ùå Error saving transaction hash. Please try again.');
      return;
    }

    // Set state for screenshot upload
    await setUserState(user.id, 'upload_proof_screenshot', { paymentId });

    const screenshotMessage = `üí≥ **PAYMENT PROOF SUBMISSION - STEP 3 OF 3**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ **Transaction Hash Saved:** ${transactionHash.substring(0, 10)}...

**üìç STEP 3: UPLOAD SCREENSHOT**

Please upload a screenshot of your transaction:

üì∑ **Send the image now** (as photo or document)

‚ö†Ô∏è **Important:** Screenshot should clearly show the transaction details

**Final Step:** Upload complete ‚Üí Admin review`;

    await ctx.replyWithMarkdown(screenshotMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå Cancel Upload", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling transaction hash:', error);
    await ctx.reply('‚ùå Error processing transaction hash. Please try again.');
  }
}

// Handle proof screenshot upload
async function handleProofScreenshot(ctx, sessionData, isDocument = false) {
  const user = ctx.from;
  const { paymentId } = sessionData;

  try {
    let file, fileUrl;

    if (isDocument) {
      // Handle document upload
      const document = ctx.message.document;
      file = await ctx.telegram.getFile(document.file_id);
      fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
      console.log(`üìÑ Document file URL: ${fileUrl}`);
    } else {
      // Handle photo upload
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      file = await ctx.telegram.getFile(photo.file_id);
      fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
      console.log(`üì∑ Photo file URL: ${fileUrl}`);
    }

    console.log(`üì∑ Processing screenshot upload for payment ${paymentId}`);

    // Download and upload to Supabase storage
    const response = await fetch(fileUrl);
    if (!response.ok) {
      throw new Error(`Failed to download image: ${response.status} ${response.statusText}`);
    }

    const buffer = await response.arrayBuffer();
    const timestamp = Date.now();
    const filename = `payment_${user.id}_${timestamp}.jpg`;

    // Upload to Supabase storage bucket "proof"
    const { data, error } = await db.client.storage
      .from('proof')
      .upload(filename, buffer, {
        contentType: 'image/jpeg',
        upsert: false
      });

    if (error) {
      console.error('Storage upload error:', error);
      await ctx.reply('‚ùå Failed to upload screenshot. Please try again.');
      return;
    }

    // Update payment with screenshot
    const { error: updateError } = await db.client
      .from('crypto_payment_transactions')
      .update({
        screenshot_url: filename,
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId);

    if (updateError) {
      console.error('Error updating payment with screenshot:', updateError);
      await ctx.reply('‚ùå Failed to save screenshot. Please try again.');
      return;
    }

    // Clear user state
    try {
      if (typeof clearUserState === 'function') {
        await clearUserState(user.id);
      } else {
        // Fallback if function not available
        if (global.userStates) {
          global.userStates.delete(user.id);
        }
      }
    } catch (stateError) {
      console.error('Error clearing user state:', stateError);
      // Continue anyway - this is not critical
    }

    const successMessage = `‚úÖ **PAYMENT PROOF UPLOADED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã SUBMISSION COMPLETE:**
‚Ä¢ Payment ID: #${paymentId.substring(0, 8)}
‚Ä¢ Wallet Address: ‚úÖ Saved
‚Ä¢ Transaction Hash: ‚úÖ Saved
‚Ä¢ Screenshot: ‚úÖ Uploaded

**‚è≥ NEXT STEPS:**
‚Ä¢ Admin will review your payment
‚Ä¢ You'll receive notification when approved
‚Ä¢ Shares will be allocated to your account

**üì± You can check status in Portfolio section**`;

    await ctx.replyWithMarkdown(successMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
          [{ text: "üè† Main Menu", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling proof screenshot:', error);
    await ctx.reply('‚ùå Error uploading screenshot. Please try again.');
  }
}

// WITHDRAWAL INPUT HANDLERS

// Handle withdrawal amount input
async function handleWithdrawalAmountInput(ctx, text, sessionData) {
  const user = ctx.from;
  const { availableBalance, withdrawalType } = sessionData;

  try {
    // Clear user state first
    await clearUserState(user.id);

    // Check for cancel
    if (text.toLowerCase() === 'cancel') {
      await ctx.reply("‚ùå Withdrawal cancelled.");
      await handleViewCommission(ctx);
      return;
    }

    // Parse and validate amount
    const amount = parseFloat(text.replace(/[^0-9.]/g, ''));

    if (isNaN(amount) || amount <= 0) {
      await ctx.reply("‚ùå Invalid amount. Please enter a valid number (e.g., 25.50)");
      await handleWithdrawUSDTCommission(ctx);
      return;
    }

    if (amount < 10) {
      await ctx.reply("‚ùå Minimum withdrawal amount is $10.00 USDT");
      await handleWithdrawUSDTCommission(ctx);
      return;
    }

    if (amount > availableBalance) {
      // Get detailed balance information for better error message
      const balanceInfo = await getAvailableCommissionBalance(telegramUser.user_id);

      await ctx.replyWithMarkdown(`‚ùå **INSUFFICIENT COMMISSION BALANCE**

**üí∞ Your Balance Details:**
‚Ä¢ **Total Balance:** $${balanceInfo.totalBalance.toFixed(2)} USDT
‚Ä¢ **Currently Escrowed:** $${balanceInfo.escrowedAmount.toFixed(2)} USDT
‚Ä¢ **Available for Withdrawal:** $${balanceInfo.availableBalance.toFixed(2)} USDT
‚Ä¢ **Requested Amount:** $${amount.toFixed(2)} USDT

${balanceInfo.escrowedAmount > 0 ?
`**‚ö†Ô∏è FUNDS LOCKED:** You have $${balanceInfo.escrowedAmount.toFixed(2)} USDT locked in pending requests.

**üí° WHAT YOU CAN DO:**
‚Ä¢ **Wait:** Pending requests will be processed within 24-48 hours
‚Ä¢ **Withdraw Less:** Try withdrawing $${balanceInfo.availableBalance.toFixed(2)} USDT or less
‚Ä¢ **Check Status:** View your pending requests for details
‚Ä¢ **Contact Admin:** Get help with urgent requests` :
`**üí° WHAT YOU CAN DO:**
‚Ä¢ **Withdraw Less:** Maximum available is $${balanceInfo.availableBalance.toFixed(2)} USDT
‚Ä¢ **Earn More:** Refer more users to increase your commission balance
‚Ä¢ **Contact Admin:** Get help if you believe this is an error`}

**üìû Need Help?** Contact @TTTFOUNDER for assistance.`);

      await handleWithdrawUSDTCommission(ctx);
      return;
    }

    if (amount > 1000) {
      await ctx.reply("‚ùå Maximum daily withdrawal is $1,000.00 USDT");
      await handleWithdrawUSDTCommission(ctx);
      return;
    }

    // Set state for wallet address input
    await setUserState(user.id, 'awaiting_withdrawal_wallet', {
      amount,
      withdrawalType,
      availableBalance
    });

    const walletMessage = `üí≥ **WALLET ADDRESS REQUIRED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ Withdrawal Amount:** $${amount.toFixed(2)} USDT
**üí∏ Processing Fee:** $2.00 USDT
**üì§ You'll Receive:** $${(amount - 2).toFixed(2)} USDT

**üîó NETWORK:** TRC-20 (Tron)

**üìù Please enter your USDT wallet address:**

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ Only TRC-20 (Tron) network supported
‚Ä¢ Double-check your wallet address
‚Ä¢ Incorrect addresses may result in lost funds
‚Ä¢ We cannot recover funds sent to wrong addresses

**üí° Example format:** TXYZabc123def456ghi789...`;

    await ctx.replyWithMarkdown(walletMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå Cancel Withdrawal", callback_data: "view_commission" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling withdrawal amount:', error);
    await ctx.reply('‚ùå Error processing withdrawal amount. Please try again.');
  }
}

// Handle withdrawal wallet address input
async function handleWithdrawalWalletInput(ctx, text, sessionData) {
  const user = ctx.from;
  const { amount, withdrawalType } = sessionData;

  try {
    // Clear user state first
    await clearUserState(user.id);

    // Check for cancel
    if (text.toLowerCase() === 'cancel') {
      await ctx.reply("‚ùå Withdrawal cancelled.");
      await handleViewCommission(ctx);
      return;
    }

    // Clean and validate wallet address
    const walletAddress = text.trim();

    // Basic TRC-20 address validation (starts with T, 34 characters)
    if (!walletAddress.startsWith('T') || walletAddress.length !== 34) {
      await ctx.reply(`‚ùå Invalid TRC-20 wallet address format.

**Requirements:**
‚Ä¢ Must start with 'T'
‚Ä¢ Must be exactly 34 characters
‚Ä¢ Example: TXYZabc123def456ghi789jkl012mno345

Please enter a valid TRC-20 wallet address:`);

      // Reset state for wallet input
      await setUserState(user.id, 'awaiting_withdrawal_wallet', sessionData);
      return;
    }

    // Get user ID for database operations
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.reply('‚ùå User authentication error. Please try again.');
      return;
    }

    // üîí SECURE ESCROW: Check available balance and create escrow atomically
    console.log(`üîí [ESCROW] Creating commission withdrawal escrow for user ${telegramUser.user_id}, amount: $${amount}`);

    const escrowResult = await createCommissionEscrow(telegramUser.user_id, amount, 'withdrawal');

    if (!escrowResult.success) {
      console.error(`‚ùå [ESCROW] Failed to create withdrawal escrow:`, escrowResult.error);

      if (escrowResult.error.includes('Insufficient available balance')) {
        // Get current balance info for detailed error message
        const balanceInfo = await getAvailableCommissionBalance(telegramUser.user_id);
        await ctx.replyWithMarkdown(`‚ùå **INSUFFICIENT AVAILABLE COMMISSION BALANCE**

**üí∞ Balance Details:**
‚Ä¢ **Total Balance:** $${balanceInfo.totalBalance.toFixed(2)} USDT
‚Ä¢ **Currently Escrowed:** $${balanceInfo.escrowedAmount.toFixed(2)} USDT
‚Ä¢ **Available Balance:** $${balanceInfo.availableBalance.toFixed(2)} USDT
‚Ä¢ **Required for Withdrawal:** $${amount.toFixed(2)} USDT

**‚ö†Ô∏è You have pending commission requests that have locked some of your balance.**

**üí° Options:**
‚Ä¢ Wait for pending requests to be processed
‚Ä¢ Cancel existing pending requests
‚Ä¢ Request a smaller withdrawal amount

Your commission balance is secure and will be available once pending requests are resolved.`);
      } else {
        await ctx.reply('‚ùå Error processing withdrawal request. Please try again.');
      }
      return;
    }

    // Create withdrawal request (escrow already secured)
    const { data: withdrawal, error: withdrawalError } = await db.client
      .from('commission_withdrawals')
      .insert({
        user_id: telegramUser.user_id,
        withdrawal_type: withdrawalType,
        amount: amount,
        wallet_address: walletAddress,
        status: 'pending',
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (withdrawalError) {
      console.error('Error creating withdrawal request:', withdrawalError);

      // üîí ROLLBACK: Release escrow if withdrawal creation failed
      console.log(`üîí [ESCROW] Rolling back escrow due to withdrawal creation failure`);
      await releaseCommissionEscrow(telegramUser.user_id, amount);

      await ctx.reply('‚ùå Error creating withdrawal request. Please try again.');
      return;
    }

    const successMessage = `‚úÖ **WITHDRAWAL REQUEST SUBMITTED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã REQUEST DETAILS:**
‚Ä¢ **Request ID:** #${withdrawal.id.substring(0, 8)}
‚Ä¢ **Amount:** $${amount.toFixed(2)} USDT
‚Ä¢ **Processing Fee:** $2.00 USDT
‚Ä¢ **You'll Receive:** $${(amount - 2).toFixed(2)} USDT
‚Ä¢ **Wallet:** ${walletAddress.substring(0, 10)}...${walletAddress.substring(-6)}
‚Ä¢ **Network:** TRC-20 (Tron)
‚Ä¢ **Status:** Pending Admin Review

**‚è≥ NEXT STEPS:**
1. **Admin Review:** 24-48 hours
2. **Approval Notification:** Via bot message
3. **Payment Processing:** 1-3 business days
4. **Transaction Hash:** Provided upon completion

**üì± You'll receive notifications for all status updates.**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí° Track your request in Withdrawal History**`;

    await ctx.replyWithMarkdown(successMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìã View Withdrawal History", callback_data: "withdrawal_history" }],
          [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
          [{ text: "üè† Main Menu", callback_data: "main_menu" }]
        ]
      }
    });

    // Notify admin about new withdrawal request
    await sendAdminNotification('withdrawal_request', {
      username: user.username || user.first_name || 'Unknown',
      amount: amount,
      wallet_address: walletAddress,
      user_id: telegramUser.user_id
    }, 'high'); // High priority for withdrawal requests

  } catch (error) {
    console.error('Error handling withdrawal wallet:', error);
    await ctx.reply('‚ùå Error processing withdrawal request. Please try again.');
  }
}

// Handle withdrawal transaction hash input from admin
async function handleWithdrawalHashInput(ctx, text, sessionData) {
  const user = ctx.from;
  const { withdrawal_id, short_id, user_name, amount, wallet_address, available_balance } = sessionData;

  try {
    // Clear user state first
    await clearUserState(user.id);

    // Validate transaction hash format (basic validation)
    const transactionHash = text.trim();
    if (!transactionHash || transactionHash.length < 10) {
      await ctx.reply('‚ùå Invalid transaction hash. Please provide a valid transaction hash.');
      return;
    }

    // Get withdrawal details to verify it's still pending
    const { data: withdrawal, error: withdrawalError } = await db.client
      .from('commission_withdrawals')
      .select(`
        *,
        users!commission_withdrawals_user_id_fkey!inner(full_name, username)
      `)
      .eq('id', withdrawal_id)
      .eq('status', 'pending')
      .single();

    if (withdrawalError || !withdrawal) {
      await ctx.reply('‚ùå Withdrawal request not found or already processed.');
      return;
    }

    // Get current commission balance
    const { data: commissionBalance, error: balanceError } = await db.client
      .from('commission_balances')
      .select('usdt_balance, escrowed_amount, total_withdrawn')
      .eq('user_id', withdrawal.user_id)
      .single();

    if (balanceError || !commissionBalance) {
      await ctx.reply('‚ùå Error retrieving user balance.');
      return;
    }

    // Update withdrawal status with transaction hash
    const { error: updateError } = await db.client
      .from('commission_withdrawals')
      .update({
        status: 'approved',
        transaction_hash: transactionHash,
        approved_by_admin_id: user.id,
        approved_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', withdrawal_id);

    if (updateError) {
      console.error('Error updating withdrawal:', updateError);
      await ctx.reply('‚ùå Error updating withdrawal status.');
      return;
    }

    // üîí SECURE ESCROW: Deduct from both commission balance and escrow
    const currentEscrow = parseFloat(commissionBalance.escrowed_amount || 0);
    const newBalance = parseFloat(commissionBalance.usdt_balance || 0) - withdrawal.amount;
    const newEscrow = Math.max(0, currentEscrow - withdrawal.amount);

    console.log(`üîí [ESCROW] Withdrawal approval - Balance: $${commissionBalance.usdt_balance} -> $${newBalance}, Escrow: $${currentEscrow} -> $${newEscrow}`);

    const { error: balanceUpdateError } = await db.client
      .from('commission_balances')
      .update({
        usdt_balance: newBalance,
        escrowed_amount: newEscrow,
        total_withdrawn: (commissionBalance.total_withdrawn || 0) + withdrawal.amount,
        last_updated: new Date().toISOString()
      })
      .eq('user_id', withdrawal.user_id);

    if (balanceUpdateError) {
      console.error('Error updating commission balance:', balanceUpdateError);
      // Rollback withdrawal approval
      await db.client
        .from('commission_withdrawals')
        .update({ status: 'pending', transaction_hash: null })
        .eq('id', withdrawal_id);
      await ctx.reply('‚ùå Error updating balance. Withdrawal reverted to pending.');
      return;
    }

    // Log admin action
    await logAdminAction(
      user.id,
      user.username,
      'withdrawal_approved',
      'withdrawal',
      withdrawal_id,
      {
        user: withdrawal.users.username,
        amount: withdrawal.amount,
        wallet: withdrawal.wallet_address,
        transaction_hash: transactionHash
      }
    );

    // Success notification to admin
    await ctx.replyWithMarkdown(`‚úÖ **WITHDRAWAL APPROVED & PROCESSED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã REQUEST DETAILS:**
‚Ä¢ **Request ID:** #${short_id}
‚Ä¢ **User:** ${user_name}
‚Ä¢ **Amount:** $${withdrawal.amount.toFixed(2)} USDT
‚Ä¢ **Wallet:** ${wallet_address}
‚Ä¢ **Transaction Hash:** \`${transactionHash}\`

**üí∞ BALANCE UPDATES:**
‚Ä¢ **Previous Balance:** $${(newBalance + withdrawal.amount).toFixed(2)} USDT
‚Ä¢ **Withdrawal Amount:** -$${withdrawal.amount.toFixed(2)} USDT
‚Ä¢ **New Balance:** $${newBalance.toFixed(2)} USDT
‚Ä¢ **Escrowed Amount:** $${newEscrow.toFixed(2)} USDT

**‚úÖ SYSTEM ACTIONS COMPLETED:**
‚Ä¢ ‚úÖ Commission balance deducted
‚Ä¢ ‚úÖ Escrow amount released
‚Ä¢ ‚úÖ Transaction hash recorded
‚Ä¢ ‚úÖ User notification sent

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è≥ View Pending Withdrawals", callback_data: "admin_pending_withdrawals" }],
          [{ text: "üîô Back to Commission Requests", callback_data: "admin_commissions" }]
        ]
      }
    });

    // Notify user of approval with transaction hash
    try {
      const { data: telegramUser } = await db.client
        .from('telegram_users')
        .select('telegram_id')
        .eq('user_id', withdrawal.user_id)
        .single();

      if (telegramUser) {
        const userNotification = `‚úÖ **WITHDRAWAL COMPLETED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Request ID:** #${short_id}
**Amount:** $${withdrawal.amount.toFixed(2)} USDT
**Wallet Address:** ${wallet_address}

**üîó Transaction Hash:**
\`${transactionHash}\`

**Status:** ‚úÖ Payment Completed

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Your withdrawal has been successfully processed! The USDT has been transferred to your wallet address.

**You can verify the transaction using the hash above on the blockchain explorer.**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        await sendAudioNotificationToUser(
          telegramUser.telegram_id,
          userNotification,
          'APPROVAL',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
                [{ text: "üìã Withdrawal History", callback_data: "withdrawal_history" }]
              ]
            }
          },
          true // Enable audio notification for approvals
        );
      }
    } catch (notifyError) {
      console.error('Error notifying user of withdrawal completion:', notifyError);
    }

  } catch (error) {
    console.error('Error processing withdrawal hash:', error);
    await ctx.reply('‚ùå Error processing transaction hash. Please try again.');
  }
}

// Process custom amount purchase
async function processCustomAmountPurchase(ctx, amount) {
  const user = ctx.from;

  try {
    // Get current phase and share price
    const { data: currentPhase, error: phaseError } = await db.client
      .from('investment_phases')
      .select('*')
      .eq('is_active', true)
      .single();

    if (phaseError || !currentPhase) {
      await ctx.reply('‚ùå Error: No active phase found. Please contact support.');
      return;
    }

    const sharePrice = parseFloat(currentPhase.price_per_share);
    const sharesAmount = Math.floor(amount / sharePrice);

    if (sharesAmount < 1) {
      await ctx.reply(`‚ùå Amount too small. Minimum purchase: $${sharePrice.toFixed(2)} for 1 share.`);
      return;
    }

    const totalCost = sharesAmount * sharePrice;

    const confirmMessage = `üõí **PURCHASE CONFIRMATION**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ INVESTMENT DETAILS:**
‚Ä¢ Amount: ${formatCurrency(amount)}
‚Ä¢ Share Price: ${formatCurrency(sharePrice)}
‚Ä¢ Shares: ${sharesAmount.toLocaleString()}
‚Ä¢ Total Cost: ${formatCurrency(totalCost)}

**üìä PHASE INFO:**
‚Ä¢ Phase: ${currentPhase.phase_name}
‚Ä¢ Shares Available: ${(currentPhase.total_shares - currentPhase.shares_sold).toLocaleString()}

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ Payment must be made within 24 hours
‚Ä¢ Upload proof of payment after transfer
‚Ä¢ Shares will be allocated after admin approval

**Continue with this purchase?**`;

    await ctx.replyWithMarkdown(confirmMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ Confirm Purchase", callback_data: `confirm_purchase_${amount}` },
            { text: "‚ùå Cancel", callback_data: "main_menu" }
          ]
        ]
      }
    });

  } catch (error) {
    console.error('Error processing custom amount purchase:', error);
    await ctx.reply('‚ùå Error processing purchase. Please try again.');
  }
}

// Portfolio Handler
async function handlePortfolio(ctx) {
  const user = ctx.from;

  try {
    // Get user ID from telegram_users table
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **Authentication Error**\n\nPlease restart the bot and try again.');
      return;
    }

    const userId = telegramUser.user_id;

    // Get user's share purchases
    const { data: purchases, error: purchasesError } = await db.client
      .from('aureus_share_purchases')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (purchasesError) {
      console.error('Portfolio error:', purchasesError);
      await ctx.replyWithMarkdown('‚ùå **Error loading portfolio**\n\nPlease try again later.');
      return;
    }

    // Get pending payments
    const { data: pendingPayments, error: paymentsError } = await db.client
      .from('crypto_payment_transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('status', 'pending')
      .order('created_at', { ascending: false });

    // Get user's sponsor information
    const { data: referralInfo, error: referralError } = await db.client
      .from('referrals')
      .select(`
        referrer_id,
        created_at,
        users!referrals_referrer_id_fkey (
          username,
          full_name
        )
      `)
      .eq('referred_id', userId)
      .eq('status', 'active')
      .single();

    let sponsorInfo = 'Not assigned';
    if (referralInfo && !referralError) {
      const sponsorName = referralInfo.users?.full_name || referralInfo.users?.username || 'Unknown';
      const sponsorUsername = referralInfo.users?.username || 'Unknown';
      sponsorInfo = `${sponsorName} (@${sponsorUsername})`;
    }

    const totalShares = purchases?.reduce((sum, purchase) => sum + (purchase.shares_purchased || 0), 0) || 0;
    const totalInvested = purchases?.reduce((sum, purchase) => sum + (purchase.total_amount || 0), 0) || 0;
    const approvedPurchases = purchases?.filter(p => p.status === 'active') || []; // Fixed: 'active' not 'approved'
    const pendingAmount = pendingPayments?.reduce((sum, payment) => sum + (parseFloat(payment.amount) || 0), 0) || 0;

    const portfolioMessage = `üìä **MY PORTFOLIO**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üíé SHARE HOLDINGS:**
‚Ä¢ **Total Shares:** ${totalShares.toLocaleString()}
‚Ä¢ **Total Invested:** ${formatCurrency(totalInvested)}
‚Ä¢ **Approved Purchases:** ${approvedPurchases.length}

**ü§ù REFERRAL INFORMATION:**
‚Ä¢ **Your Sponsor:** ${sponsorInfo}
‚Ä¢ **Referral Status:** ${referralInfo ? 'Active' : 'Not assigned'}

**üìà INVESTMENT SUMMARY:**
${purchases && purchases.length > 0
  ? purchases.slice(0, 5).map(purchase =>
      `‚Ä¢ ${formatCurrency(purchase.total_amount)} - ${purchase.shares_purchased} shares (${purchase.status})`
    ).join('\n')
  : '‚Ä¢ No investments yet'}

**üéØ NEXT STEPS:**
${totalShares > 0
  ? 'Your shares are generating value through our gold mining operations.'
  : 'Start your investment journey with your first share purchase.'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    const keyboard = totalShares > 0
      ? [
          [{ text: "üìä Detailed View", callback_data: "portfolio_detailed" }],
          [{ text: "üìß Get Portfolio Updates", callback_data: "notify_portfolio" }],
          [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
        ]
      : [
          [{ text: "üõí Purchase Shares", callback_data: "menu_purchase_shares" }],
          [{ text: "üìß Get Portfolio Updates", callback_data: "notify_portfolio" }],
          [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
        ];

    await ctx.replyWithMarkdown(portfolioMessage, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('Portfolio error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading portfolio**\n\nPlease try again later.');
  }
}

// User Payment Status View Handlers
async function handleViewApprovedPayments(ctx) {
  const user = ctx.from;

  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first using /start');
      return;
    }

    // Get approved payments
    const approvedPayments = await getUserPaymentsByStatus(telegramUser.user_id, 'approved', 10);

    if (approvedPayments.length === 0) {
      await ctx.replyWithMarkdown(`‚úÖ **APPROVED PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**No approved payments found**

You haven't had any payments approved yet. Once your payments are approved by our admin team, they will appear here.

**üí° Next Steps:**
‚Ä¢ Submit a payment for share purchase
‚Ä¢ Wait for admin approval (usually 2-24 hours)
‚Ä¢ Check back here for updates

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üõí Purchase Shares", callback_data: "menu_purchase_shares" }],
            [{ text: "‚è≥ View Pending", callback_data: "view_pending" }],
            [{ text: "üîô Back to Payments", callback_data: "menu_payments" }]
          ]
        }
      });
      return;
    }

    // Format approved payments
    const paymentsText = await Promise.all(
      approvedPayments.map(payment => formatPaymentForDisplay(payment, false))
    );

    const message = `‚úÖ **APPROVED PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${paymentsText.join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìä Summary:** ${approvedPayments.length} approved payment${approvedPayments.length > 1 ? 's' : ''}
**üí∞ Total Value:** $${approvedPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0).toFixed(2)} USDT`;

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è≥ View Pending", callback_data: "view_pending" }],
          [{ text: "‚ùå View Rejected", callback_data: "view_rejected" }],
          [{ text: "üîÑ Refresh", callback_data: "view_approved" }],
          [{ text: "üîô Back to Payments", callback_data: "menu_payments" }]
        ]
      }
    });

  } catch (error) {
    console.error('View approved payments error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading approved payments**\n\nPlease try again later.');
  }
}

async function handleViewRejectedPayments(ctx) {
  const user = ctx.from;

  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first using /start');
      return;
    }

    // Get rejected payments
    const rejectedPayments = await getUserPaymentsByStatus(telegramUser.user_id, 'rejected', 10);

    if (rejectedPayments.length === 0) {
      await ctx.replyWithMarkdown(`‚ùå **REJECTED PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**No rejected payments found**

Great news! You haven't had any payments rejected. All your submissions have been either approved or are still pending review.

**üí° Tips for Successful Payments:**
‚Ä¢ Use correct wallet addresses
‚Ä¢ Include clear transaction screenshots
‚Ä¢ Ensure payment amounts match exactly
‚Ä¢ Submit payments during business hours

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üõí Purchase Shares", callback_data: "menu_purchase_shares" }],
            [{ text: "‚úÖ View Approved", callback_data: "view_approved" }],
            [{ text: "üîô Back to Payments", callback_data: "menu_payments" }]
          ]
        }
      });
      return;
    }

    // Format rejected payments
    const paymentsText = await Promise.all(
      rejectedPayments.map(payment => formatPaymentForDisplay(payment, false))
    );

    const message = `‚ùå **REJECTED PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${paymentsText.join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìä Summary:** ${rejectedPayments.length} rejected payment${rejectedPayments.length > 1 ? 's' : ''}
**üí° Next Steps:** Review rejection reasons and resubmit corrected payments`;

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üõí Try Again", callback_data: "menu_purchase_shares" }],
          [{ text: "‚úÖ View Approved", callback_data: "view_approved" }],
          [{ text: "‚è≥ View Pending", callback_data: "view_pending" }],
          [{ text: "üìû Contact Support", url: "https://t.me/TTTFOUNDER" }],
          [{ text: "üîô Back to Payments", callback_data: "menu_payments" }]
        ]
      }
    });

  } catch (error) {
    console.error('View rejected payments error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading rejected payments**\n\nPlease try again later.');
  }
}

async function handleViewPendingPayments(ctx) {
  const user = ctx.from;

  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first using /start');
      return;
    }

    // Get pending payments
    const pendingPayments = await getUserPaymentsByStatus(telegramUser.user_id, 'pending', 10);

    if (pendingPayments.length === 0) {
      await ctx.replyWithMarkdown(`‚è≥ **PENDING PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**No pending payments found**

You don't have any payments currently awaiting approval.

**üí° What's Next:**
‚Ä¢ Submit a new payment for share purchase
‚Ä¢ Check your approved payments history
‚Ä¢ Contact support if you're expecting a pending payment

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üõí Purchase Shares", callback_data: "menu_purchase_shares" }],
            [{ text: "‚úÖ View Approved", callback_data: "view_approved" }],
            [{ text: "üîô Back to Payments", callback_data: "menu_payments" }]
          ]
        }
      });
      return;
    }

    // Format pending payments
    const paymentsText = await Promise.all(
      pendingPayments.map(payment => formatPaymentForDisplay(payment, false))
    );

    const message = `‚è≥ **PENDING PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${paymentsText.join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìä Summary:** ${pendingPayments.length} pending payment${pendingPayments.length > 1 ? 's' : ''}
**‚è±Ô∏è Processing Time:** Usually 2-24 hours
**üìß Updates:** You'll be notified when status changes`;

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ View Approved", callback_data: "view_approved" }],
          [{ text: "‚ùå View Rejected", callback_data: "view_rejected" }],
          [{ text: "üîÑ Refresh", callback_data: "view_pending" }],
          [{ text: "üìû Contact Admin", url: "https://t.me/TTTFOUNDER" }],
          [{ text: "üîô Back to Payments", callback_data: "menu_payments" }]
        ]
      }
    });

  } catch (error) {
    console.error('View pending payments error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading pending payments**\n\nPlease try again later.');
  }
}

// Payment Status Handler
async function handlePaymentStatus(ctx) {
  const paymentMessage = `üí≥ **PAYMENT & TRANSACTION CENTER**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**PAYMENT METHODS SUPPORTED:**
‚Ä¢ üí≥ **BSC USDT** - Binance Smart Chain
‚Ä¢ üí≥ **Polygon USDT** - Polygon Network
‚Ä¢ üí≥ **TRON USDT** - Tron Network

**üîê SECURITY FEATURES:**
‚Ä¢ Multi-signature wallet protection
‚Ä¢ Real-time transaction monitoring
‚Ä¢ Automated fraud detection
‚Ä¢ 24/7 payment processing

**‚ö° PROCESSING TIMES:**
‚Ä¢ Payment verification: Instant
‚Ä¢ Admin approval: 2-24 hours
‚Ä¢ Share allocation: Immediate after approval

**üì± PAYMENT TRACKING:**
Monitor all your transactions and payment history in real-time.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Secure 3-step payment verification with instant processing.`;

  await ctx.replyWithMarkdown(paymentMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõí Purchase Shares", callback_data: "menu_purchase_shares" }],
        [
          { text: "‚è≥ Pending Payments", callback_data: "view_pending" },
          { text: "‚úÖ Approved Payments", callback_data: "view_approved" }
        ],
        [{ text: "‚ùå Rejected Payments", callback_data: "view_rejected" }],
        [{ text: "üìß Get Payment Updates", callback_data: "notify_payments" }],
        [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Referral System Handler
async function handleReferralSystem(ctx) {
  const referralMessage = `üë• **REFERRAL PROGRAM**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ EARN 15% COMMISSION:**
‚Ä¢ 15% USDT Commission on every referral purchase
‚Ä¢ 15% Share Commission for long-term growth
‚Ä¢ Daily commission payments
‚Ä¢ Unlimited earning potential

**üéØ HOW IT WORKS:**
1. Share your unique referral link
2. Friends invest using your link
3. Earn instant 15% commission
4. Withdraw anytime to your wallet

**üìä COMMISSION STRUCTURE:**
‚Ä¢ **USDT Commission:** 15% paid in USDT
‚Ä¢ **Share Commission:** 15% paid in shares
‚Ä¢ **Payment Schedule:** Daily processing
‚Ä¢ **Withdrawal:** Available anytime

**üöÄ REFERRAL BENEFITS:**
‚Ä¢ Build passive income stream
‚Ä¢ Help friends access gold mining investment
‚Ä¢ Grow your own share portfolio
‚Ä¢ Professional referral tracking

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(referralMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üì§ Share Referral Link", callback_data: "share_referral" }],
        [{ text: "üí∞ Commission Balance", callback_data: "view_commission" }],
        [{ text: "üë• My Referrals", callback_data: "view_referrals" }],
        [{ text: "üí∏ Withdraw Commissions", callback_data: "withdraw_commissions" }],
        [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Admin Panel Handler
async function handleAdminPanel(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**\n\nAdmin access is restricted.');
    return;
  }

  // Get current maintenance mode status
  const isMaintenanceMode = await getMaintenanceMode();
  const maintenanceStatus = isMaintenanceMode ? 'üîß **MAINTENANCE MODE ACTIVE**' : '‚úÖ **ALL SYSTEMS OPERATIONAL**';
  const maintenanceButton = isMaintenanceMode
    ? { text: "‚úÖ Disable Maintenance Mode", callback_data: "toggle_maintenance" }
    : { text: "üîß Enable Maintenance Mode", callback_data: "toggle_maintenance" };

  const adminMessage = `üîë **ADMIN CONTROL PANEL**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚ö° SYSTEM STATUS:** ${maintenanceStatus}

**üîß ADMIN FUNCTIONS:**
‚Ä¢ Payment approvals and management
‚Ä¢ User account administration
‚Ä¢ Commission processing
‚Ä¢ System monitoring and analytics
‚Ä¢ Audit logs and reporting
‚Ä¢ Maintenance mode control

**üìä QUICK STATS:**
‚Ä¢ Active users and transactions
‚Ä¢ Pending payment queue
‚Ä¢ Commission payouts
‚Ä¢ System performance metrics

**üõ°Ô∏è SECURITY:**
‚Ä¢ Multi-factor authentication active
‚Ä¢ Audit trail logging enabled
‚Ä¢ Real-time monitoring active

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(adminMessage, {
    reply_markup: {
      inline_keyboard: [
        [maintenanceButton],
        [{ text: "‚è≥ Pending Payments", callback_data: "admin_pending" }],
        [{ text: "üë• User Management", callback_data: "admin_users" }],
        [{ text: "üí∞ Commission Requests", callback_data: "admin_commissions" }],
        [{ text: "üîÑ Commission Conversions", callback_data: "admin_commission_conversions" }],
        [{ text: "üìä System Stats", callback_data: "admin_stats" }],
        [{ text: "üîç Validate Shares Sold", callback_data: "admin_validate_shares_sold" }],
        [{ text: "üìã Audit Logs", callback_data: "admin_logs" }],
        [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Admin Maintenance Mode Toggle Handler
async function handleToggleMaintenance(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  try {
    const currentMode = await getMaintenanceMode();
    const newMode = !currentMode;

    const success = await setMaintenanceMode(newMode);

    if (success) {
      const statusText = newMode ? 'ENABLED' : 'DISABLED';
      const statusIcon = newMode ? 'üîß' : '‚úÖ';

      // Log the admin action
      await logAdminAction(
        user.id,
        user.username,
        `maintenance_mode_${newMode ? 'enabled' : 'disabled'}`,
        'system',
        'maintenance_mode',
        { previous_state: currentMode, new_state: newMode }
      );

      await ctx.replyWithMarkdown(`${statusIcon} **MAINTENANCE MODE ${statusText}**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Status:** ${newMode ? 'Share purchasing is now DISABLED' : 'Share purchasing is now ENABLED'}

${newMode ?
  'üö´ **Users will see maintenance message when trying to purchase shares**\n‚úÖ **All other bot functions remain available**' :
  '‚úÖ **All bot functions are now fully operational**\nüõí **Users can purchase shares normally**'
}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Action logged for audit purposes.**`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
          ]
        }
      });
    } else {
      await ctx.replyWithMarkdown('‚ùå **Error updating maintenance mode**\n\nPlease try again.');
    }
  } catch (error) {
    console.error('Error toggling maintenance mode:', error);
    await ctx.answerCbQuery('‚ùå Error updating maintenance mode');
  }
}

// Admin Status Handler
async function handleAdminStatus(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**\n\nAdmin access is restricted.');
    return;
  }

  const statusMessage = `üìä **SYSTEM STATUS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üü¢ ALL SYSTEMS OPERATIONAL**

**üîó DATABASE:** Connected and responsive
**ü§ñ BOT:** Running smoothly
**üí≥ PAYMENTS:** Processing normally
**‚õèÔ∏è MINING OPS:** Active operations
**üîê SECURITY:** All systems secure

**üìà PERFORMANCE METRICS:**
‚Ä¢ Response time: < 100ms
‚Ä¢ Uptime: 99.9%
‚Ä¢ Error rate: < 0.1%
‚Ä¢ Active connections: Stable

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(statusMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîÑ Refresh Status", callback_data: "admin_status" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// Helper function for user state management
async function setUserState(userId, state, data = null) {
  // This would typically use a database or memory store
  // For now, we'll use a simple in-memory approach
  if (!global.userStates) {
    global.userStates = new Map();
  }
  global.userStates.set(userId, { state, data, timestamp: Date.now() });
}

function getUserState(userId) {
  if (!global.userStates) {
    return null;
  }
  return global.userStates.get(userId);
}

function clearUserState(userId) {
  if (!global.userStates) {
    return;
  }
  global.userStates.delete(userId);
}

// ADMIN PANEL DETAILED HANDLERS

// Admin Payment Status View Handlers
async function handleAdminApprovedPayments(ctx) {
  console.log('üîß [DEBUG] handleAdminApprovedPayments function called');
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    console.log('üîß [DEBUG] Access denied for user:', user.username);
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  try {
    // Get approved payments
    const approvedPayments = await getAdminPaymentsByStatus('approved', 15);

    if (approvedPayments.length === 0) {
      await ctx.replyWithMarkdown(`‚úÖ **APPROVED PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**No approved payments found**

There are currently no approved payments in the system.

**üìä ADMIN ACTIONS:**
‚Ä¢ Review pending payments for approval
‚Ä¢ Check system activity logs
‚Ä¢ Monitor payment processing metrics

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚è≥ View Pending", callback_data: "admin_payments" }],
            [{ text: "‚ùå View Rejected", callback_data: "admin_rejected_payments" }],
            [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
          ]
        }
      });
      return;
    }

    // Format approved payments for admin view
    const paymentsText = await Promise.all(
      approvedPayments.map(payment => formatPaymentForDisplay(payment, true))
    );

    const totalValue = approvedPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0);

    const message = `‚úÖ **APPROVED PAYMENTS - ADMIN VIEW**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${paymentsText.join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìä SUMMARY:**
‚Ä¢ **Total Payments:** ${approvedPayments.length}
‚Ä¢ **Total Value:** $${totalValue.toFixed(2)} USDT
‚Ä¢ **Status:** All payments successfully processed
‚Ä¢ **Shares Allocated:** Yes (automatic on approval)

**üîß ADMIN ACTIONS:**
‚Ä¢ All payments have been processed and shares allocated
‚Ä¢ Users have been notified of approvals
‚Ä¢ Commission payments have been distributed`;

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è≥ View Pending", callback_data: "admin_payments" }],
          [{ text: "‚ùå View Rejected", callback_data: "admin_rejected_payments" }],
          [{ text: "üîÑ Refresh", callback_data: "admin_approved_payments" }],
          [{ text: "üìä System Stats", callback_data: "admin_stats" }],
          [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
        ]
      }
    });

  } catch (error) {
    console.error('Admin approved payments error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading approved payments**\n\nPlease try again.');
  }
}

async function handleAdminRejectedPayments(ctx) {
  console.log('üîß [DEBUG] handleAdminRejectedPayments function called');
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    console.log('üîß [DEBUG] Access denied for user:', user.username);
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  try {
    // Get rejected payments
    const rejectedPayments = await getAdminPaymentsByStatus('rejected', 15);

    if (rejectedPayments.length === 0) {
      await ctx.replyWithMarkdown(`‚ùå **REJECTED PAYMENTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**No rejected payments found**

Great! There are currently no rejected payments in the system. This indicates:

**‚úÖ POSITIVE INDICATORS:**
‚Ä¢ Users are submitting valid payments
‚Ä¢ Payment instructions are clear
‚Ä¢ Transaction verification is working well
‚Ä¢ User education is effective

**üìä ADMIN INSIGHTS:**
‚Ä¢ High payment success rate
‚Ä¢ Good user compliance
‚Ä¢ Effective payment process

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚è≥ View Pending", callback_data: "admin_payments" }],
            [{ text: "‚úÖ View Approved", callback_data: "admin_approved_payments" }],
            [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
          ]
        }
      });
      return;
    }

    // Format rejected payments for admin view
    const paymentsText = await Promise.all(
      rejectedPayments.map(payment => formatPaymentForDisplay(payment, true))
    );

    const totalValue = rejectedPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0);

    const message = `‚ùå **REJECTED PAYMENTS - ADMIN VIEW**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${paymentsText.join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìä REJECTION SUMMARY:**
‚Ä¢ **Total Rejected:** ${rejectedPayments.length}
‚Ä¢ **Total Value:** $${totalValue.toFixed(2)} USDT
‚Ä¢ **Status:** Users notified with reasons
‚Ä¢ **Follow-up:** Users can resubmit corrected payments

**üîß ADMIN NOTES:**
‚Ä¢ Review rejection patterns for process improvements
‚Ä¢ Consider updating payment instructions if needed
‚Ä¢ Monitor for repeat issues from same users`;

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è≥ View Pending", callback_data: "admin_payments" }],
          [{ text: "‚úÖ View Approved", callback_data: "admin_approved_payments" }],
          [{ text: "üîÑ Refresh", callback_data: "admin_rejected_payments" }],
          [{ text: "üìä System Stats", callback_data: "admin_stats" }],
          [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
        ]
      }
    });

  } catch (error) {
    console.error('Admin rejected payments error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading rejected payments**\n\nPlease try again.');
  }
}

// Admin Payments Handler
async function handleAdminPayments(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  try {
    console.log('üîç [ADMIN] Fetching pending payments...');

    // Get pending payments with user info
    const { data: pendingPayments, error } = await db.client
      .from('crypto_payment_transactions')
      .select(`
        *,
        users!inner(email, full_name)
      `)
      .eq('status', 'pending')
      .order('created_at', { ascending: false })
      .limit(5);

    console.log('üîç [ADMIN] Pending payments query result:', {
      count: pendingPayments?.length || 0,
      error: error?.message || 'none'
    });

    // Also check all payment statuses for debugging
    const { data: allPayments, error: allError } = await db.client
      .from('crypto_payment_transactions')
      .select('id, status, created_at')
      .order('created_at', { ascending: false })
      .limit(10);

    console.log('üîç [ADMIN] Recent payment statuses:', allPayments?.map(p => ({
      id: p.id.substring(0, 8),
      status: p.status,
      created: new Date(p.created_at).toLocaleString()
    })) || 'none');

    if (error) {
      console.error('Error fetching pending payments:', error);
      await ctx.replyWithMarkdown('‚ùå **Error loading payments**\n\nPlease try again.');
      return;
    }

    if (!pendingPayments || pendingPayments.length === 0) {
      await ctx.replyWithMarkdown(`üí≥ **PAYMENT APPROVALS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ **No pending payments**

All payments have been processed!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ View Approved", callback_data: "admin_approved_payments" }],
            [{ text: "‚ùå View Rejected", callback_data: "admin_rejected_payments" }],
            [{ text: "üîÑ Refresh", callback_data: "admin_payments" }],
            [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
          ]
        }
      });
      return;
    }

    // Show pending payments
    const paymentsText = pendingPayments.map((payment, index) => {
      const userInfo = payment.users;
      const paymentDate = new Date(payment.created_at);
      const timeAgo = Math.floor((Date.now() - paymentDate.getTime()) / (1000 * 60 * 60));

      // Check if this is a bank transfer payment
      const isBankTransfer = payment.network === 'BANK_TRANSFER' || payment.currency === 'ZAR';
      let paymentMethodDisplay = '';

      if (isBankTransfer) {
        // Parse ZAR amount from transaction_hash field (format: ZAR:amount|RATE:rate|FEE:10%)
        let zarAmount = 'N/A';
        if (payment.transaction_hash && payment.transaction_hash.includes('ZAR:')) {
          const zarMatch = payment.transaction_hash.match(/ZAR:([0-9.]+)/);
          if (zarMatch) {
            zarAmount = parseFloat(zarMatch[1]);
          }
        }
        paymentMethodDisplay = `üè¶ Bank Transfer: R${typeof zarAmount === 'number' ? zarAmount.toFixed(2) : zarAmount}`;
      } else {
        paymentMethodDisplay = `üåê ${payment.network.toUpperCase()}`;
      }

      return `${index + 1}. **${userInfo.full_name}**
üí∞ Amount: $${payment.amount}
${paymentMethodDisplay}
üìÖ ${timeAgo}h ago
üÜî ID: ${payment.id}`;
    }).join('\n\n');

    await ctx.replyWithMarkdown(`üí≥ **PENDING PAYMENTS** (${pendingPayments.length})

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${paymentsText}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Click a payment to review:**`, {
      reply_markup: {
        inline_keyboard: [
          ...pendingPayments.map((payment, index) => {
            const isBankTransfer = payment.network === 'BANK_TRANSFER' || payment.currency === 'ZAR';
            const paymentType = isBankTransfer ? 'üè¶' : 'üíé';
            return [
              { text: `${paymentType} Review Payment ${index + 1} ($${payment.amount})`, callback_data: `review_payment_${payment.id}` }
            ];
          }),
          [{ text: "üîÑ Refresh", callback_data: "admin_payments" }],
          [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
        ]
      }
    });

  } catch (error) {
    console.error('Admin payments error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading payment data**\n\nPlease try again.');
  }
}

// Admin Users Handler
async function handleAdminUsers(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  const usersMessage = `üë• **USER MANAGEMENT**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**USER ADMINISTRATION TOOLS:**
‚Ä¢ View all registered users
‚Ä¢ Check user investment history
‚Ä¢ Manage user accounts
‚Ä¢ Monitor user activity
‚Ä¢ Handle user support requests

**COMING SOON:**
‚Ä¢ User search functionality
‚Ä¢ Account status management
‚Ä¢ Investment analytics per user
‚Ä¢ User communication tools

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(usersMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîç Search Users", callback_data: "admin_search_users" }],
        [{ text: "üìä User Statistics", callback_data: "admin_user_stats" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// Admin Analytics Handler
async function handleAdminAnalytics(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  const analyticsMessage = `üìä **SYSTEM ANALYTICS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**PERFORMANCE METRICS:**
‚Ä¢ Total users registered
‚Ä¢ Total investments processed
‚Ä¢ Commission payouts
‚Ä¢ System performance data

**FINANCIAL ANALYTICS:**
‚Ä¢ Revenue tracking
‚Ä¢ Investment flow analysis
‚Ä¢ Commission distribution
‚Ä¢ Phase progression metrics

**COMING SOON:**
‚Ä¢ Real-time dashboard
‚Ä¢ Advanced reporting
‚Ä¢ Export capabilities
‚Ä¢ Trend analysis

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(analyticsMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìà View Reports", callback_data: "admin_reports" }],
        [{ text: "üí∞ Financial Summary", callback_data: "admin_financial" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// Admin Commissions Handler
async function handleAdminCommissions(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  const commissionsMessage = `üí∞ **COMMISSION REQUESTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**COMMISSION MANAGEMENT:**
‚Ä¢ Review withdrawal requests
‚Ä¢ Process commission payments
‚Ä¢ Monitor referral activity
‚Ä¢ Track commission balances

**WITHDRAWAL PROCESSING:**
‚Ä¢ Pending withdrawal requests
‚Ä¢ Approved payouts
‚Ä¢ Commission calculations
‚Ä¢ Network fee management

**COMING SOON:**
‚Ä¢ Automated processing
‚Ä¢ Bulk approval tools
‚Ä¢ Commission analytics
‚Ä¢ Payment scheduling

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(commissionsMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚è≥ Pending Withdrawals", callback_data: "admin_pending_withdrawals" }],
        [{ text: "‚úÖ Approved Payouts", callback_data: "admin_approved_withdrawals" }],
        [{ text: "üìä Commission Stats", callback_data: "admin_commission_stats" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// Admin Logs Handler
async function handleAdminLogs(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  const logsMessage = `üìã **AUDIT LOGS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**SYSTEM ACTIVITY TRACKING:**
‚Ä¢ Admin actions and approvals
‚Ä¢ User registration and activity
‚Ä¢ Payment processing events
‚Ä¢ Security and access logs

**LOG CATEGORIES:**
‚Ä¢ Authentication events
‚Ä¢ Payment transactions
‚Ä¢ Admin operations
‚Ä¢ System errors and warnings

**COMING SOON:**
‚Ä¢ Real-time log monitoring
‚Ä¢ Advanced filtering
‚Ä¢ Export functionality
‚Ä¢ Alert notifications

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(logsMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîç View Recent Logs", callback_data: "admin_recent_logs" }],
        [{ text: "‚ö†Ô∏è Security Events", callback_data: "admin_security_logs" }],
        [{ text: "üí≥ Payment Logs", callback_data: "admin_payment_logs" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// Admin Broadcast Handler
async function handleAdminBroadcast(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  const broadcastMessage = `üì¢ **BROADCAST MESSAGE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**MASS COMMUNICATION TOOLS:**
‚Ä¢ Send announcements to all users
‚Ä¢ Target specific user groups
‚Ä¢ Schedule message delivery
‚Ä¢ Track message engagement

**COMING SOON:**
‚Ä¢ Message templates
‚Ä¢ User segmentation
‚Ä¢ Delivery scheduling
‚Ä¢ Analytics tracking

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(broadcastMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìù Compose Message", callback_data: "admin_compose_broadcast" }],
        [{ text: "üìä Message History", callback_data: "admin_broadcast_history" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// Admin Settings Handler
async function handleAdminSettings(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  const settingsMessage = `‚öôÔ∏è **SYSTEM SETTINGS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**CONFIGURATION OPTIONS:**
‚Ä¢ Phase management and pricing
‚Ä¢ Commission rate settings
‚Ä¢ Payment method configuration
‚Ä¢ System maintenance mode

**COMING SOON:**
‚Ä¢ Advanced configuration
‚Ä¢ Backup and restore
‚Ä¢ Performance tuning
‚Ä¢ Security settings

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(settingsMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üí∞ Phase Settings", callback_data: "admin_phase_settings" }],
        [{ text: "üí≥ Payment Config", callback_data: "admin_payment_config" }],
        [{ text: "üîß System Config", callback_data: "admin_system_config" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// Admin User Sponsors Handler
async function handleAdminUserSponsors(ctx) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.replyWithMarkdown('‚ùå **ACCESS DENIED**');
    return;
  }

  const sponsorsMessage = `ü§ù **USER SPONSORS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**REFERRAL MANAGEMENT:**
‚Ä¢ View user sponsor relationships
‚Ä¢ Monitor referral activity
‚Ä¢ Manage commission structures
‚Ä¢ Track referral performance

**COMING SOON:**
‚Ä¢ Sponsor assignment tools
‚Ä¢ Referral analytics
‚Ä¢ Commission calculations
‚Ä¢ Performance reports

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  await ctx.replyWithMarkdown(sponsorsMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üë• View Relationships", callback_data: "admin_view_sponsors" }],
        [{ text: "üìä Referral Stats", callback_data: "admin_referral_stats" }],
        [{ text: "üîô Back to Admin Panel", callback_data: "admin_panel" }]
      ]
    }
  });
}

// PENDING PAYMENT HANDLERS
async function handleContinuePayment(ctx, callbackData) {
  const paymentId = callbackData.split('_')[2];

  try {
    // Get the pending payment details
    const { data: payment, error } = await db.client
      .from('crypto_payment_transactions')
      .select('*')
      .eq('id', paymentId)
      .eq('status', 'pending')
      .single();

    if (error || !payment) {
      await ctx.replyWithMarkdown('‚ùå **Payment not found or no longer pending.**\n\nIt may have been processed or cancelled.');
      return;
    }

    // Get wallet address from payment record or database
    let walletAddress = payment.receiver_wallet;

    if (!walletAddress) {
      // Extract network from payment.network (e.g., "USDT-TRC20" -> "TRON")
      let networkForWallet = 'TRON'; // Default fallback
      if (payment.network) {
        if (payment.network.includes('ERC20')) networkForWallet = 'ETH';
        else if (payment.network.includes('BEP20')) networkForWallet = 'BSC';
        else if (payment.network.includes('Polygon')) networkForWallet = 'POL';
        else if (payment.network.includes('TRC20')) networkForWallet = 'TRON';
      }

      // Fallback: Get from company_wallets table
      const { data: companyWallet, error: walletError } = await db.client
        .from('company_wallets')
        .select('wallet_address')
        .eq('network', networkForWallet)
        .eq('currency', 'USDT')
        .eq('is_active', true)
        .single();

      if (walletError || !companyWallet) {
        console.error('Error getting company wallet for continue payment:', walletError);
        await ctx.reply('‚ùå Error: Company wallet not configured. Please contact support.');
        return;
      }

      walletAddress = companyWallet.wallet_address;
    }

    const paymentDate = new Date(payment.created_at);
    const timeAgo = Math.floor((new Date() - paymentDate) / (1000 * 60 * 60));
    const displayTime = timeAgo < 24 ? `${timeAgo} hours ago` : `${Math.floor(timeAgo/24)} days ago`;

    const continueMessage = `üí≥ **CONTINUE PENDING PAYMENT**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã PAYMENT DETAILS:**

üí∞ **Amount:** $${payment.amount} USDT
üåê **Network:** ${payment.network.toUpperCase()}
üìÖ **Created:** ${displayTime}
‚è≥ **Status:** Waiting for your payment

**üè¶ SEND PAYMENT TO:**
\`${walletAddress}\`

**üì± NEXT STEPS:**
1. Send exactly $${payment.amount} USDT to the address above
2. Take a screenshot of your transaction
3. Upload the screenshot using the button below
4. Wait for admin approval

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ Use ${payment.network.toUpperCase()} network only
‚Ä¢ Send exact amount: $${payment.amount} USDT
‚Ä¢ Keep your transaction screenshot ready`;

    await ctx.replyWithMarkdown(continueMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üí≥ Submit Payment Proof", callback_data: `upload_proof_${paymentId}` }],
          [{ text: "üìä Check Payment Status", callback_data: "view_portfolio" }],
          [{ text: "üîô Back to Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error in handleContinuePayment:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading payment details.**\n\nPlease try again or contact support.');
  }
}

async function handleCancelPayment(ctx, callbackData) {
  const paymentId = callbackData.split('_')[2];

  // Get payment details for confirmation
  const { data: payment, error } = await db.client
    .from('crypto_payment_transactions')
    .select('amount, network, created_at')
    .eq('id', paymentId)
    .single();

  if (error || !payment) {
    await ctx.replyWithMarkdown('‚ùå **Payment not found or already processed.**');
    return;
  }

  const paymentDate = new Date(payment.created_at);
  const daysDiff = Math.floor((new Date() - paymentDate) / (1000 * 60 * 60 * 24));
  const isOld = daysDiff >= 1;

  const confirmMessage = `üóëÔ∏è **DELETE PENDING PAYMENT**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üö® **CONFIRM DELETION**

**Payment Details:**
üí∞ Amount: $${payment.amount}
üåê Network: ${payment.network.toUpperCase()}
üìÖ Created: ${paymentDate.toLocaleDateString()}

**‚ö†Ô∏è IMPORTANT:**
${isOld ?
  '‚Ä¢ This payment is old - safe to delete if you haven\'t sent crypto yet' :
  '‚Ä¢ Only delete if you haven\'t sent the crypto payment yet'}
‚Ä¢ If you already sent payment, contact support instead
‚Ä¢ This action cannot be undone
‚Ä¢ You can create a new purchase after deletion

**üîß ARE YOU SURE?**`;

  await ctx.replyWithMarkdown(confirmMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üóëÔ∏è Yes, Delete Payment", callback_data: `confirm_cancel_${paymentId}` }],
        [{ text: "‚ùå No, Keep Payment", callback_data: "menu_purchase_shares" }],
        [{ text: "üìû Contact Support First", callback_data: "menu_help" }]
      ]
    }
  });
}

async function handleConfirmCancel(ctx, callbackData) {
  const paymentId = callbackData.split('_')[2];

  try {
    // Update payment status to cancelled
    const { data: cancelledPayment, error: cancelError } = await db.client
      .from('crypto_payment_transactions')
      .update({
        status: 'cancelled',
        admin_notes: 'Cancelled by user request',
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId)
      .eq('status', 'pending') // Only cancel if still pending
      .select()
      .single();

    if (cancelError || !cancelledPayment) {
      await ctx.replyWithMarkdown(`‚ùå **CANCELLATION FAILED**

Unable to cancel payment. It may have already been processed or doesn't exist.

Please contact support if you need assistance.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìû Contact Support", callback_data: "menu_help" }],
            [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
          ]
        }
      });
      return;
    }

    // Log the cancellation
    await logAdminAction(
      ctx.from.id,
      ctx.from.username || ctx.from.first_name,
      'CANCEL_PAYMENT',
      'user_action',
      paymentId,
      { amount: cancelledPayment.amount, network: cancelledPayment.network }
    );

    const successMessage = `‚úÖ **PAYMENT DELETED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üóëÔ∏è **Your pending payment has been deleted:**

üí∞ **Amount:** $${cancelledPayment.amount}
üåê **Network:** ${cancelledPayment.network}
‚è∞ **Cancelled:** ${new Date().toLocaleDateString()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ **You can now make new purchases!**

**‚ö†Ô∏è IMPORTANT:**
If you already sent payment to our wallet, please contact support immediately with your transaction details.`;

    await ctx.replyWithMarkdown(successMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üõí Purchase Shares", callback_data: "menu_purchase_shares" }],
          [{ text: "üìû Contact Support", callback_data: "menu_help" }],
          [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error cancelling payment:', error);
    await ctx.replyWithMarkdown('‚ùå **Error cancelling payment**\n\nPlease try again or contact support.');
  }
}

// Handle confirm purchase
async function handleConfirmPurchase(ctx, callbackData) {
  const amount = parseFloat(callbackData.split('_')[2]);
  const user = ctx.from;

  try {
    // Get current phase and share price
    const { data: currentPhase, error: phaseError } = await db.client
      .from('investment_phases')
      .select('*')
      .eq('is_active', true)
      .single();

    if (phaseError || !currentPhase) {
      await ctx.reply('‚ùå Error: No active phase found. Please contact support.');
      return;
    }

    const sharePrice = parseFloat(currentPhase.price_per_share);
    const sharesAmount = Math.floor(amount / sharePrice);
    const totalCost = sharesAmount * sharePrice;

    // Get or create telegram user
    let { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('*')
      .eq('username', user.username)
      .single();

    if (telegramError && telegramError.code !== 'PGRST116') {
      console.error('Error fetching telegram user:', telegramError);
      await ctx.reply('‚ùå Database error. Please try again.');
      return;
    }

    if (!telegramUser) {
      // Create new telegram user
      const { data: newUser, error: createError } = await db.client
        .from('telegram_users')
        .insert({
          telegram_id: user.id,
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name || null,
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (createError) {
        console.error('Error creating telegram user:', createError);
        await ctx.reply('‚ùå Error creating user account. Please try again.');
        return;
      }
      telegramUser = newUser;
    }

    // Check if bank transfer payment method is selected
    const selectedPaymentMethod = ctx.session.selectedPaymentMethod || 'usdt';

    console.log(`üîç [DEBUG] handleConfirmPurchase - selectedPaymentMethod: ${selectedPaymentMethod}`);
    console.log(`üîç [DEBUG] handleConfirmPurchase - session:`, ctx.session);

    if (selectedPaymentMethod === 'bank_transfer') {
      console.log(`üîç [DEBUG] handleConfirmPurchase - Processing bank transfer for amount: ${totalCost}`);
      // Handle bank transfer payment
      await handleBankTransferConfirmation(ctx, telegramUser, amount, totalCost, sharesAmount, currentPhase);
      return;
    }

    // Get selected network from session or default to TRON (for crypto payments)
    const selectedNetwork = ctx.session.selectedNetwork || 'TRON';

    // Get company wallet address from database for selected network
    const { data: companyWallet, error: walletError } = await db.client
      .from('company_wallets')
      .select('wallet_address')
      .eq('network', selectedNetwork)
      .eq('currency', 'USDT')
      .eq('is_active', true)
      .single();

    if (walletError || !companyWallet) {
      console.error(`Error getting company wallet for ${selectedNetwork}:`, walletError);
      await ctx.reply(`‚ùå Error: ${selectedNetwork} USDT wallet not configured. Please contact support.`);
      return;
    }

    // Map network to display format
    const networkDisplayMap = {
      'ETH': 'USDT-ERC20',
      'BSC': 'USDT-BEP20',
      'POL': 'USDT-Polygon',
      'TRON': 'USDT-TRC20'
    };

    const networkDisplay = networkDisplayMap[selectedNetwork] || `USDT-${selectedNetwork}`;

    // Create payment transaction
    const { data: payment, error: paymentError } = await db.client
      .from('crypto_payment_transactions')
      .insert({
        user_id: telegramUser.user_id || null, // Link to main users table
        amount: totalCost,
        currency: 'USDT',
        network: networkDisplay,
        sender_wallet: '', // Will be filled when user uploads proof
        receiver_wallet: companyWallet.wallet_address, // From database
        status: 'pending',
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (paymentError) {
      console.error('Error creating payment:', paymentError);
      await ctx.reply('‚ùå Error creating payment. Please try again.');
      return;
    }

    // Show payment instructions
    await showPaymentInstructions(ctx, payment, currentPhase);

    // Notify admin about new payment received
    await sendAdminNotification('payment_received', {
      username: user.username || user.first_name || 'Unknown',
      amount: totalCost,
      shares: Math.floor(totalCost / parseFloat(currentPhase.price_per_share)),
      user_id: telegramUser.user_id,
      payment_id: payment.id
    }, 'medium'); // Medium priority for new payments

  } catch (error) {
    console.error('Error confirming purchase:', error);
    await ctx.reply('‚ùå Error processing purchase. Please try again.');
  }
}

// Show payment instructions
async function showPaymentInstructions(ctx, payment, phase) {
  // Calculate shares from payment amount and phase price
  const sharePrice = parseFloat(phase.price_per_share);
  const sharesAmount = Math.floor(payment.amount / sharePrice);

  // Get network information for display
  const networkInfo = getNetworkDisplayInfo(payment.network);

  const paymentMessage = `üí≥ **PAYMENT INSTRUCTIONS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã PURCHASE DETAILS:**
‚Ä¢ Amount: ${formatCurrency(payment.amount)}
‚Ä¢ Shares: ${sharesAmount.toLocaleString()}
‚Ä¢ Phase: ${phase.phase_name}
‚Ä¢ Share Price: ${formatCurrency(sharePrice)}
‚Ä¢ Payment ID: #${payment.id.substring(0, 8)}

**üí∞ PAYMENT INFORMATION:**
‚Ä¢ Network: ${payment.network} (${networkInfo.fullName})
‚Ä¢ Wallet Address: \`${payment.receiver_wallet}\`
‚Ä¢ Amount to Send: **$${payment.amount} USDT**

**‚ö†Ô∏è IMPORTANT INSTRUCTIONS:**
1. Send EXACTLY $${payment.amount} USDT
2. Use ONLY ${networkInfo.technical} network (${networkInfo.fullName})
3. Take screenshot of transaction
4. Upload proof within 24 hours
5. Wait for admin approval

**üö® WARNING:**
‚Ä¢ Wrong network = Lost funds
‚Ä¢ Wrong amount = Payment rejected
‚Ä¢ No proof = No shares allocated

**‚è∞ Payment expires in 24 hours**`;

  await ctx.replyWithMarkdown(paymentMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üí≥ Submit Payment Proof", callback_data: `upload_proof_${payment.id}` }],
        [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
        [{ text: "üè† Main Menu", callback_data: "main_menu" }]
      ]
    }
  });
}

// Handle upload proof callback
async function handleUploadProof(ctx, callbackData) {
  const paymentId = callbackData.replace('upload_proof_', '');
  const user = ctx.from;

  try {
    // Verify payment exists and belongs to user
    const { data: payment, error: paymentError } = await db.client
      .from('crypto_payment_transactions')
      .select('*')
      .eq('id', paymentId)
      .single();

    if (paymentError || !payment) {
      await ctx.answerCbQuery('‚ùå Payment not found');
      return;
    }

    // Set user state to collect wallet address first
    await setUserState(user.id, 'upload_proof_wallet', { paymentId });

    const walletMessage = `üí≥ **PAYMENT PROOF SUBMISSION - STEP 1 OF 3**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã PAYMENT DETAILS:**
‚Ä¢ Payment ID: #${paymentId.substring(0, 8)}
‚Ä¢ Amount: ${formatCurrency(payment.amount)}
‚Ä¢ Network: ${payment.network}

**üìç STEP 1: YOUR SENDER WALLET ADDRESS**

Please type the wallet address you sent the payment FROM:

‚ö†Ô∏è **Important:** This is YOUR wallet address (not our receiving address)

**Next Steps:** Wallet Address ‚Üí Transaction Hash ‚Üí Screenshot Upload`;

    await ctx.replyWithMarkdown(walletMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå Cancel Upload", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling upload proof:', error);
    await ctx.answerCbQuery('‚ùå Error processing request');
  }
}

// Payment query helper functions
async function getUserPaymentsByStatus(userId, status, limit = 10) {
  try {
    const { data: payments, error } = await db.client
      .from('crypto_payment_transactions')
      .select(`
        id,
        amount,
        status,
        created_at,
        approved_at,
        rejected_at,
        rejection_reason,
        transaction_hash,
        sender_wallet,
        screenshot_url
      `)
      .eq('user_id', userId)
      .eq('status', status)
      .order('created_at', { ascending: false })
      .limit(limit);

    if (error) {
      console.error(`Error fetching ${status} payments for user ${userId}:`, error);
      return [];
    }

    return payments || [];
  } catch (error) {
    console.error(`Error in getUserPaymentsByStatus:`, error);
    return [];
  }
}

async function getAdminPaymentsByStatus(status, limit = 20) {
  try {
    const { data: payments, error } = await db.client
      .from('crypto_payment_transactions')
      .select(`
        id,
        amount,
        status,
        created_at,
        approved_at,
        rejected_at,
        rejection_reason,
        transaction_hash,
        sender_wallet,
        users!inner(username, full_name, email)
      `)
      .eq('status', status)
      .order('created_at', { ascending: false })
      .limit(limit);

    if (error) {
      console.error(`Error fetching ${status} payments for admin:`, error);
      return [];
    }

    return payments || [];
  } catch (error) {
    console.error(`Error in getAdminPaymentsByStatus:`, error);
    return [];
  }
}

async function formatPaymentForDisplay(payment, isAdmin = false) {
  const createdDate = new Date(payment.created_at).toLocaleDateString();
  const createdTime = new Date(payment.created_at).toLocaleTimeString();

  let statusInfo = '';
  if (payment.status === 'approved' && payment.approved_at) {
    const approvedDate = new Date(payment.approved_at).toLocaleDateString();
    statusInfo = `‚úÖ Approved on ${approvedDate}`;
  } else if (payment.status === 'rejected' && payment.rejected_at) {
    const rejectedDate = new Date(payment.rejected_at).toLocaleDateString();
    statusInfo = `‚ùå Rejected on ${rejectedDate}`;
    if (payment.rejection_reason) {
      statusInfo += `\n**Reason:** ${payment.rejection_reason}`;
    }
  } else if (payment.status === 'pending') {
    statusInfo = `‚è≥ Pending approval`;
  }

  let paymentInfo = `**Payment #${payment.id.substring(0, 8)}**
üí∞ **Amount:** $${payment.amount} USDT
üìÖ **Submitted:** ${createdDate} at ${createdTime}
${statusInfo}`;

  if (isAdmin && payment.users) {
    paymentInfo += `\nüë§ **User:** ${payment.users.full_name || payment.users.username}`;
  }

  if (payment.transaction_hash) {
    paymentInfo += `\nüîó **TX Hash:** \`${payment.transaction_hash.substring(0, 20)}...\``;
  }

  return paymentInfo;
}

// Admin audit logging function
async function logAdminAction(adminTelegramId, adminUsername, action, targetType, targetId, details = {}) {
  try {
    // Defensive programming: truncate values to prevent database errors
    const truncatedAction = String(action || '').substring(0, 255);
    const truncatedTargetType = String(targetType || '').substring(0, 50);
    const truncatedTargetId = String(targetId || '').substring(0, 500);
    const truncatedUsername = String(adminUsername || '').substring(0, 255);

    // Ensure details is a valid object and not too large
    let safeDetails = {};
    try {
      if (details && typeof details === 'object') {
        const detailsString = JSON.stringify(details);
        if (detailsString.length > 10000) {
          // If details are too large, truncate or summarize
          safeDetails = {
            truncated: true,
            original_size: detailsString.length,
            summary: String(detailsString).substring(0, 1000) + '...'
          };
        } else {
          safeDetails = details;
        }
      }
    } catch (detailsError) {
      safeDetails = { error: 'Failed to serialize details', type: typeof details };
    }

    // Handle system actions (when adminTelegramId is null)
    const isSystemAction = !adminTelegramId || adminUsername === 'SYSTEM';
    const finalAdminTelegramId = isSystemAction ? 0 : adminTelegramId; // Use 0 for system actions

    const { error } = await db.client
      .from('admin_audit_logs')
      .insert([{
        admin_telegram_id: finalAdminTelegramId,
        admin_username: truncatedUsername,
        action: truncatedAction,
        target_type: truncatedTargetType,
        target_id: truncatedTargetId,
        details: safeDetails
      }]);

    if (error) {
      console.error('Audit log error:', error);
      // If still failing due to column size, try with minimal data
      if (error.message && error.message.includes('value too long')) {
        console.log('üîß Retrying with minimal audit log data...');
        await db.client
          .from('admin_audit_logs')
          .insert([{
            admin_telegram_id: finalAdminTelegramId,
            admin_username: truncatedUsername.substring(0, 50),
            action: truncatedAction.substring(0, 50),
            target_type: 'system',
            target_id: 'truncated',
            details: { error: 'Original data too long', action: truncatedAction }
          }]);
      }
    } else {
      const actionType = isSystemAction ? 'System action' : 'Admin action';
      console.log(`üìã ${actionType} logged: ${truncatedAction} by ${truncatedUsername} on ${truncatedTargetType} ${truncatedTargetId}`);
    }
  } catch (error) {
    console.error('Audit logging failed:', error);
  }
}

// ADMIN PAYMENT REVIEW HANDLERS
async function handleReviewPayment(ctx, callbackData) {
  const user = ctx.from;

  // Check admin authorization
  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  const paymentId = callbackData.replace('review_payment_', '');

  try {
    // Get payment details with user info
    const { data: payment, error: fetchError } = await db.client
      .from('crypto_payment_transactions')
      .select(`
        *,
        users!inner(username, full_name)
      `)
      .eq('id', paymentId)
      .single();

    if (fetchError || !payment) {
      await ctx.answerCbQuery('‚ùå Payment not found');
      return;
    }

    // Check if this is a bank transfer payment
    const isBankTransfer = payment.network === 'BANK_TRANSFER' || payment.currency === 'ZAR';

    let reviewMessage;

    if (isBankTransfer) {
      // Parse bank transfer details from transaction_hash field
      let zarAmount = 'N/A';
      let exchangeRate = 18;
      if (payment.transaction_hash && payment.transaction_hash.includes('ZAR:')) {
        const zarMatch = payment.transaction_hash.match(/ZAR:([0-9.]+)/);
        const rateMatch = payment.transaction_hash.match(/RATE:([0-9.]+)/);
        if (zarMatch) zarAmount = parseFloat(zarMatch[1]);
        if (rateMatch) exchangeRate = parseFloat(rateMatch[1]);
      }

      reviewMessage = `üè¶ **BANK TRANSFER REVIEW**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ PAYMENT DETAILS:**
‚Ä¢ **ID:** #${paymentId.substring(0, 8)}
‚Ä¢ **USD Amount:** $${payment.amount}
‚Ä¢ **ZAR Amount:** R${typeof zarAmount === 'number' ? zarAmount.toFixed(2) : zarAmount}
‚Ä¢ **Exchange Rate:** R${exchangeRate} = $1 USD
‚Ä¢ **Payment Method:** Bank Transfer (FNB)
‚Ä¢ **Status:** ${payment.status}

**üë§ USER DETAILS:**
‚Ä¢ **Name:** ${payment.users.full_name || 'N/A'}
‚Ä¢ **Username:** @${payment.users.username || 'N/A'}

**üè¶ BANK TRANSFER INFO:**
‚Ä¢ **Bank:** First National Bank (FNB)
‚Ä¢ **Account:** 63154323041
‚Ä¢ **Proof:** ${payment.sender_wallet ? '‚úÖ Uploaded' : '‚ùå Not uploaded'}
‚Ä¢ **Reference:** Payment #${paymentId.substring(0, 8)}

**üìÖ TIMESTAMPS:**
‚Ä¢ **Created:** ${new Date(payment.created_at).toLocaleString()}
‚Ä¢ **Updated:** ${new Date(payment.updated_at).toLocaleString()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
    } else {
      // Safely format wallet address and transaction hash to avoid Markdown parsing errors
      const safeWalletAddress = payment.sender_wallet
        ? `\`${payment.sender_wallet}\``
        : 'Not provided';

      const safeTransactionHash = payment.transaction_hash
        ? `\`${payment.transaction_hash}\``
        : 'Not provided';

      reviewMessage = `üîç **CRYPTO PAYMENT REVIEW**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ PAYMENT DETAILS:**
‚Ä¢ **ID:** #${paymentId.substring(0, 8)}
‚Ä¢ **Amount:** $${payment.amount} USDT
‚Ä¢ **Network:** ${payment.network}
‚Ä¢ **Status:** ${payment.status}

**üë§ USER DETAILS:**
‚Ä¢ **Name:** ${payment.users.full_name || 'N/A'}
‚Ä¢ **Username:** @${payment.users.username || 'N/A'}

**üìã TRANSACTION INFO:**
‚Ä¢ **Wallet Address:** ${safeWalletAddress}
‚Ä¢ **Transaction Hash:** ${safeTransactionHash}
‚Ä¢ **Screenshot:** ${payment.screenshot_url ? '‚úÖ Uploaded' : '‚ùå Not uploaded'}

**üìÖ TIMESTAMPS:**
‚Ä¢ **Created:** ${new Date(payment.created_at).toLocaleString()}
‚Ä¢ **Updated:** ${new Date(payment.updated_at).toLocaleString()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
    }

    const keyboard = [
      [
        { text: "‚úÖ Approve Payment", callback_data: `approve_payment_${paymentId}` },
        { text: "‚ùå Reject Payment", callback_data: `reject_payment_${paymentId}` }
      ]
    ];

    // Add proof viewing button based on payment type
    if (isBankTransfer && payment.sender_wallet) {
      keyboard.unshift([
        { text: "üè¶ View Bank Transfer Proof", callback_data: `view_bank_proof_${paymentId}` }
      ]);
    } else if (!isBankTransfer && payment.screenshot_url) {
      keyboard.unshift([
        { text: "üì∑ View Screenshot", callback_data: `view_screenshot_${paymentId}` }
      ]);
    }

    keyboard.push([
      { text: "üîÑ Refresh", callback_data: `review_payment_${paymentId}` },
      { text: "üîô Back to Payments", callback_data: "admin_payments" }
    ]);

    try {
      await ctx.replyWithMarkdown(reviewMessage, {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (markdownError) {
      console.error('‚ùå Markdown parsing error in payment review:', markdownError);
      console.error('‚ùå Problematic message content:', reviewMessage);

      // Fallback: Send without markdown formatting
      const plainMessage = reviewMessage.replace(/\*\*/g, '').replace(/`/g, '');
      await ctx.reply(plainMessage, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }

  } catch (error) {
    console.error('Review payment error:', error);
    await ctx.answerCbQuery('‚ùå Error loading payment details');
  }
}

async function handleApprovePayment(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  const paymentId = callbackData.replace('approve_payment_', '');

  try {
    // Update payment status to approved
    const { data: updatedPayment, error: updateError } = await db.client
      .from('crypto_payment_transactions')
      .update({
        status: 'approved',
        approved_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId)
      .select('*, users!inner(username, full_name)')
      .single();

    if (updateError) {
      console.error('Payment approval error:', updateError);
      await ctx.answerCbQuery('‚ùå Error approving payment');
      return;
    }

    // Get current phase to calculate shares correctly
    const { data: currentPhase, error: phaseError } = await db.client
      .from('investment_phases')
      .select('*')
      .eq('is_active', true)
      .single();

    if (phaseError || !currentPhase) {
      console.error('Error getting current phase:', phaseError);
      await ctx.reply('‚ùå Error: No active phase found. Cannot approve payment.');
      return;
    }

    // Calculate shares based on current phase price
    const amount = parseFloat(updatedPayment.amount);
    const sharePrice = parseFloat(currentPhase.price_per_share);
    const sharesAmount = Math.floor(amount / sharePrice); // Correct calculation!

    // Create share purchase record
    console.log('üí∞ Creating share purchase record for approved payment...');

    try {

      const investmentData = {
        user_id: updatedPayment.user_id,
        package_id: null, // No specific package ID for direct payments
        package_name: `${currentPhase.phase_name} Purchase`,
        shares_purchased: sharesAmount,
        total_amount: amount,
        commission_used: 0, // No commission used for direct payments
        remaining_payment: amount, // Full amount paid directly
        payment_method: updatedPayment.network === 'BANK_TRANSFER' ? 'Bank Transfer (ZAR)' : `${updatedPayment.network} ${updatedPayment.currency || 'USDT'}`,
        status: 'active',
        created_at: updatedPayment.created_at,
        updated_at: new Date().toISOString()
      };

      const { data: investmentRecord, error: investmentError } = await db.client
        .from('aureus_share_purchases')
        .insert([investmentData])
        .select()
        .single();

      if (investmentError) {
        console.error('‚ùå CRITICAL ERROR: Share Purchase creation failed:', investmentError);
        console.error('‚ùå ROLLING BACK: Payment approval cancelled due to share purchase failure');

        // Rollback payment status to pending
        await db.client
          .from('crypto_payment_transactions')
          .update({
            status: 'pending',
            approved_at: null,
            updated_at: new Date().toISOString()
          })
          .eq('id', paymentId);

        await ctx.answerCbQuery('‚ùå Payment approval failed - share purchase creation error');
        await ctx.reply('‚ùå **PAYMENT APPROVAL FAILED**\n\nShare purchase record could not be created. Payment has been reverted to pending status. Please try again or contact support.');
        return; // ‚úÖ CRITICAL FIX: Stop execution if share purchase fails
      } else {
        console.log('‚úÖ Share Purchase record created:', investmentRecord.id);

        // üö® CRITICAL FIX: Update shares_sold in investment_phases
        console.log(`üìä [SHARES_SOLD] Updating shares_sold for direct payment approval: +${sharesAmount} shares`);
        const sharesSoldResult = await incrementSharesSold(currentPhase.id, sharesAmount, 'direct_purchase');

        if (!sharesSoldResult.success) {
          console.error(`‚ùå [SHARES_SOLD] Failed to update shares_sold for payment ${paymentId}:`, sharesSoldResult.error);
          // Continue with approval but log the error for manual review
        }

        // Link the payment to the share purchase
        await db.client
          .from('crypto_payment_transactions')
          .update({ investment_id: investmentRecord.id })
          .eq('id', paymentId);

        console.log('üîó Payment linked to share purchase');

        // COMMISSION CREATION - Check for referral relationship and create commission
        console.log('üí∞ [COMMISSION] Checking for referral relationship to create commission...');
        console.log(`üí∞ [COMMISSION] Looking for referrals where referred_id = ${updatedPayment.user_id}`);

        const { data: referralData, error: referralError } = await db.client
          .from('referrals')
          .select('referrer_id, referred_id, commission_rate')
          .eq('referred_id', updatedPayment.user_id)
          .eq('status', 'active')
          .single();

        console.log(`üí∞ [COMMISSION] Referral query result:`, { referralData, referralError });

        if (!referralError && referralData) {
          console.log(`üë• [COMMISSION] Found referrer: User ${referralData.referrer_id} for referred user ${referralData.referred_id}`);

          // Calculate commission (15% USDT + 15% shares)
          const commissionAmount = amount * 0.15;
          const shareCommission = sharesAmount * 0.15;

          console.log(`üí∞ [COMMISSION] Calculating commission: ${commissionAmount} USDT + ${shareCommission} shares`);
          console.log(`üí∞ [COMMISSION] Base amount: $${amount}, Share amount: ${sharesAmount}`);

          // Create commission transaction
          const commissionData = {
            referrer_id: referralData.referrer_id,
            referred_id: referralData.referred_id,
            share_purchase_id: investmentRecord.id,
            commission_rate: 15.00,
            share_purchase_amount: amount,
            usdt_commission: commissionAmount,
            share_commission: shareCommission,
            status: 'approved',
            payment_date: new Date().toISOString(),
            created_at: new Date().toISOString()
          };

          console.log(`üí∞ [COMMISSION] Inserting commission data:`, commissionData);

          const { data: commissionRecord, error: commissionError } = await db.client
            .from('commission_transactions')
            .insert([commissionData])
            .select()
            .single();

          console.log(`üí∞ [COMMISSION] Insert result:`, { commissionRecord, commissionError });

          if (commissionError) {
            console.error('‚ùå [COMMISSION] Commission creation error:', commissionError);
            console.error('‚ùå [COMMISSION] Failed commission data:', commissionData);
          } else {
            console.log(`‚úÖ [COMMISSION] Commission created successfully: $${commissionAmount.toFixed(2)} USDT + ${shareCommission.toFixed(2)} shares`);
            console.log(`‚úÖ [COMMISSION] Commission record ID:`, commissionRecord.id);

            // Update commission balance (add to existing balance)
            console.log('üí≥ [COMMISSION] Updating commission balance...');
            console.log(`üí≥ [COMMISSION] Looking for existing balance for user ${referralData.referrer_id}`);

            // First, get existing balance
            const { data: existingBalance, error: getBalanceError } = await db.client
              .from('commission_balances')
              .select('*')
              .eq('user_id', referralData.referrer_id)
              .single();

            console.log(`üí≥ [COMMISSION] Existing balance query result:`, { existingBalance, getBalanceError });

            if (getBalanceError && getBalanceError.code !== 'PGRST116') {
              console.error('‚ùå [COMMISSION] Error getting existing balance:', getBalanceError);
            }

            const currentUSDT = existingBalance?.usdt_balance || 0;
            const currentShares = existingBalance?.share_balance || 0;
            const totalEarnedUSDT = (existingBalance?.total_earned_usdt || 0) + commissionAmount;
            const totalEarnedShares = (existingBalance?.total_earned_shares || 0) + shareCommission;

            const balanceUpdateData = {
              user_id: referralData.referrer_id,
              usdt_balance: currentUSDT + commissionAmount,
              share_balance: currentShares + shareCommission,
              total_earned_usdt: totalEarnedUSDT,
              total_earned_shares: totalEarnedShares,
              last_updated: new Date().toISOString(),
              created_at: existingBalance?.created_at || new Date().toISOString()
            };

            console.log(`üí≥ [COMMISSION] Upserting balance data:`, balanceUpdateData);

            const { error: balanceError } = await db.client
              .from('commission_balances')
              .upsert(balanceUpdateData, {
                onConflict: 'user_id'
              });

            console.log(`üí≥ [COMMISSION] Balance upsert result:`, { balanceError });

            if (balanceError) {
              console.error('‚ùå [COMMISSION] Commission balance update error:', balanceError);
            } else {
              console.log(`‚úÖ [COMMISSION] Commission balance updated successfully: +$${commissionAmount} USDT, +${shareCommission} shares`);
              console.log(`‚úÖ [COMMISSION] New balances: $${currentUSDT + commissionAmount} USDT, ${currentShares + shareCommission} shares`);

              // üö® CRITICAL FIX: Update shares_sold for referral commission shares
              if (shareCommission > 0) {
                console.log(`üìä [SHARES_SOLD] Updating shares_sold for referral commission: +${shareCommission} shares`);
                const sharesSoldResult = await incrementSharesSold(currentPhase.id, shareCommission, 'referral_commission');

                if (!sharesSoldResult.success) {
                  console.error(`‚ùå [SHARES_SOLD] Failed to update shares_sold for referral commission:`, sharesSoldResult.error);
                  // Continue with commission processing but log the error for manual review
                }
              }
            }
          }
        } else {
          console.log('‚ÑπÔ∏è [COMMISSION] No referrer found for this user - no commission to create');
          console.log(`‚ÑπÔ∏è [COMMISSION] Referral error:`, referralError);
          console.log(`‚ÑπÔ∏è [COMMISSION] User ID searched: ${updatedPayment.user_id}`);

          // Let's also check if there are ANY referrals for this user (debug)
          const { data: allReferrals, error: allReferralsError } = await db.client
            .from('referrals')
            .select('*')
            .eq('referred_id', updatedPayment.user_id);

          console.log(`üîç [COMMISSION] All referrals for user ${updatedPayment.user_id}:`, allReferrals);
          console.log(`üîç [COMMISSION] All referrals query error:`, allReferralsError);
        }
      }
    } catch (shareError) {
      console.error('Error creating share purchase:', shareError);
    }

    // NOTIFY USER OF PAYMENT APPROVAL
    console.log(`üì± Notifying user ${updatedPayment.users.username} of payment approval...`);
    await notifyUserPaymentApproved(updatedPayment, sharesAmount, currentPhase);

    // TRIGGER KYC COLLECTION FOR SHARE CERTIFICATE
    console.log(`üìã Checking KYC status for user ${updatedPayment.users.username}...`);
    await triggerKYCCollectionIfNeeded(updatedPayment.user_id);

    // Check if this is a bank transfer payment
    const isBankTransfer = updatedPayment.network === 'BANK_TRANSFER' || updatedPayment.currency === 'ZAR';
    const paymentMethodDisplay = isBankTransfer ? 'Bank Transfer (ZAR)' : `${updatedPayment.amount} USDT`;

    await ctx.replyWithMarkdown(`‚úÖ **PAYMENT APPROVED**

**Payment ID:** #${paymentId.substring(0, 8)}
**Amount:** $${updatedPayment.amount} USD
**Payment Method:** ${paymentMethodDisplay}
**User:** ${updatedPayment.users.full_name || updatedPayment.users.username}
**Shares Allocated:** ${sharesAmount}

‚úÖ User has been notified of the approval and shares have been allocated.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üîô Back to Payments", callback_data: "admin_payments" }]
        ]
      }
    });

  } catch (error) {
    console.error('Payment approval error:', error);
    await ctx.answerCbQuery('‚ùå Error approving payment');
  }
}

// Notify user of payment approval
async function notifyUserPaymentApproved(payment, sharesAllocated, currentPhase) {
  try {
    console.log(`üì± [notifyUserPaymentApproved] Notifying user ${payment.users.username} of payment approval`);

    // Get user's Telegram ID
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('telegram_id')
      .eq('user_id', payment.user_id)
      .single();

    if (telegramError || !telegramUser) {
      console.error('‚ùå Error finding user Telegram ID:', telegramError);
      return;
    }

    // Check if this is a bank transfer payment
    const isBankTransfer = payment.network === 'BANK_TRANSFER' || payment.currency === 'ZAR';
    let paymentMethodText = '';

    if (isBankTransfer) {
      // Parse ZAR amount from transaction_hash field
      let zarAmount = 'N/A';
      if (payment.transaction_hash && payment.transaction_hash.includes('ZAR:')) {
        const zarMatch = payment.transaction_hash.match(/ZAR:([0-9.]+)/);
        if (zarMatch) {
          zarAmount = parseFloat(zarMatch[1]);
        }
      }
      paymentMethodText = `‚Ä¢ **Payment Method:** Bank Transfer (FNB)\n‚Ä¢ **ZAR Amount:** R${typeof zarAmount === 'number' ? zarAmount.toFixed(2) : zarAmount}`;
    } else {
      paymentMethodText = `‚Ä¢ **Payment Method:** ${payment.network} USDT`;
    }

    const approvalMessage = `üéâ **PAYMENT APPROVED!**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚úÖ CONGRATULATIONS!**
Your share purchase has been approved and processed successfully.

**üìã TRANSACTION DETAILS:**
‚Ä¢ **Payment ID:** #${payment.id.substring(0, 8)}
‚Ä¢ **USD Amount:** $${payment.amount}
${paymentMethodText}
‚Ä¢ **Shares Allocated:** ${sharesAllocated} shares
‚Ä¢ **Share Price:** $${currentPhase.price_per_share} per share
‚Ä¢ **Current Phase:** ${currentPhase.name}
‚Ä¢ **Approval Date:** ${new Date().toLocaleDateString()}

**üí∞ PORTFOLIO UPDATE:**
Your ${sharesAllocated} new shares have been added to your portfolio and are now earning dividends from our gold mining operations.

**üéØ NEXT STEPS:**
‚Ä¢ View your updated portfolio
‚Ä¢ Track your dividend earnings
‚Ä¢ Share your referral link to earn commissions
‚Ä¢ Consider additional share purchases

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üèÜ Welcome to Aureus Alliance Holdings!**
Your investment in African gold mining starts now.`;

    // Send notification to user
    await sendAudioNotificationToUser(
      telegramUser.telegram_id,
      approvalMessage,
      'PAYMENT',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
            [{ text: "üì§ Share Referral Link", callback_data: "share_referral" }],
            [{ text: "üè† Main Menu", callback_data: "main_menu" }]
          ]
        }
      },
      true // Enable audio notification for payment approvals
    );

    console.log(`‚úÖ [notifyUserPaymentApproved] Notification sent successfully to user ${payment.users.username}`);

  } catch (error) {
    console.error('‚ùå Error sending payment approval notification:', error);
  }
}

// Payment Rejection Prompt Handler
async function handleRejectPaymentPrompt(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  const paymentId = callbackData.replace('reject_payment_', '');

  try {
    // Get payment details for context
    const { data: payment, error: paymentError } = await db.client
      .from('crypto_payment_transactions')
      .select('*, users!inner(username, full_name)')
      .eq('id', paymentId)
      .single();

    if (paymentError || !payment) {
      await ctx.answerCbQuery('‚ùå Payment not found');
      return;
    }

    const promptMessage = `‚ùå **REJECT PAYMENT CONFIRMATION**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Payment Details:**
‚Ä¢ **ID:** #${paymentId.substring(0, 8)}
‚Ä¢ **Amount:** $${payment.amount} USDT
‚Ä¢ **User:** ${payment.users.full_name || payment.users.username}
‚Ä¢ **Network:** ${payment.network}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Please enter the reason for rejecting this payment:**

*This message will be sent to the user along with the rejection notification.*`;

    await ctx.replyWithMarkdown(promptMessage, {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: "Enter rejection reason..."
      }
    });

    // Store the payment ID in a temporary way for the next message
    ctx.session = ctx.session || {};
    ctx.session.pendingRejection = paymentId;

  } catch (error) {
    console.error('Error showing rejection prompt:', error);
    await ctx.answerCbQuery('‚ùå Error processing rejection');
  }
}

// Updated Payment Rejection Handler with Custom Message
async function handleRejectPayment(ctx, paymentId, rejectionReason) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.reply('‚ùå Access denied');
    return;
  }

  try {
    // Update payment status to rejected with custom reason
    const { data: updatedPayment, error: updateError } = await db.client
      .from('crypto_payment_transactions')
      .update({
        status: 'rejected',
        rejected_at: new Date().toISOString(),
        rejected_by_admin_id: user.id,
        rejection_reason: rejectionReason,
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId)
      .select('*, users!inner(username, full_name)')
      .single();

    if (updateError) {
      console.error('Payment rejection error:', updateError);
      await ctx.reply('‚ùå Error rejecting payment');
      return;
    }

    // Log admin action
    await logAdminAction(
      user.id,
      user.username,
      'payment_rejected',
      'payment',
      paymentId,
      {
        amount: updatedPayment.amount,
        user: updatedPayment.users.username,
        rejection_reason: rejectionReason
      }
    );

    // Send notification to user
    try {
      // Get user's telegram_id from telegram_users table
      const { data: telegramUser, error: telegramError } = await db.client
        .from('telegram_users')
        .select('telegram_id')
        .eq('user_id', updatedPayment.user_id)
        .single();

      if (telegramError || !telegramUser) {
        console.error('Error finding user telegram_id:', telegramError);
        return;
      }

      const userNotification = `‚ùå **PAYMENT REJECTED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Payment ID:** #${paymentId.substring(0, 8)}
**Amount:** $${updatedPayment.amount} USDT
**Status:** Rejected by Admin

**Reason for Rejection:**
${rejectionReason}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Next Steps:**
‚Ä¢ Review the rejection reason above
‚Ä¢ Correct any issues mentioned
‚Ä¢ Submit a new payment if needed
‚Ä¢ Contact support if you have questions

**Need Help?** Contact @TTTFOUNDER for assistance.`;

      await sendAudioNotificationToUser(
        telegramUser.telegram_id,
        userNotification,
        'REJECTION',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üõí Make New Payment", callback_data: "menu_purchase_shares" }],
              [{ text: "üìû Contact Support", url: "https://t.me/TTTFOUNDER" }]
            ]
          }
        },
        true // Enable audio notification for payment rejections
      );
    } catch (notificationError) {
      console.error('Error sending rejection notification to user:', notificationError);
    }

    // Confirm to admin
    await ctx.replyWithMarkdown(`‚ùå **PAYMENT REJECTED**

**Payment ID:** #${paymentId.substring(0, 8)}
**Amount:** $${updatedPayment.amount} USDT
**User:** ${updatedPayment.users.full_name || updatedPayment.users.username}

**Rejection Reason:** ${rejectionReason}

‚úÖ User has been notified with the custom rejection message.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üîô Back to Payments", callback_data: "admin_payments" }]
        ]
      }
    });

  } catch (error) {
    console.error('Payment rejection error:', error);
    await ctx.reply('‚ùå Error rejecting payment');
  }
}

async function handleViewScreenshot(ctx, callbackData) {
  const user = ctx.from;

  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  const paymentId = callbackData.replace('view_screenshot_', '');

  try {
    // Get payment screenshot URL
    const { data: payment, error: fetchError } = await db.client
      .from('crypto_payment_transactions')
      .select('screenshot_url, amount, users!inner(username)')
      .eq('id', paymentId)
      .single();

    if (fetchError || !payment || !payment.screenshot_url) {
      await ctx.answerCbQuery('‚ùå Screenshot not found');
      return;
    }

    // Get the screenshot from Supabase storage
    const { data: fileData, error: downloadError } = await db.client.storage
      .from('proof')
      .download(payment.screenshot_url);

    if (downloadError) {
      console.error('Screenshot download error:', downloadError);
      await ctx.answerCbQuery('‚ùå Error loading screenshot');
      return;
    }

    // Convert blob to buffer for Telegram
    const buffer = Buffer.from(await fileData.arrayBuffer());

    await ctx.replyWithPhoto(
      { source: buffer },
      {
        caption: `üì∑ **Payment Screenshot**\n\n**Payment ID:** #${paymentId.substring(0, 8)}\n**Amount:** $${payment.amount} USDT\n**User:** ${payment.users.username}`,
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ Approve", callback_data: `approve_payment_${paymentId}` },
              { text: "‚ùå Reject", callback_data: `reject_payment_${paymentId}` }
            ],
            [{ text: "üîô Back to Review", callback_data: `review_payment_${paymentId}` }]
          ]
        }
      }
    );

  } catch (error) {
    console.error('View screenshot error:', error);
    await ctx.answerCbQuery('‚ùå Error loading screenshot');
  }
}

// ENHANCED REFERRAL SYSTEM HANDLERS
async function handleShareReferral(ctx) {
  const user = ctx.from;

  try {
    // Get user ID from telegram_users table
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id, username')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    const referralUsername = telegramUser.username || user.username || user.first_name;
    const botLink = 'https://t.me/AureusAllianceBot';
    const referralLink = `https://t.me/AureusAllianceBot?start=${referralUsername}`;

    // DEBUG: Log the generated links to verify they're correct
    console.log('üîó DEBUG - Generated referral link:', referralLink);
    console.log('üîó DEBUG - Bot link:', botLink);
    console.log('üîó DEBUG - Referral username:', referralUsername);

    // MOTIVATING & COMPELLING investment opportunity message
    const shareMessage = `üåü **LIFE-CHANGING OPPORTUNITY: OWN REAL GOLD MINES!** üåü

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ **IMAGINE EARNING FROM ACTUAL GOLD PRODUCTION!**

üèÜ **AUREUS ALLIANCE HOLDINGS** - Your Gateway to Gold Wealth!
*Join thousands already building generational wealth through gold mining*

üî• **WHY THIS IS THE OPPORTUNITY OF A LIFETIME:**

üíé **REAL GOLD, REAL PROFITS:**
‚Ä¢ Own shares in 10 MASSIVE gold washplants
‚Ä¢ Each plant processes 200 tons of gold-bearing material per hour
‚Ä¢ Target: 3,200 KG of pure gold annually (worth $200+ MILLION!)
‚Ä¢ You get a piece of every ounce extracted!

üöÄ **EXPLOSIVE GROWTH POTENTIAL:**
‚Ä¢ Phase 1: $1 per share (LIMITED TIME!)
‚Ä¢ Full production by June 2026
‚Ä¢ Early investors positioned for maximum returns
‚Ä¢ Only 1,400,000 shares available - Don't miss out!

‚õèÔ∏è **PROVEN SOUTH AFRICAN GOLD RESERVES:**
‚Ä¢ Located in gold-rich Mpumalanga Province
‚Ä¢ Professional geological surveys completed
‚Ä¢ Modern extraction technology deployed
‚Ä¢ Experienced mining team managing operations

üí∏ **MULTIPLE WAYS TO PROFIT:**
‚Ä¢ Share value appreciation as production scales
‚Ä¢ Dividend payments from gold sales
‚Ä¢ Portfolio diversification with precious metals
‚Ä¢ Hedge against inflation and economic uncertainty

üéØ **PERFECT FOR:**
‚Ä¢ Investors seeking alternative assets
‚Ä¢ Those wanting exposure to gold without storage
‚Ä¢ People building retirement wealth
‚Ä¢ Anyone tired of low bank returns

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üö® **ACT NOW - PHASE 1 PRICING ENDS SOON!**

üëÜ **CLICK YOUR PERSONAL REFERRAL LINK:**
${referralLink}

üéÅ **AUTOMATIC SPONSOR ASSIGNMENT:** Your referrals will be automatically linked to you!

üí° **INVESTMENT RANGE:** Start with just $5 or go big with $50,000+

‚ö° **SECURE PROCESS:** 3-step verification, instant confirmation

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üî• **DON'T LET THIS GOLDEN OPPORTUNITY SLIP AWAY!**

*Join the smart money already invested in South Africa's gold boom!*

‚ö†Ô∏è *High-risk, high-reward investment. Invest responsibly.*`;

    await ctx.replyWithMarkdown(shareMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üì§ Share Referral Link", url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('üî• GOLD MINING OPPORTUNITY! Join Aureus Alliance Holdings and own real South African gold mines!')}` }],
          [{ text: "üìã Copy Referral Link", callback_data: `copy_referral_link_${referralUsername}` }],
          [{ text: "üë• Back to Referral Dashboard", callback_data: "menu_referrals" }],
          [{ text: "üîô Back to Main Menu", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Share referral error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error generating referral content**\n\nPlease try again.');
  }
}

async function handleViewCommission(ctx) {
  const user = ctx.from;

  try {
    console.log(`üö® [DEBUG] ENHANCED COMMISSION VIEW CALLED FOR USER ${user.id} - NEW VERSION ACTIVE!`);

    // Get user ID from telegram_users table
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get comprehensive commission data
    console.log(`üîç [DEBUG] Fetching enhanced commission balance for user ${telegramUser.user_id}`);
    const balanceInfo = await getEnhancedCommissionBalance(telegramUser.user_id);
    console.log(`üîç [DEBUG] Enhanced commission balance result:`, balanceInfo);

    if (!balanceInfo.success) {
      console.error('Enhanced commission balance fetch error:', balanceInfo.error);
      await ctx.replyWithMarkdown('‚ùå **Error loading commission data**\n\nPlease try again.');
      return;
    }

    const data = balanceInfo.data;
    console.log(`üîç [DEBUG] Commission data:`, data);

    // Build enhanced commission message with detailed status information
    let commissionMessage = `üí∞ **COMMISSION BALANCE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üíµ USDT COMMISSIONS:**
‚Ä¢ **Total Earned:** $${data.totalEarnedUSDT.toFixed(2)} USDT
‚Ä¢ **Available for Withdrawal:** $${data.availableUSDT.toFixed(2)} USDT
‚Ä¢ **Currently Escrowed:** $${data.escrowedAmount.toFixed(2)} USDT`;

    // Add pending withdrawal details if any
    if (data.pendingWithdrawals.length > 0) {
      commissionMessage += `\n‚Ä¢ **Pending Withdrawals:** ${data.pendingWithdrawals.length} request(s)`;
      data.pendingWithdrawals.forEach((withdrawal, index) => {
        const shortId = withdrawal.id.substring(0, 8);
        const date = new Date(withdrawal.created_at).toLocaleDateString();
        commissionMessage += `\n  ‚îî Request #${shortId}: $${withdrawal.amount} (${date})`;
      });
    }

    commissionMessage += `

**üìà SHARE COMMISSIONS:**
‚Ä¢ **Total Shares Earned:** ${data.totalEarnedShares.toFixed(0)} shares
‚Ä¢ **Current Value:** $${data.shareValue.toFixed(2)} USD
‚Ä¢ **Status:** Active in portfolio

**üîÑ CONVERSION HISTORY:**
‚Ä¢ **Total Converted to Shares:** $${data.totalConvertedUSDT.toFixed(2)} USDT
‚Ä¢ **Shares from Conversions:** ${data.sharesFromConversions.toFixed(0)} shares`;

    // Add pending conversion details if any
    if (data.pendingConversions.length > 0) {
      commissionMessage += `\n‚Ä¢ **Pending Conversions:** ${data.pendingConversions.length} request(s)`;
      data.pendingConversions.forEach((conversion, index) => {
        const shortId = conversion.id.substring(0, 8);
        const date = new Date(conversion.created_at).toLocaleDateString();
        commissionMessage += `\n  ‚îî Request #${shortId}: ${conversion.shares_requested} shares ($${conversion.usdt_amount}) (${date})`;
      });
    }

    commissionMessage += `

**üìä COMMISSION SUMMARY:**
‚Ä¢ **Total Commission Value:** $${data.totalCommissionValue.toFixed(2)}
‚Ä¢ **Total Withdrawn:** $${data.totalWithdrawnUSDT.toFixed(2)} USDT
‚Ä¢ **Commission Rate:** 15% USDT + 15% Shares

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    const keyboard = [];

    // Show action buttons based on available balance and status
    if (data.availableUSDT > 0) {
      keyboard.push([{ text: "üí∏ Withdraw USDT Commission", callback_data: "withdraw_usdt_commission" }]);
      keyboard.push([{ text: "üõí Use Commission for Shares", callback_data: "commission_to_shares" }]);
    } else if (data.escrowedAmount > 0) {
      // Show helpful message when funds are escrowed
      keyboard.push([{ text: "‚è≥ View Pending Requests", callback_data: "view_pending_requests" }]);
    }

    // Add status-specific buttons
    if (data.pendingWithdrawals.length > 0 || data.pendingConversions.length > 0) {
      keyboard.push([{ text: "üìã Manage Pending Requests", callback_data: "manage_pending_requests" }]);
    }

    // Standard navigation buttons
    keyboard.push(
      [{ text: "üì§ Share Referral Link", callback_data: "share_referral" }],
      [{ text: "üë• View My Referrals", callback_data: "view_referrals" }],
      [{ text: "üìã Withdrawal History", callback_data: "withdrawal_history" }],
      [{ text: "üîô Back to Referral Dashboard", callback_data: "menu_referrals" }]
    );

    await ctx.replyWithMarkdown(commissionMessage, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('üö® [ERROR] Enhanced commission view failed:', error);

    // Fallback to basic commission display
    try {
      console.log('üîÑ [FALLBACK] Attempting basic commission display...');

      const { data: telegramUser } = await db.client
        .from('telegram_users')
        .select('user_id')
        .eq('telegram_id', user.id)
        .single();

      if (!telegramUser) {
        await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
        return;
      }

      const { data: balance } = await db.client
        .from('commission_balances')
        .select('*')
        .eq('user_id', telegramUser.user_id)
        .single();

      const totalUSDT = balance ? parseFloat(balance.total_earned_usdt || 0) : 0;
      const totalShares = balance ? parseFloat(balance.total_earned_shares || 0) : 0;
      const availableUSDT = balance ? parseFloat(balance.usdt_balance || 0) : 0;
      const escrowedAmount = balance ? parseFloat(balance.escrowed_amount || 0) : 0;

      // Calculate share value with current phase price
      let shareValue = totalShares * 5.00; // Default $5
      try {
        const currentPhase = await db.getCurrentPhase();
        if (currentPhase && currentPhase.price_per_share) {
          shareValue = totalShares * parseFloat(currentPhase.price_per_share);
        }
      } catch (phaseError) {
        console.error('Phase fetch error in fallback:', phaseError);
      }

      const fallbackMessage = `üí∞ **COMMISSION BALANCE** (Fallback Mode)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üíµ USDT COMMISSIONS:**
‚Ä¢ Total Earned: $${totalUSDT.toFixed(2)} USDT
‚Ä¢ Available for Withdrawal: $${availableUSDT.toFixed(2)} USDT
‚Ä¢ Currently Escrowed: $${escrowedAmount.toFixed(2)} USDT

**üìà SHARE COMMISSIONS:**
‚Ä¢ Total Shares Earned: ${totalShares} shares
‚Ä¢ Current Value: $${shareValue.toFixed(2)} USD
‚Ä¢ Status: Active in portfolio

**üìä COMMISSION SUMMARY:**
‚Ä¢ Total Commission Value: $${(totalUSDT + shareValue).toFixed(2)}
‚Ä¢ Commission Rate: 15% USDT + 15% Shares

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è **Note:** Enhanced view temporarily unavailable. Contact support if this persists.`;

      await ctx.replyWithMarkdown(fallbackMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí∏ Withdraw USDT Commission", callback_data: "withdraw_usdt_commission" }],
            [{ text: "üõí Use Commission for Shares", callback_data: "commission_to_shares" }],
            [{ text: "‚è≥ View Pending Requests", callback_data: "view_pending_requests" }],
            [{ text: "üîô Back to Referral Dashboard", callback_data: "menu_referrals" }]
          ]
        }
      });

    } catch (fallbackError) {
      console.error('üö® [ERROR] Fallback commission view also failed:', fallbackError);
      await ctx.replyWithMarkdown('‚ùå **Error loading commission balance**\n\nPlease try again or contact support.');
    }
  }
}

// Handle viewing pending requests with detailed information
async function handleViewPendingRequests(ctx) {
  try {
    const user = ctx.from;

    // Get user from database
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get enhanced balance info
    const balanceInfo = await getEnhancedCommissionBalance(telegramUser.user_id);

    if (!balanceInfo.success) {
      await ctx.replyWithMarkdown('‚ùå **Error loading pending requests**\n\nPlease try again.');
      return;
    }

    const data = balanceInfo.data;

    let message = `‚è≥ **PENDING REQUESTS STATUS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ BALANCE OVERVIEW:**
‚Ä¢ **Total Balance:** $${(data.availableUSDT + data.escrowedAmount).toFixed(2)} USDT
‚Ä¢ **Available:** $${data.availableUSDT.toFixed(2)} USDT
‚Ä¢ **Locked (Escrowed):** $${data.escrowedAmount.toFixed(2)} USDT

`;

    // Show pending withdrawals
    if (data.pendingWithdrawals.length > 0) {
      message += `**üí∏ PENDING WITHDRAWALS (${data.pendingWithdrawals.length}):**\n`;
      data.pendingWithdrawals.forEach((withdrawal, index) => {
        const shortId = withdrawal.id.substring(0, 8);
        const date = new Date(withdrawal.created_at).toLocaleDateString();
        const time = new Date(withdrawal.created_at).toLocaleTimeString();
        message += `\n${index + 1}. **Request #${shortId}**\n`;
        message += `   ‚Ä¢ Amount: $${withdrawal.amount} USDT\n`;
        message += `   ‚Ä¢ Type: ${withdrawal.withdrawal_type.toUpperCase()}\n`;
        message += `   ‚Ä¢ Submitted: ${date} at ${time}\n`;
        message += `   ‚Ä¢ Status: ‚è≥ Awaiting admin approval\n`;
      });
      message += `\n`;
    }

    // Show pending conversions
    if (data.pendingConversions.length > 0) {
      message += `**üõí PENDING CONVERSIONS (${data.pendingConversions.length}):**\n`;
      data.pendingConversions.forEach((conversion, index) => {
        const shortId = conversion.id.substring(0, 8);
        const date = new Date(conversion.created_at).toLocaleDateString();
        const time = new Date(conversion.created_at).toLocaleTimeString();
        message += `\n${index + 1}. **Request #${shortId}**\n`;
        message += `   ‚Ä¢ Shares: ${conversion.shares_requested}\n`;
        message += `   ‚Ä¢ Cost: $${conversion.usdt_amount} USDT\n`;
        message += `   ‚Ä¢ Submitted: ${date} at ${time}\n`;
        message += `   ‚Ä¢ Status: ‚è≥ Awaiting admin approval\n`;
      });
      message += `\n`;
    }

    if (data.pendingWithdrawals.length === 0 && data.pendingConversions.length === 0) {
      message += `**‚úÖ NO PENDING REQUESTS**

You currently have no pending withdrawal or conversion requests.
All your commission balance is available for new requests.

`;
    }

    message += `**üí° WHAT HAPPENS NEXT:**
‚Ä¢ Admin will review your request(s) within 24-48 hours
‚Ä¢ You'll receive a notification when processed
‚Ä¢ Approved requests will update your balance automatically
‚Ä¢ Rejected requests will release the escrowed funds

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ Escrowed funds cannot be used for new requests
‚Ä¢ You cannot cancel requests once submitted
‚Ä¢ Contact admin if you have urgent questions

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    const keyboard = [
      [{ text: "üîÑ Refresh Status", callback_data: "view_pending_requests" }],
      [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
      [{ text: "üìû Contact Admin", url: "https://t.me/TTTFOUNDER" }],
      [{ text: "üîô Back to Commission Dashboard", callback_data: "view_commission" }]
    ];

    await ctx.replyWithMarkdown(message, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('View pending requests error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading pending requests**\n\nPlease try again.');
  }
}

// Handle managing pending requests with cancellation options
async function handleManagePendingRequests(ctx) {
  try {
    const user = ctx.from;

    // Get user from database
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get enhanced balance info
    const balanceInfo = await getEnhancedCommissionBalance(telegramUser.user_id);

    if (!balanceInfo.success) {
      await ctx.replyWithMarkdown('‚ùå **Error loading pending requests**\n\nPlease try again.');
      return;
    }

    const data = balanceInfo.data;

    if (data.pendingWithdrawals.length === 0 && data.pendingConversions.length === 0) {
      await ctx.replyWithMarkdown(`‚úÖ **NO PENDING REQUESTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

You currently have no pending withdrawal or conversion requests.
All your commission balance is available for new requests.

**üí∞ Available Balance:** $${data.availableUSDT.toFixed(2)} USDT

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí∏ Withdraw USDT Commission", callback_data: "withdraw_usdt_commission" }],
            [{ text: "üõí Use Commission for Shares", callback_data: "commission_to_shares" }],
            [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }]
          ]
        }
      });
      return;
    }

    let message = `üìã **MANAGE PENDING REQUESTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ BALANCE OVERVIEW:**
‚Ä¢ **Total Balance:** $${(data.availableUSDT + data.escrowedAmount).toFixed(2)} USDT
‚Ä¢ **Available:** $${data.availableUSDT.toFixed(2)} USDT
‚Ä¢ **Locked (Escrowed):** $${data.escrowedAmount.toFixed(2)} USDT

`;

    const keyboard = [];

    // Show pending withdrawals with cancel options
    if (data.pendingWithdrawals.length > 0) {
      message += `**üí∏ PENDING WITHDRAWALS (${data.pendingWithdrawals.length}):**\n`;
      data.pendingWithdrawals.forEach((withdrawal, index) => {
        const shortId = withdrawal.id.substring(0, 8);
        const date = new Date(withdrawal.created_at).toLocaleDateString();
        const time = new Date(withdrawal.created_at).toLocaleTimeString();
        const hoursAgo = Math.floor((Date.now() - new Date(withdrawal.created_at).getTime()) / (1000 * 60 * 60));

        message += `\n${index + 1}. **Request #${shortId}**\n`;
        message += `   ‚Ä¢ Amount: $${withdrawal.amount} USDT\n`;
        message += `   ‚Ä¢ Type: ${withdrawal.withdrawal_type.toUpperCase()}\n`;
        message += `   ‚Ä¢ Submitted: ${date} at ${time} (${hoursAgo}h ago)\n`;
        message += `   ‚Ä¢ Status: ‚è≥ Awaiting admin approval\n`;

        // Add cancel button for each withdrawal (Note: Cancellation may not be implemented yet)
        // keyboard.push([{ text: `‚ùå Cancel Request #${shortId}`, callback_data: `cancel_withdrawal_${shortId}` }]);
      });
      message += `\n`;
    }

    // Show pending conversions with cancel options
    if (data.pendingConversions.length > 0) {
      message += `**üõí PENDING CONVERSIONS (${data.pendingConversions.length}):**\n`;
      data.pendingConversions.forEach((conversion, index) => {
        const shortId = conversion.id.substring(0, 8);
        const date = new Date(conversion.created_at).toLocaleDateString();
        const time = new Date(conversion.created_at).toLocaleTimeString();
        const hoursAgo = Math.floor((Date.now() - new Date(conversion.created_at).getTime()) / (1000 * 60 * 60));

        message += `\n${index + 1}. **Request #${shortId}**\n`;
        message += `   ‚Ä¢ Shares: ${conversion.shares_requested}\n`;
        message += `   ‚Ä¢ Cost: $${conversion.usdt_amount} USDT\n`;
        message += `   ‚Ä¢ Submitted: ${date} at ${time} (${hoursAgo}h ago)\n`;
        message += `   ‚Ä¢ Status: ‚è≥ Awaiting admin approval\n`;

        // Add cancel button for each conversion (Note: Cancellation may not be implemented yet)
        // keyboard.push([{ text: `‚ùå Cancel Request #${shortId}`, callback_data: `cancel_conversion_${shortId}` }]);
      });
      message += `\n`;
    }

    message += `**‚ö†Ô∏è IMPORTANT INFORMATION:**
‚Ä¢ **Cannot Cancel:** Requests cannot be cancelled once submitted
‚Ä¢ **Processing Time:** 24-48 hours for admin review
‚Ä¢ **Automatic Updates:** You'll be notified when processed
‚Ä¢ **Escrow Security:** Your funds are safely locked during review

**üí° WHAT YOU CAN DO:**
‚Ä¢ **Wait Patiently:** Most requests are approved quickly
‚Ä¢ **Contact Admin:** @TTTFOUNDER for urgent questions
‚Ä¢ **Plan Ahead:** Consider timing of future requests

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    // Add standard navigation buttons
    keyboard.push(
      [{ text: "üîÑ Refresh Status", callback_data: "manage_pending_requests" }],
      [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
      [{ text: "üìû Contact Admin", url: "https://t.me/TTTFOUNDER" }],
      [{ text: "üîô Back to Commission Dashboard", callback_data: "view_commission" }]
    );

    await ctx.replyWithMarkdown(message, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('Manage pending requests error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading pending requests**\n\nPlease try again.');
  }
}

// Handle user settings and preferences
async function handleUserSettings(ctx) {
  try {
    const user = ctx.from;

    // Get user from database
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get user preferences from database
    const { data: preferences, error: prefError } = await db.client
      .rpc('get_user_audio_preferences', { p_telegram_id: user.id });

    const prefs = preferences || {
      audio_enabled: true,
      payment_approval_audio: true,
      payment_rejection_audio: true,
      withdrawal_approval_audio: true,
      withdrawal_rejection_audio: true,
      commission_update_audio: true,
      referral_bonus_audio: true,
      system_announcement_audio: true,
      notification_volume: 'medium'
    };

    const settingsMessage = `‚öôÔ∏è **USER SETTINGS & PREFERENCES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîä AUDIO NOTIFICATION SETTINGS:**
‚Ä¢ **Master Audio:** ${prefs.audio_enabled ? 'üîî Enabled' : 'üîá Disabled'}
‚Ä¢ **Volume Level:** ${prefs.notification_volume ? prefs.notification_volume.toUpperCase() : 'MEDIUM'}

**üì± NOTIFICATION TYPES:**
‚Ä¢ **Payment Approvals:** ${prefs.payment_approval_audio ? 'üí∞ üîî' : 'üí∞ üîá'}
‚Ä¢ **Payment Rejections:** ${prefs.payment_rejection_audio ? '‚ùå üîî' : '‚ùå üîá'}
‚Ä¢ **Withdrawal Updates:** ${prefs.withdrawal_approval_audio ? 'üí∏ üîî' : 'üí∏ üîá'}
‚Ä¢ **Commission Updates:** ${prefs.commission_update_audio ? 'üíé üîî' : 'üíé üîá'}
‚Ä¢ **Referral Bonuses:** ${prefs.referral_bonus_audio ? 'ü§ù üîî' : 'ü§ù üîá'}
‚Ä¢ **System Announcements:** ${prefs.system_announcement_audio ? '‚ÑπÔ∏è üîî' : '‚ÑπÔ∏è üîá'}

**üí° ABOUT AUDIO NOTIFICATIONS:**
Audio notifications use different sound tones and emojis to help you quickly identify the type of update you've received. This enhances your experience by providing immediate context for important notifications.

**üéµ SOUND TYPES:**
‚Ä¢ üí∞ Payment/Commission sounds for financial updates
‚Ä¢ ‚úÖ Success sounds for approvals
‚Ä¢ ‚ùå Alert sounds for rejections/errors
‚Ä¢ ‚ö†Ô∏è Warning sounds for important notices
‚Ä¢ ‚ÑπÔ∏è Info sounds for general updates

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    const keyboard = [
      [{ text: prefs.audio_enabled ? "üîá Disable All Audio" : "üîî Enable All Audio", callback_data: "toggle_audio_notifications" }],
      [{ text: "üéõÔ∏è Customize Notification Types", callback_data: "customize_audio_types" }],
      [{ text: "üîä Test Audio Notification", callback_data: "test_audio_notification" }],
      [{ text: "üîô Back to Main Menu", callback_data: "main_menu" }]
    ];

    await ctx.replyWithMarkdown(settingsMessage, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('User settings error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading settings**\n\nPlease try again.');
  }
}

// Handle audio notification test
async function handleTestAudioNotification(ctx) {
  try {
    const user = ctx.from;

    await sendNotificationWithAudio(
      ctx,
      `üéµ **AUDIO NOTIFICATION TEST**

This is a test of the audio notification system!

**üîä Features:**
‚Ä¢ Enhanced notification sounds
‚Ä¢ Visual emoji indicators
‚Ä¢ Different tones for different message types
‚Ä¢ Improved user experience

If you can hear the notification sound and see the emoji, your audio notifications are working perfectly!`,
      'SUCCESS',
      {},
      true
    );

    // Send a follow-up message
    setTimeout(async () => {
      await ctx.replyWithMarkdown(`‚úÖ **Test Complete!**

Did you hear the notification sound and see the emoji?

**If YES:** Your audio notifications are working perfectly!
**If NO:** Check your device's notification settings or contact support.

You can toggle audio notifications on/off in the settings menu anytime.`);
    }, 2000);

  } catch (error) {
    console.error('Test audio notification error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error testing audio notification**\n\nPlease try again.');
  }
}

// Handle toggling audio notifications
async function handleToggleAudioNotifications(ctx) {
  try {
    const user = ctx.from;

    // Get user from database
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get current preferences
    const currentlyEnabled = await isAudioNotificationEnabled(user.id);
    const newStatus = !currentlyEnabled;

    // Update preferences in database
    const updateResult = await db.client
      .rpc('update_user_audio_preferences', {
        p_telegram_id: user.id,
        p_user_id: telegramUser.user_id,
        p_preferences: JSON.stringify({
          audio_enabled: newStatus
        })
      });

    if (updateResult.error) {
      console.error('Error updating audio preferences:', updateResult.error);
      await ctx.replyWithMarkdown('‚ùå **Error updating preferences**\n\nPlease try again.');
      return;
    }

    const statusMessage = `üîä **AUDIO NOTIFICATIONS ${newStatus ? 'ENABLED' : 'DISABLED'}**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Status Changed:** ${currentlyEnabled ? 'üîî Enabled' : 'üîá Disabled'} ‚Üí ${newStatus ? 'üîî Enabled' : 'üîá Disabled'}

**What This Means:**
${newStatus ?
`‚Ä¢ ‚úÖ You'll receive enhanced notifications with sound
‚Ä¢ üéµ Different tones for different message types
‚Ä¢ üí∞ Audio cues for payments and commissions
‚Ä¢ üîî Notification sounds will be enabled` :
`‚Ä¢ üîá Notifications will be silent
‚Ä¢ ‚ùå No audio cues or sound effects
‚Ä¢ üì± Visual notifications only
‚Ä¢ üîï Notification sounds will be disabled`}

**‚úÖ Your preference has been saved to the database and will be applied to all future notifications.**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    await sendNotificationWithAudio(
      ctx,
      statusMessage,
      newStatus ? 'SUCCESS' : 'INFO',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîä Test Audio Notification", callback_data: "test_audio_notification" }],
            [{ text: "‚öôÔ∏è Back to Settings", callback_data: "user_settings" }],
            [{ text: "üè† Main Menu", callback_data: "main_menu" }]
          ]
        }
      },
      newStatus
    );

  } catch (error) {
    console.error('Toggle audio notifications error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error toggling audio notifications**\n\nPlease try again.');
  }
}

// Handle customizing individual audio notification types
async function handleCustomizeAudioTypes(ctx) {
  try {
    const user = ctx.from;

    // Get user from database
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get current preferences
    const { data: preferences, error: prefError } = await db.client
      .rpc('get_user_audio_preferences', { p_telegram_id: user.id });

    const prefs = preferences || {
      payment_approval_audio: true,
      payment_rejection_audio: true,
      withdrawal_approval_audio: true,
      withdrawal_rejection_audio: true,
      commission_update_audio: true,
      referral_bonus_audio: true,
      system_announcement_audio: true
    };

    const customizeMessage = `üéõÔ∏è **CUSTOMIZE NOTIFICATION TYPES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Select which types of notifications should play audio:**

**üí∞ FINANCIAL NOTIFICATIONS:**
‚Ä¢ Payment Approvals: ${prefs.payment_approval_audio ? 'üîî ON' : 'üîá OFF'}
‚Ä¢ Payment Rejections: ${prefs.payment_rejection_audio ? 'üîî ON' : 'üîá OFF'}
‚Ä¢ Withdrawal Updates: ${prefs.withdrawal_approval_audio ? 'üîî ON' : 'üîá OFF'}
‚Ä¢ Commission Updates: ${prefs.commission_update_audio ? 'üîî ON' : 'üîá OFF'}

**ü§ù SOCIAL NOTIFICATIONS:**
‚Ä¢ Referral Bonuses: ${prefs.referral_bonus_audio ? 'üîî ON' : 'üîá OFF'}

**‚ÑπÔ∏è SYSTEM NOTIFICATIONS:**
‚Ä¢ System Announcements: ${prefs.system_announcement_audio ? 'üîî ON' : 'üîá OFF'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Tap any notification type below to toggle its audio setting:**`;

    const keyboard = [
      [
        { text: `üí∞ Payment Approvals ${prefs.payment_approval_audio ? 'üîî' : 'üîá'}`, callback_data: "toggle_payment_approval_audio" },
        { text: `‚ùå Payment Rejections ${prefs.payment_rejection_audio ? 'üîî' : 'üîá'}`, callback_data: "toggle_payment_rejection_audio" }
      ],
      [
        { text: `üí∏ Withdrawal Updates ${prefs.withdrawal_approval_audio ? 'üîî' : 'üîá'}`, callback_data: "toggle_withdrawal_audio" },
        { text: `üíé Commission Updates ${prefs.commission_update_audio ? 'üîî' : 'üîá'}`, callback_data: "toggle_commission_audio" }
      ],
      [
        { text: `ü§ù Referral Bonuses ${prefs.referral_bonus_audio ? 'üîî' : 'üîá'}`, callback_data: "toggle_referral_audio" },
        { text: `‚ÑπÔ∏è System Announcements ${prefs.system_announcement_audio ? 'üîî' : 'üîá'}`, callback_data: "toggle_system_audio" }
      ],
      [{ text: "üîä Test Audio Notification", callback_data: "test_audio_notification" }],
      [{ text: "‚öôÔ∏è Back to Settings", callback_data: "user_settings" }],
      [{ text: "üè† Main Menu", callback_data: "main_menu" }]
    ];

    await ctx.replyWithMarkdown(customizeMessage, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('Customize audio types error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading customization options**\n\nPlease try again.');
  }
}

// Handle individual notification type toggles
async function handleToggleSpecificAudioType(ctx, audioType) {
  try {
    const user = ctx.from;

    // Get user from database
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get current preferences
    const { data: preferences, error: prefError } = await db.client
      .rpc('get_user_audio_preferences', { p_telegram_id: user.id });

    const currentValue = preferences?.[audioType] ?? true;
    const newValue = !currentValue;

    // Update specific preference
    const updateData = {};
    updateData[audioType] = newValue;

    const updateResult = await db.client
      .rpc('update_user_audio_preferences', {
        p_telegram_id: user.id,
        p_user_id: telegramUser.user_id,
        p_preferences: JSON.stringify(updateData)
      });

    if (updateResult.error) {
      console.error('Error updating specific audio preference:', updateResult.error);
      await ctx.answerCbQuery('‚ùå Error updating preference');
      return;
    }

    const typeNames = {
      'payment_approval_audio': 'Payment Approvals',
      'payment_rejection_audio': 'Payment Rejections',
      'withdrawal_approval_audio': 'Withdrawal Updates',
      'withdrawal_rejection_audio': 'Withdrawal Rejections',
      'commission_update_audio': 'Commission Updates',
      'referral_bonus_audio': 'Referral Bonuses',
      'system_announcement_audio': 'System Announcements'
    };

    const typeName = typeNames[audioType] || audioType;

    await ctx.answerCbQuery(`${newValue ? 'üîî' : 'üîá'} ${typeName} audio ${newValue ? 'enabled' : 'disabled'}`);

    // Refresh the customization menu
    await handleCustomizeAudioTypes(ctx);

  } catch (error) {
    console.error('Toggle specific audio type error:', error);
    await ctx.answerCbQuery('‚ùå Error updating preference');
  }
}

async function handleViewReferrals(ctx) {
  const user = ctx.from;

  try {
    // Get user ID from telegram_users table
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get referral relationships
    const { data: referrals, error: referralError } = await db.client
      .from('referrals')
      .select(`
        id,
        referred_id,
        created_at,
        status,
        users!referrals_referred_id_fkey (
          username,
          full_name,
          created_at
        )
      `)
      .eq('referrer_id', telegramUser.user_id)
      .eq('status', 'active')
      .order('created_at', { ascending: false });

    if (referralError) {
      console.error('Referrals fetch error:', referralError);
      await ctx.replyWithMarkdown('‚ùå **Error loading referral data**\n\nPlease try again.');
      return;
    }

    // Get commission balance for total commissions display
    const { data: commissionBalance, error: commissionError } = await db.client
      .from('commission_balances')
      .select('*')
      .eq('user_id', telegramUser.user_id)
      .single();

    let totalCommissions = 0;
    if (commissionBalance) {
      totalCommissions = parseFloat(commissionBalance.total_earned_usdt || 0) +
                        parseFloat(commissionBalance.total_earned_shares || 0);
    }

    let referralsList = '';
    if (referrals && referrals.length > 0) {
      referrals.forEach((referral, index) => {
        const joinDate = new Date(referral.users.created_at).toLocaleDateString();
        const username = referral.users.username || referral.users.full_name || 'Anonymous';
        // Safely format username to avoid Markdown parsing issues
        const safeUsername = username.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
        referralsList += `${index + 1}. **${safeUsername}**\n   üìÖ Joined: ${joinDate}\n   ‚úÖ Status: Active\n\n`;
      });
    } else {
      referralsList = '*No referrals yet. Start sharing your referral link!*';
    }

    const referralsMessage = `üë• **MY REFERRALS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìä REFERRAL STATISTICS:**
‚Ä¢ **Total Referrals:** ${referrals ? referrals.length : 0}
‚Ä¢ **Active Referrals:** ${referrals ? referrals.length : 0}
‚Ä¢ **Total Commissions Earned:** $${totalCommissions.toFixed(2)}

**üë§ REFERRAL LIST:**
${referralsList}

**üöÄ GROW YOUR NETWORK:**
Share your referral link to earn 15% USDT + 15% shares commission on every investment your referrals make!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    try {
      await ctx.replyWithMarkdown(referralsMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üì§ Share Referral Link", callback_data: "share_referral" }],
            [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
            [{ text: "üîÑ Refresh List", callback_data: "view_referrals" }],
            [{ text: "üîô Back to Referral Dashboard", callback_data: "menu_referrals" }]
          ]
        }
      });
    } catch (markdownError) {
      console.error('‚ùå Markdown parsing error in referrals view:', markdownError);
      console.error('‚ùå Problematic message content:', referralsMessage);

      // Fallback: Send without markdown formatting
      const plainMessage = referralsMessage.replace(/\*\*/g, '').replace(/`/g, '');
      await ctx.reply(plainMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üì§ Share Referral Link", callback_data: "share_referral" }],
            [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
            [{ text: "üîÑ Refresh List", callback_data: "view_referrals" }],
            [{ text: "üîô Back to Referral Dashboard", callback_data: "menu_referrals" }]
          ]
        }
      });
    }

  } catch (error) {
    console.error('View referrals error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading referral list**\n\nPlease try again.');
  }
}

async function handleWithdrawCommissions(ctx) {
  await ctx.replyWithMarkdown(`üí∏ **COMMISSION WITHDRAWAL**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üöß WITHDRAWAL SYSTEM COMING SOON**

We're currently developing a secure commission withdrawal system with the following features:

**üîê SECURITY FEATURES:**
‚Ä¢ Multi-signature wallet verification
‚Ä¢ Two-factor authentication
‚Ä¢ Admin approval process
‚Ä¢ Anti-fraud protection

**üí≥ SUPPORTED NETWORKS:**
‚Ä¢ BSC (Binance Smart Chain)
‚Ä¢ Polygon (MATIC)
‚Ä¢ TRON (TRC20)

**üìã WITHDRAWAL PROCESS:**
1. Select withdrawal network
2. Enter wallet address
3. Specify withdrawal amount
4. Admin verification
5. Secure payout processing

**üìß GET NOTIFIED:**
We'll notify all users when the withdrawal system goes live!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
        [{ text: "üì§ Share More Referrals", callback_data: "share_referral" }],
        [{ text: "üîô Back to Referral Dashboard", callback_data: "menu_referrals" }]
      ]
    }
  });
}

// COMMISSION WITHDRAWAL SYSTEM HANDLERS

// Handle USDT Commission Withdrawal
async function handleWithdrawUSDTCommission(ctx) {
  const user = ctx.from;

  try {
    // Get user ID from telegram_users table
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Check for existing pending withdrawal requests first
    const { data: pendingWithdrawals, error: pendingError } = await db.client
      .from('commission_withdrawals')
      .select('id, amount, created_at, withdrawal_type')
      .eq('user_id', telegramUser.user_id)
      .eq('status', 'pending')
      .order('created_at', { ascending: false })
      .limit(1);

    if (pendingError) {
      console.error('Error checking pending withdrawals:', pendingError);
      await ctx.replyWithMarkdown('‚ùå **Error checking existing requests**\n\nPlease try again.');
      return;
    }

    if (pendingWithdrawals && pendingWithdrawals.length > 0) {
      const pendingWithdrawal = pendingWithdrawals[0];
      const shortId = pendingWithdrawal.id.substring(0, 8);
      const submissionDate = new Date(pendingWithdrawal.created_at).toLocaleDateString();
      const submissionTime = new Date(pendingWithdrawal.created_at).toLocaleTimeString();

      await ctx.replyWithMarkdown(`‚ö†Ô∏è **PENDING WITHDRAWAL REQUEST EXISTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîç YOUR PENDING REQUEST:**
‚Ä¢ **Request ID:** #${shortId}
‚Ä¢ **Amount:** $${pendingWithdrawal.amount} USDT
‚Ä¢ **Type:** ${pendingWithdrawal.withdrawal_type.toUpperCase()}
‚Ä¢ **Submitted:** ${submissionDate} at ${submissionTime}
‚Ä¢ **Status:** ‚è≥ Awaiting admin approval

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚è∞ WHAT HAPPENS NEXT:**
‚Ä¢ Admin will review your request within 24-48 hours
‚Ä¢ You'll receive a notification when processed
‚Ä¢ If approved: Funds will be sent to your wallet
‚Ä¢ If rejected: You can submit a new request

**üí° WHAT YOU CAN DO NOW:**
‚Ä¢ **Wait:** Most requests are processed within 1-2 business days
‚Ä¢ **Check Status:** Use "View Pending Requests" for updates
‚Ä¢ **Contact Admin:** @TTTFOUNDER for urgent questions

**üö´ WHY CAN'T I SUBMIT ANOTHER?**
This prevents duplicate requests and ensures accurate balance management.
Your funds are safely tracked and will be processed fairly.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚è≥ View Pending Requests", callback_data: "view_pending_requests" }],
            [{ text: "üõí Use Commission for Shares", callback_data: "commission_to_shares" }],
            [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
            [{ text: "üìû Contact Admin", url: "https://t.me/TTTFOUNDER" }]
          ]
        }
      });
      return;
    }

    // Get commission balance
    const { data: balance, error: balanceError } = await db.client
      .from('commission_balances')
      .select('usdt_balance')
      .eq('user_id', telegramUser.user_id)
      .single();

    if (balanceError || !balance || balance.usdt_balance <= 0) {
      await ctx.replyWithMarkdown(`üí∏ **INSUFFICIENT BALANCE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚ùå No USDT commission available for withdrawal**

**üí∞ Current Balance:** $0.00 USDT

**üéØ TO EARN COMMISSIONS:**
‚Ä¢ Share your referral link
‚Ä¢ Invite friends to invest
‚Ä¢ Earn 15% USDT + 15% shares on their purchases

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üì§ Share Referral Link", callback_data: "share_referral" }],
            [{ text: "üîô Back to Commission Dashboard", callback_data: "view_commission" }]
          ]
        }
      });
      return;
    }

    const availableBalance = parseFloat(balance.usdt_balance);

    // Set user state for withdrawal amount input
    await setUserState(user.id, 'awaiting_withdrawal_amount', {
      availableBalance,
      withdrawalType: 'usdt'
    });

    const withdrawalMessage = `üí∏ **USDT COMMISSION WITHDRAWAL**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ Available Balance:** $${availableBalance.toFixed(2)} USDT

**üìù WITHDRAWAL PROCESS:**
1. **Enter withdrawal amount** (minimum $10.00)
2. **Provide USDT wallet address** (TRC-20 network)
3. **Admin review and approval** (24-48 hours)
4. **Payment processing** (1-3 business days)

**üí° IMPORTANT NOTES:**
‚Ä¢ Minimum withdrawal: $10.00 USDT
‚Ä¢ Networks: ETH, BSC, POL, TRON supported
‚Ä¢ Processing fee: $2.00 USDT (deducted from withdrawal)
‚Ä¢ Maximum daily withdrawal: $1,000.00 USDT

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üíµ Enter withdrawal amount (USD):**`;

    await ctx.replyWithMarkdown(withdrawalMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå Cancel Withdrawal", callback_data: "view_commission" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling USDT withdrawal:', error);
    await ctx.replyWithMarkdown('‚ùå **Error processing withdrawal request**\n\nPlease try again.');
  }
}

// Handle Commission to Shares Conversion
async function handleCommissionToShares(ctx) {
  const user = ctx.from;

  try {
    // Get user ID from telegram_users table
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // üîí SECURE BALANCE: Get commission balance with escrow information
    const balanceInfo = await getAvailableCommissionBalance(telegramUser.user_id);

    console.log(`üí∞ [BALANCE] User ${telegramUser.user_id} balance check:`, balanceInfo);

    // Check for existing pending conversion requests
    const { data: pendingConversions, error: pendingError } = await db.client
      .from('commission_conversions')
      .select('id')
      .eq('user_id', telegramUser.user_id)
      .eq('status', 'pending')
      .limit(1);

    if (pendingError) {
      console.error('Error checking pending conversions:', pendingError);
      await ctx.replyWithMarkdown('‚ùå **Error checking existing requests**\n\nPlease try again.');
      return;
    }

    if (pendingConversions && pendingConversions.length > 0) {
      // Get detailed information about the pending conversion
      const { data: pendingDetails, error: detailsError } = await db.client
        .from('commission_conversions')
        .select('id, usdt_amount, shares_requested, created_at')
        .eq('user_id', telegramUser.user_id)
        .eq('status', 'pending')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      const shortId = pendingDetails ? pendingDetails.id.substring(0, 8) : 'Unknown';
      const submissionDate = pendingDetails ? new Date(pendingDetails.created_at).toLocaleDateString() : 'Unknown';
      const submissionTime = pendingDetails ? new Date(pendingDetails.created_at).toLocaleTimeString() : 'Unknown';
      const requestedShares = pendingDetails ? pendingDetails.shares_requested : 0;
      const requestedAmount = pendingDetails ? pendingDetails.usdt_amount : 0;

      await ctx.replyWithMarkdown(`‚ö†Ô∏è **PENDING CONVERSION REQUEST EXISTS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîç YOUR PENDING REQUEST:**
‚Ä¢ **Request ID:** #${shortId}
‚Ä¢ **Shares Requested:** ${requestedShares} shares
‚Ä¢ **USDT Amount:** $${requestedAmount.toFixed(2)}
‚Ä¢ **Submitted:** ${submissionDate} at ${submissionTime}
‚Ä¢ **Status:** ‚è≥ Awaiting admin approval

**üí∞ CURRENT BALANCE:**
‚Ä¢ **Total Balance:** $${balanceInfo.totalBalance.toFixed(2)} USDT
‚Ä¢ **Locked (Escrowed):** $${balanceInfo.escrowedAmount.toFixed(2)} USDT
‚Ä¢ **Available:** $${balanceInfo.availableBalance.toFixed(2)} USDT

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚è∞ WHAT HAPPENS NEXT:**
‚Ä¢ Admin will review your request within 24-48 hours
‚Ä¢ You'll receive a notification when processed
‚Ä¢ If approved: USDT deducted, shares added to portfolio
‚Ä¢ If rejected: Escrowed funds will be released

**üí° WHAT YOU CAN DO NOW:**
‚Ä¢ **Wait:** Most requests are processed within 1-2 business days
‚Ä¢ **Check Status:** Use "View Pending Requests" for updates
‚Ä¢ **Contact Admin:** @TTTFOUNDER for urgent questions
‚Ä¢ **Use Available Balance:** $${balanceInfo.availableBalance.toFixed(2)} USDT still available

**üö´ WHY CAN'T I SUBMIT ANOTHER?**
This prevents duplicate requests and ensures accurate balance management.
Your funds are safely escrowed and will be processed fairly.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚è≥ View Pending Requests", callback_data: "view_pending_requests" }],
            [{ text: "üí∏ Withdraw USDT Instead", callback_data: "withdraw_usdt_commission" }],
            [{ text: "üí∞ View Commission Balance", callback_data: "view_commission" }],
            [{ text: "üìû Contact Admin", url: "https://t.me/TTTFOUNDER" }]
          ]
        }
      });
      return;
    }

    // üîí SECURE VALIDATION: Check available balance (not total balance)
    if (balanceInfo.availableBalance <= 0) {
      let insufficientMessage = `üí∞ **INSUFFICIENT AVAILABLE COMMISSION BALANCE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ Balance Details:**
‚Ä¢ **Total Balance:** $${balanceInfo.totalBalance.toFixed(2)} USDT
‚Ä¢ **Available Balance:** $${balanceInfo.availableBalance.toFixed(2)} USDT`;

      if (balanceInfo.escrowedAmount > 0) {
        insufficientMessage += `
‚Ä¢ **Currently Escrowed:** $${balanceInfo.escrowedAmount.toFixed(2)} USDT

**‚ö†Ô∏è Some of your balance is locked in pending requests.**`;
      }

      insufficientMessage += `

You need a positive available USDT commission balance to convert to shares.

**üí° How to increase available balance:**`;

      if (balanceInfo.escrowedAmount > 0) {
        insufficientMessage += `
‚Ä¢ Wait for pending requests to be processed`;
      }

      insufficientMessage += `
‚Ä¢ Refer new investors using your referral link
‚Ä¢ Earn 15% USDT commission on their investments
‚Ä¢ Use earned commissions to purchase more shares

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

      await ctx.replyWithMarkdown(insufficientMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üì§ Share Referral Link", callback_data: "share_referral" }],
            [{ text: "üîô Back to Commission Dashboard", callback_data: "view_commission" }]
          ]
        }
      });
      return;
    }

    // Get current phase information
    const { data: currentPhase, error: phaseError } = await db.client
      .from('investment_phases')
      .select('*')
      .eq('is_active', true)
      .single();

    if (phaseError || !currentPhase) {
      await ctx.replyWithMarkdown('‚ùå **Error loading current phase information**\n\nPlease try again.');
      return;
    }

    const sharePrice = parseFloat(currentPhase.price_per_share);
    const maxShares = Math.floor(balanceInfo.availableBalance / sharePrice);

    const conversionMessage = `üõí **CONVERT COMMISSION TO SHARES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ YOUR COMMISSION BALANCE:**
‚Ä¢ Available USDT: $${balanceInfo.availableBalance.toFixed(2)}

**üìä CURRENT PHASE INFORMATION:**
‚Ä¢ Phase ${currentPhase.phase_number}
‚Ä¢ Share Price: $${sharePrice.toFixed(2)} per share
‚Ä¢ Maximum Shares You Can Buy: ${maxShares} shares

**üí° CONVERSION PROCESS:**
1. Enter the number of shares you want to purchase
2. System calculates total cost
3. Request goes to admin for approval
4. Once approved: USDT deducted, shares added to portfolio

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Enter the number of shares you want to purchase (1-${maxShares}):**`;

    await ctx.replyWithMarkdown(conversionMessage, {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: `Enter shares (1-${maxShares})`
      }
    });

    // Set user state for commission conversion
    await setUserState(user.id, 'awaiting_commission_shares', {
      available_usdt: balanceInfo.availableBalance,
      share_price: sharePrice,
      max_shares: maxShares,
      phase_id: currentPhase.id,
      phase_number: currentPhase.phase_number
    });

  } catch (error) {
    console.error('Commission to shares error:', error);
    await ctx.replyWithMarkdown('‚ùå **Error processing request**\n\nPlease try again.');
  }
}

// Handle Withdrawal History
async function handleWithdrawalHistory(ctx) {
  const user = ctx.from;

  try {
    // Get user ID from telegram_users table
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (telegramError || !telegramUser) {
      await ctx.replyWithMarkdown('‚ùå **User not found**\n\nPlease register first.');
      return;
    }

    // Get withdrawal history (when table exists)
    const historyMessage = `üìã **WITHDRAWAL HISTORY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üöß FEATURE COMING SOON**

Your withdrawal history will be displayed here once the withdrawal system is fully implemented.

**üìä PLANNED FEATURES:**
‚Ä¢ Complete withdrawal transaction history
‚Ä¢ Status tracking (pending, approved, completed)
‚Ä¢ Transaction hash verification
‚Ä¢ Download statements
‚Ä¢ Filter by date range and status

**üí∞ CURRENT STATUS:**
‚Ä¢ Commission tracking: ‚úÖ Active
‚Ä¢ Balance management: ‚úÖ Active
‚Ä¢ Withdrawal requests: üöß In development
‚Ä¢ History tracking: üöß In development

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìû For withdrawal history inquiries, contact @TTTFOUNDER**`;

    await ctx.replyWithMarkdown(historyMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üí∞ View Current Balance", callback_data: "view_commission" }],
          [{ text: "üìß Contact Support", url: "https://t.me/TTTFOUNDER" }],
          [{ text: "üîô Back to Commission Dashboard", callback_data: "view_commission" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error loading withdrawal history:', error);
    await ctx.replyWithMarkdown('‚ùå **Error loading withdrawal history**\n\nPlease try again.');
  }
}

async function handleCopyReferralLink(ctx, callbackData) {
  const referralUsername = callbackData.replace('copy_referral_link_', '');
  const referralLink = `https://t.me/AureusAllianceBot?start=${referralUsername}`;

  // DEBUG: Log the generated link to verify it's correct
  console.log('üîó DEBUG - Copy referral link generated:', referralLink);
  console.log('üîó DEBUG - Username:', referralUsername);

  await ctx.answerCbQuery(`üìã Referral link copied!`);

  await ctx.replyWithMarkdown(`üìã **REFERRAL LINK COPIED**

**Your Personal Referral Link:**
\`${referralLink}\`

**üéØ HOW IT WORKS:**
‚Ä¢ Share this link with potential investors
‚Ä¢ When they click it, you're automatically assigned as their sponsor
‚Ä¢ You earn 15% USDT + 15% shares commission on their investments
‚Ä¢ No manual referral code entry needed!

**üöÄ QUICK SHARING MESSAGES:**

**üíé For WhatsApp/SMS:**
"üî• GOLD MINING OPPORTUNITY! Join me in owning real South African gold mines. Click: ${referralLink}"

**üì± For Social Media:**
"üí∞ Building wealth through gold mining! Join Aureus Alliance Holdings: ${referralLink} #GoldInvestment #WealthBuilding"

**üìß For Email:**
"I wanted to share an exciting gold mining investment opportunity with you. Aureus Alliance Holdings offers shares in real South African gold operations. Check it out: ${referralLink}"`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üì§ Share on Telegram", url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('üî• Join me in owning real South African gold mines!')}` }],
        [{ text: "üë• Back to Referral Dashboard", callback_data: "menu_referrals" }]
      ]
    }
  });
}

async function handleCopyReferral(ctx, callbackData) {
  const referralCode = callbackData.replace('copy_referral_', '');

  await ctx.answerCbQuery(`üìã Referral username copied: ${referralCode}`);

  await ctx.replyWithMarkdown(`üìã **REFERRAL USERNAME COPIED**

**Your Referral Username:** \`${referralCode}\`

**üöÄ QUICK SHARING MESSAGES:**

**üíé For WhatsApp/SMS:**
*"üî• GOLD MINING INVESTMENT OPPORTUNITY! Own shares in real South African gold mines. Starting at just $5. Massive profit potential! Use my referral '${referralCode}' here: https://t.me/AureusAllianceBot"*

**üì± For Social Media:**
*"üí∞ Just discovered an incredible gold mining investment! Real washplants, real gold, real profits. Early investors getting $1/share before it goes up! Use referral '${referralCode}': https://t.me/AureusAllianceBot #GoldInvestment #WealthBuilding"*

**üíº For Serious Investors:**
*"Professional gold mining investment opportunity in South Africa. 10 active washplants, 3,200 KG annual target. Phase 1 pricing available. Use referral '${referralCode}' for priority: https://t.me/AureusAllianceBot"*

**üìß For Email:**
*"I wanted to share an exclusive gold mining investment I discovered. Aureus Alliance Holdings operates real gold mines in South Africa with proven reserves. You can own shares starting at $1 each. Use my referral code '${referralCode}' when you register: https://t.me/AureusAllianceBot"*`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üì§ Share Full Investment Pitch", callback_data: "share_referral" }],
        [{ text: "üë• Back to Referral Dashboard", callback_data: "menu_referrals" }]
      ]
    }
  });
}

// LEGAL DOCUMENTS SYSTEM
// Handle legal documents menu
async function handleLegalDocuments(ctx) {
  const user = ctx.from;

  try {
    // Check if user has accepted NDA
    const hasNDA = await checkNDAAcceptance(user.id);

    if (!hasNDA) {
      await showNDAAcceptance(ctx);
      return;
    }

    // Show legal documents menu
    await showLegalDocumentsMenu(ctx);

  } catch (error) {
    console.error('Error handling legal documents:', error);
    await ctx.replyWithMarkdown('‚ùå **Error accessing legal documents**\n\nPlease try again or contact support.');
  }
}

// Check if user has accepted NDA
async function checkNDAAcceptance(telegramUserId) {
  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', telegramUserId)
      .single();

    if (userError || !telegramUser) {
      return false;
    }

    // Check NDA acceptance
    const { data: ndaAcceptance, error: ndaError } = await db.client
      .from('nda_acceptances')
      .select('id')
      .eq('user_id', telegramUser.user_id)
      .single();

    return !ndaError && ndaAcceptance;

  } catch (error) {
    console.error('Error checking NDA acceptance:', error);
    return false;
  }
}

// Show NDA acceptance screen
async function showNDAAcceptance(ctx) {
  const ndaMessage = `üîí **NON-DISCLOSURE AGREEMENT (NDA)**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚ö†Ô∏è CONFIDENTIAL LEGAL DOCUMENTS ACCESS**

To access Aureus Alliance Holdings' legal documents, you must first accept our Non-Disclosure Agreement.

**üìã NDA TERMS:**

**1. CONFIDENTIALITY OBLIGATION**
‚Ä¢ All documents contain proprietary and confidential information
‚Ä¢ Information may not be shared, copied, or distributed
‚Ä¢ Documents are for your personal review only

**2. PERMITTED USE**
‚Ä¢ Review for investment decision purposes only
‚Ä¢ Verify company legitimacy and compliance
‚Ä¢ Assess business operations and financial standing

**3. PROHIBITED ACTIONS**
‚Ä¢ Sharing documents with third parties
‚Ä¢ Public disclosure of confidential information
‚Ä¢ Commercial use of proprietary data
‚Ä¢ Reproduction or distribution of materials

**4. LEGAL CONSEQUENCES**
‚Ä¢ Breach may result in legal action
‚Ä¢ Damages and injunctive relief may be sought
‚Ä¢ Agreement governed by South African law

**üîê SECURITY NOTICE:**
‚Ä¢ Document access is logged and monitored
‚Ä¢ Your acceptance is legally binding
‚Ä¢ Timestamp and user details are recorded

**‚öñÔ∏è By accepting, you agree to be bound by these terms and acknowledge that violation may result in legal consequences.**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚úÖ I Accept the NDA Terms", callback_data: "accept_nda" }
      ],
      [
        { text: "‚ùå I Decline", callback_data: "decline_nda" }
      ],
      [
        { text: "üè† Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(ndaMessage, { reply_markup: keyboard });
}

// Show legal documents menu
async function showLegalDocumentsMenu(ctx) {
  const documentsMessage = `üìã **LEGAL DOCUMENTS CENTER**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîí CONFIDENTIAL BUSINESS DOCUMENTS**

Access to official company registration, tax compliance, banking, and operational documentation.

**üìë AVAILABLE DOCUMENTS:**

**üè¢ Company Registration**
Official CIPC registration certificate proving legal entity status

**üíº Tax Compliance**
SARS tax registration demonstrating regulatory compliance

**üè¶ Banking Verification**
FNB bank confirmation validating financial infrastructure

**‚õèÔ∏è Geological Assessment**
Professional gold placer analysis and operational report

**‚ö†Ô∏è CONFIDENTIALITY REMINDER:**
These documents contain proprietary information protected under your signed NDA. Unauthorized sharing is prohibited.

**üìä ACCESS LOG:**
Your document access is monitored and recorded for security purposes.`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üè¢ CIPC Registration Certificate", callback_data: "view_document_cipc" }
      ],
      [
        { text: "üíº SARS Tax Registration", callback_data: "view_document_sars" }
      ],
      [
        { text: "üè¶ FNB Bank Confirmation", callback_data: "view_document_fnb" }
      ],
      [
        { text: "‚õèÔ∏è Ubuntu Afrique Placer Report", callback_data: "view_document_placer" }
      ],
      [
        { text: "üè† Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(documentsMessage, { reply_markup: keyboard });
}

// Handle NDA acceptance
async function handleNDAAcceptance(ctx) {
  const user = ctx.from;

  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.answerCbQuery('‚ùå User not found');
      return;
    }

    // Record NDA acceptance
    const { error: ndaError } = await db.client
      .from('nda_acceptances')
      .insert({
        user_id: telegramUser.user_id,
        telegram_user_id: user.id,
        username: user.username || null,
        full_name: user.first_name + (user.last_name ? ` ${user.last_name}` : ''),
        accepted_at: new Date().toISOString()
      });

    if (ndaError) {
      console.error('Error recording NDA acceptance:', ndaError);
      await ctx.answerCbQuery('‚ùå Error recording acceptance');
      return;
    }

    await ctx.answerCbQuery('‚úÖ NDA Accepted');

    // Show success message and legal documents menu
    const successMessage = `‚úÖ **NDA ACCEPTED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîí CONFIDENTIALITY AGREEMENT CONFIRMED**

‚Ä¢ **Accepted:** ${new Date().toLocaleString()}
‚Ä¢ **User:** ${user.first_name} (@${user.username || 'N/A'})
‚Ä¢ **Status:** Legally Binding

**üìã You now have access to confidential legal documents.**

**‚ö†Ô∏è REMINDER:** All documents are confidential and protected under the NDA you just accepted. Unauthorized sharing is prohibited.`;

    await ctx.replyWithMarkdown(successMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìã View Legal Documents", callback_data: "menu_legal_documents" }],
          [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling NDA acceptance:', error);
    await ctx.answerCbQuery('‚ùå Error processing acceptance');
  }
}

// Handle NDA decline
async function handleNDADecline(ctx) {
  await ctx.answerCbQuery('NDA Declined');

  const declineMessage = `‚ùå **NDA DECLINED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîí ACCESS DENIED**

You have declined to accept the Non-Disclosure Agreement.

**üìã CONSEQUENCES:**
‚Ä¢ Cannot access confidential legal documents
‚Ä¢ Company registration and compliance documents unavailable
‚Ä¢ Banking and operational reports restricted

**üí° ALTERNATIVE OPTIONS:**
‚Ä¢ Review public company information
‚Ä¢ Contact support for general inquiries
‚Ä¢ Accept NDA later to gain document access

**üîÑ You can return to accept the NDA at any time through the Legal Documents menu.**`;

  await ctx.replyWithMarkdown(declineMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîÑ Reconsider NDA", callback_data: "menu_legal_documents" }],
        [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });
}

// Handle document viewing
async function handleDocumentView(ctx, callbackData) {
  const user = ctx.from;
  const documentType = callbackData.split('_')[2]; // Extract document type from callback

  try {
    // Verify NDA acceptance
    const hasNDA = await checkNDAAcceptance(user.id);

    if (!hasNDA) {
      await ctx.answerCbQuery('‚ùå NDA required for document access');
      await showNDAAcceptance(ctx);
      return;
    }

    // Document configuration
    const documents = {
      'cipc': {
        name: 'CIPC Registration Certificate',
        url: 'https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets//cipc.pdf',
        description: 'Official company registration from Companies and Intellectual Property Commission',
        icon: 'üè¢'
      },
      'sars': {
        name: 'SARS Tax Registration',
        url: 'https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets//sars.pdf',
        description: 'South African Revenue Service tax registration documentation',
        icon: 'üíº'
      },
      'fnb': {
        name: 'FNB Bank Confirmation',
        url: 'https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets//fnb.pdf',
        description: 'Official bank account confirmation from First National Bank',
        icon: 'üè¶'
      },
      'placer': {
        name: 'Ubuntu Afrique Placer Report',
        url: 'https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets//Ubuntu_Afrique_Kadoma_Placer_Report.pdf',
        description: 'Professional geological assessment and gold placer analysis report',
        icon: '‚õèÔ∏è'
      }
    };

    const document = documents[documentType];

    if (!document) {
      await ctx.answerCbQuery('‚ùå Document not found');
      return;
    }

    // Log document access
    await logDocumentAccess(user.id, documentType, document.url, user.username);

    await ctx.answerCbQuery(`üìÑ Opening ${document.name}`);

    // Send document access message
    const accessMessage = `üìÑ **DOCUMENT ACCESS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${document.icon} **${document.name}**

**üìã Description:** ${document.description}

**üîí Confidentiality Notice:** This document is protected under your signed NDA. Unauthorized sharing is prohibited.

**üìä Access Logged:** ${new Date().toLocaleString()}

**üì± Click the button below to open the document in your browser/PDF viewer:**`;

    await ctx.replyWithMarkdown(accessMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: `üìÑ Open ${document.name}`, url: document.url }],
          [{ text: "üìã Back to Legal Documents", callback_data: "menu_legal_documents" }],
          [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling document view:', error);
    await ctx.answerCbQuery('‚ùå Error accessing document');
  }
}

// Log document access
async function logDocumentAccess(telegramUserId, documentType, documentUrl, username) {
  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', telegramUserId)
      .single();

    if (userError || !telegramUser) {
      console.error('Error getting user for document access log:', userError);
      return;
    }

    // Log the access
    const { error: logError } = await db.client
      .from('document_access_logs')
      .insert({
        user_id: telegramUser.user_id,
        document_type: documentType,
        document_url: documentUrl,
        telegram_user_id: telegramUserId,
        username: username || null,
        has_nda_acceptance: true,
        accessed_at: new Date().toISOString()
      });

    if (logError) {
      console.error('Error logging document access:', logError);
    }

  } catch (error) {
    console.error('Error in logDocumentAccess:', error);
  }
}

// KYC (KNOW YOUR CUSTOMER) SYSTEM
// Trigger KYC collection if needed after successful payment
async function triggerKYCCollectionIfNeeded(userId) {
  try {
    console.log(`üîç [KYC] Checking KYC status for user ID: ${userId}`);

    // Check if user has already completed KYC
    const hasKYC = await checkKYCCompletion(userId);

    if (hasKYC) {
      console.log(`‚úÖ [KYC] User ${userId} already has completed KYC - skipping collection`);
      return;
    }

    console.log(`üìã [KYC] User ${userId} needs to complete KYC - triggering collection`);

    // Get user's Telegram ID to send KYC request
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('telegram_id, username')
      .eq('user_id', userId)
      .single();

    if (telegramError || !telegramUser) {
      console.error('‚ùå [KYC] Error getting user Telegram ID:', telegramError);
      return;
    }

    // Send KYC collection request to user
    await sendKYCCollectionRequest(telegramUser.telegram_id, telegramUser.username);

  } catch (error) {
    console.error('‚ùå [KYC] Error in triggerKYCCollectionIfNeeded:', error);
  }
}

// Check if user has completed KYC
async function checkKYCCompletion(userId) {
  try {
    const { data: kycData, error: kycError } = await db.client
      .from('kyc_information')
      .select('id, kyc_status')
      .eq('user_id', userId)
      .eq('kyc_status', 'completed')
      .single();

    return !kycError && kycData;

  } catch (error) {
    console.error('‚ùå [KYC] Error checking KYC completion:', error);
    return false;
  }
}

// Send KYC collection request to user
async function sendKYCCollectionRequest(telegramId, username) {
  try {
    console.log(`üìã [KYC] Sending KYC collection request to user ${username} (${telegramId})`);

    const kycMessage = `üéâ **CONGRATULATIONS ON YOUR SHARE PURCHASE!**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã COMPLETE KYC FOR SHARE CERTIFICATE**

To generate and send your official share certificate, we need to collect some additional information as required by financial regulations.

**üîí WHAT IS KYC?**
KYC (Know Your Customer) is a regulatory requirement that helps us:
‚Ä¢ Verify your identity for legal compliance
‚Ä¢ Generate personalized share certificates
‚Ä¢ Ensure secure delivery of official documents
‚Ä¢ Meet international financial standards

**üìã INFORMATION REQUIRED:**
‚Ä¢ Full legal name (as on government ID)
‚Ä¢ Government ID or Passport number
‚Ä¢ Complete physical address
‚Ä¢ Country of residence
‚Ä¢ Phone number and email address

**‚è∞ CERTIFICATE TIMELINE:**
Once KYC is completed, your share certificate will be generated and sent within 48 hours (Monday-Friday, excluding weekends and holidays).

**üîê PRIVACY & SECURITY:**
‚Ä¢ All information is encrypted and securely stored
‚Ä¢ Data is used only for certificate generation
‚Ä¢ Full compliance with privacy regulations
‚Ä¢ Your information is never shared with third parties

**‚úÖ Ready to complete your KYC and receive your share certificate?**`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: "üìã Start KYC Process", callback_data: "start_kyc_process" }
        ],
        [
          { text: "‚ÑπÔ∏è Learn More About KYC", callback_data: "kyc_info" }
        ],
        [
          { text: "‚è∞ Complete Later", callback_data: "kyc_later" }
        ],
        [
          { text: "üè† Back to Dashboard", callback_data: "main_menu" }
        ]
      ]
    };

    // Send KYC request message
    await sendAudioNotificationToUser(
      telegramId,
      kycMessage,
      'KYC',
      {
        reply_markup: keyboard
      },
      true // Enable audio notification for KYC requests
    );

    console.log(`‚úÖ [KYC] KYC collection request sent successfully to user ${username}`);

  } catch (error) {
    console.error('‚ùå [KYC] Error sending KYC collection request:', error);
  }
}

// Show mandatory KYC dashboard (blocks access to main features)
async function showKYCDashboard(ctx, userId) {
  try {
    console.log(`üìã [KYC] Showing mandatory KYC dashboard for user ${userId}`);

    // Check if user has any approved payments (which would trigger KYC requirement)
    const { data: approvedPayments, error: paymentError } = await db.client
      .from('crypto_payment_transactions')
      .select('id, amount, created_at')
      .eq('user_id', userId)
      .eq('status', 'approved')
      .order('created_at', { ascending: false })
      .limit(1);

    let kycReason = '';
    if (approvedPayments && approvedPayments.length > 0) {
      const payment = approvedPayments[0];
      kycReason = `\n**üéâ CONGRATULATIONS!**\nYour payment of $${payment.amount} has been approved!\n\n`;
    }

    const kycDashboardMessage = `üîí **KYC VERIFICATION REQUIRED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${kycReason}**üìã COMPLETE YOUR KYC TO CONTINUE**

To access your dashboard and receive your share certificate, you must complete the KYC (Know Your Customer) verification process.

**üîí WHAT IS KYC?**
KYC is a regulatory requirement that helps us:
‚Ä¢ ‚úÖ Verify your identity for legal compliance
‚Ä¢ üìú Generate personalized share certificates
‚Ä¢ üîê Ensure secure delivery of official documents
‚Ä¢ ‚öñÔ∏è Meet international financial standards

**üìã INFORMATION REQUIRED:**
‚Ä¢ üë§ Full legal name (as on government ID)
‚Ä¢ üÜî Government ID or Passport number
‚Ä¢ üè† Complete physical address
‚Ä¢ üåç Country of residence
‚Ä¢ üìû Phone number and email address

**‚è∞ CERTIFICATE TIMELINE:**
Once KYC is completed, your share certificate will be generated and sent within 48 hours (Monday-Friday).

**üîê PRIVACY & SECURITY:**
‚Ä¢ üîí All information is encrypted and securely stored
‚Ä¢ üìã Data is used only for certificate generation
‚Ä¢ üõ°Ô∏è Full compliance with privacy regulations
‚Ä¢ üö´ Your information is never shared with third parties

**‚ö†Ô∏è IMPORTANT:**
You cannot access other features until KYC is completed. This is mandatory for all shareholders.`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: "üìã Complete KYC Now", callback_data: "start_kyc_process" }
        ],
        [
          { text: "‚ÑπÔ∏è Learn More About KYC", callback_data: "kyc_info" }
        ],
        [
          { text: "üìû Contact Support", callback_data: "menu_help" }
        ]
      ]
    };

    await ctx.replyWithMarkdown(kycDashboardMessage, {
      reply_markup: keyboard
    });

  } catch (error) {
    console.error('‚ùå [KYC] Error showing KYC dashboard:', error);
    await ctx.reply('‚ùå Error loading KYC dashboard. Please contact support.');
  }
}

// Handle start KYC process
async function handleStartKYCProcess(ctx) {
  const user = ctx.from;

  try {
    // Check if user already has KYC
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.answerCbQuery('‚ùå User not found');
      return;
    }

    const hasKYC = await checkKYCCompletion(telegramUser.user_id);

    if (hasKYC) {
      await ctx.answerCbQuery('‚úÖ KYC already completed');
      await showKYCAlreadyCompleted(ctx);
      return;
    }

    // Initialize KYC session
    ctx.session.kyc = {
      step: 'privacy_consent',
      data: {},
      user_id: telegramUser.user_id
    };

    await showKYCPrivacyConsent(ctx);

  } catch (error) {
    console.error('Error starting KYC process:', error);
    await ctx.answerCbQuery('‚ùå Error starting KYC process');
  }
}

// Show KYC privacy consent
async function showKYCPrivacyConsent(ctx) {
  const consentMessage = `üîí **DATA PRIVACY & CONSENT**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã KYC DATA COLLECTION NOTICE**

Before we collect your personal information, please review and accept our data privacy terms:

**üîê WHAT WE COLLECT:**
‚Ä¢ Full legal name (for certificate generation)
‚Ä¢ Government ID or Passport number (for identity verification)
‚Ä¢ Physical address (for document delivery)
‚Ä¢ Contact information (phone and email)

**üõ°Ô∏è HOW WE PROTECT YOUR DATA:**
‚Ä¢ All sensitive information is encrypted
‚Ä¢ Data is stored securely in compliance with regulations
‚Ä¢ Access is restricted to authorized personnel only
‚Ä¢ Information is used solely for certificate generation

**üìã YOUR RIGHTS:**
‚Ä¢ Right to access your personal data
‚Ä¢ Right to correct inaccurate information
‚Ä¢ Right to request data deletion (subject to legal requirements)
‚Ä¢ Right to withdraw consent (may affect certificate generation)

**‚öñÔ∏è LEGAL BASIS:**
Data collection is necessary for:
‚Ä¢ Regulatory compliance (KYC/AML requirements)
‚Ä¢ Contract fulfillment (share certificate generation)
‚Ä¢ Legal obligations under financial regulations

**üåç INTERNATIONAL TRANSFERS:**
Your data may be processed in secure facilities outside your country in compliance with applicable data protection laws.

**üìû CONTACT:**
For privacy questions: support@aureus.africa

**‚úÖ By proceeding, you consent to the collection and processing of your personal data as described above.**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚úÖ I Accept & Continue", callback_data: "kyc_accept_privacy" }
      ],
      [
        { text: "üìã Read Full Privacy Policy", callback_data: "view_privacy_policy" }
      ],
      [
        { text: "‚ùå I Decline", callback_data: "kyc_decline_privacy" }
      ],
      [
        { text: "üè† Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(consentMessage, { reply_markup: keyboard });
}

// Handle KYC info request
async function handleKYCInfo(ctx) {
  const infoMessage = `‚ÑπÔ∏è **ABOUT KYC (KNOW YOUR CUSTOMER)**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîç WHAT IS KYC?**
KYC (Know Your Customer) is a regulatory process used by financial institutions to verify the identity of their clients.

**‚öñÔ∏è WHY IS IT REQUIRED?**
‚Ä¢ **Legal Compliance:** Required by financial regulations
‚Ä¢ **Anti-Money Laundering:** Prevents illegal financial activities
‚Ä¢ **Identity Verification:** Ensures legitimate transactions
‚Ä¢ **Document Security:** Enables secure certificate generation

**üìã WHAT INFORMATION IS NEEDED?**
‚Ä¢ **Personal Details:** Full legal name as on government ID
‚Ä¢ **Identity Verification:** ID number or passport number
‚Ä¢ **Contact Information:** Phone number and email address
‚Ä¢ **Address Verification:** Complete physical address

**üîí IS MY DATA SAFE?**
‚Ä¢ All information is encrypted and securely stored
‚Ä¢ Data is used only for regulatory compliance and certificate generation
‚Ä¢ We follow international data protection standards
‚Ä¢ Your privacy is our top priority

**‚è∞ HOW LONG DOES IT TAKE?**
‚Ä¢ KYC collection: 5-10 minutes
‚Ä¢ Certificate generation: 48 hours (business days)
‚Ä¢ Certificate delivery: Via secure email

**üìú SHARE CERTIFICATE BENEFITS:**
‚Ä¢ Official proof of ownership
‚Ä¢ Legal document for your records
‚Ä¢ Required for dividend claims
‚Ä¢ Transferable investment asset

**üí° WHEN SHOULD I COMPLETE KYC?**
Complete KYC as soon as possible after your first share purchase to receive your certificate promptly.`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üìã Start KYC Process", callback_data: "start_kyc_process" }
      ],
      [
        { text: "üè† Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(infoMessage, { reply_markup: keyboard });
}

// Handle KYC later
async function handleKYCLater(ctx) {
  await ctx.answerCbQuery('KYC postponed');

  const laterMessage = `‚è∞ **KYC POSTPONED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìã KYC COMPLETION REMINDER**

You have chosen to complete your KYC later. Please note:

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ Your share certificate cannot be generated without KYC
‚Ä¢ KYC is required for regulatory compliance
‚Ä¢ Certificate delivery will be delayed until KYC is completed

**‚è∞ WHEN TO COMPLETE:**
You can complete your KYC at any time by:
‚Ä¢ Going to your portfolio and clicking "Complete KYC"
‚Ä¢ Returning to this menu through the dashboard
‚Ä¢ Contacting support for assistance

**üìû NEED HELP?**
If you have questions about the KYC process, please contact our support team.

**üí° RECOMMENDATION:**
Complete KYC as soon as possible to receive your share certificate and ensure full compliance with your investment.`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üìã Complete KYC Now", callback_data: "start_kyc_process" }
      ],
      [
        { text: "üíº View Portfolio", callback_data: "view_portfolio" }
      ],
      [
        { text: "üè† Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(laterMessage, { reply_markup: keyboard });
}

// Handle KYC step processing
async function handleKYCStep(ctx, callbackData) {
  const user = ctx.from;

  try {
    if (callbackData === 'kyc_accept_privacy') {
      // User accepted privacy terms, start data collection
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.privacy_accepted = true;
      ctx.session.kyc.step = 'first_name';

      await showKYCFirstNameStep(ctx);

    } else if (callbackData === 'kyc_decline_privacy') {
      await handleKYCDeclinePrivacy(ctx);

    } else if (callbackData === 'kyc_submit_data') {
      await handleKYCSubmitData(ctx);

    } else if (callbackData === 'kyc_id_type_national') {
      // User selected South African ID
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.id_type = 'national_id';
      ctx.session.kyc.step = 'awaiting_id_number';
      await showKYCIdNumberStep(ctx, 'national');

    } else if (callbackData === 'kyc_id_type_passport') {
      // User selected International Passport
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.id_type = 'passport';
      ctx.session.kyc.step = 'awaiting_id_number';
      await showKYCIdNumberStep(ctx, 'passport');

    } else if (callbackData === 'kyc_back_last_name') {
      // Go back to last name step
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.step = 'awaiting_last_name';
      await showKYCLastNameStep(ctx);

    } else if (callbackData === 'kyc_back_id_type') {
      // Go back to ID type selection step
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.step = 'awaiting_id_type';
      await showKYCIdTypeStep(ctx);

    } else if (callbackData === 'kyc_back_id_number') {
      // Go back to ID number step
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.step = 'awaiting_id_number';
      await showKYCIdNumberStep(ctx, ctx.session.kyc.id_type === 'national_id' ? 'national' : 'passport');

    } else if (callbackData === 'kyc_back_phone') {
      // Go back to phone step
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.step = 'awaiting_phone';
      await showKYCPhoneStep(ctx);

    } else if (callbackData === 'kyc_back_email') {
      // Go back to email step
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.step = 'awaiting_email';
      await showKYCEmailStep(ctx);

    } else if (callbackData === 'kyc_back_address') {
      // Go back to address step
      ctx.session.kyc = ctx.session.kyc || {};
      ctx.session.kyc.step = 'awaiting_address';
      await showKYCAddressStep(ctx);

    } else {
      console.log(`‚ùå [KYC] Unknown KYC step: ${callbackData}`);
      await ctx.answerCbQuery('Unknown KYC step');
    }

  } catch (error) {
    console.error('Error handling KYC step:', error);
    await ctx.answerCbQuery('‚ùå Error processing KYC step');
  }
}

// Show first name collection step
async function showKYCFirstNameStep(ctx) {
  const firstNameMessage = `üìù **KYC STEP 1 OF 6: FIRST NAME**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üë§ ENTER YOUR FIRST NAME**

Please enter your first name exactly as it appears on your government-issued ID or passport.

**üìã REQUIREMENTS:**
‚Ä¢ Use your legal first name only
‚Ä¢ Match your official identification document
‚Ä¢ No nicknames or abbreviations
‚Ä¢ Letters only (no numbers or symbols)

**üí° EXAMPLE:**
If your ID shows "John Michael Smith", enter: **John**

**‚ö†Ô∏è IMPORTANT:**
This information will appear on your share certificate, so accuracy is essential.

**‚úçÔ∏è Please type your first name below:**`;

  ctx.session.kyc.step = 'awaiting_first_name';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to Privacy Consent", callback_data: "start_kyc_process" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(firstNameMessage, { reply_markup: keyboard });
}

// Handle KYC decline privacy
async function handleKYCDeclinePrivacy(ctx) {
  await ctx.answerCbQuery('Privacy consent declined');

  const declineMessage = `‚ùå **PRIVACY CONSENT DECLINED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üîí KYC PROCESS CANCELLED**

You have declined to provide consent for data collection.

**üìã CONSEQUENCES:**
‚Ä¢ Cannot complete KYC verification
‚Ä¢ Share certificate cannot be generated
‚Ä¢ Regulatory compliance requirements not met
‚Ä¢ Investment documentation incomplete

**üí° ALTERNATIVES:**
‚Ä¢ Review our privacy policy for more details
‚Ä¢ Contact support with privacy concerns
‚Ä¢ Complete KYC later when ready

**üîÑ CHANGE YOUR MIND?**
You can restart the KYC process at any time by accepting the privacy terms.`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîÑ Restart KYC Process", callback_data: "start_kyc_process" }
      ],
      [
        { text: "üìã Read Privacy Policy", callback_data: "view_privacy_policy" }
      ],
      [
        { text: "üè† Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(declineMessage, { reply_markup: keyboard });
}

// Show KYC already completed message
async function showKYCAlreadyCompleted(ctx) {
  const completedMessage = `‚úÖ **KYC ALREADY COMPLETED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üéâ CONGRATULATIONS!**

Your KYC (Know Your Customer) verification has already been completed successfully.

**üìú SHARE CERTIFICATE STATUS:**
Your share certificate has been requested and will be generated within 48 hours (business days).

**üìß DELIVERY:**
The certificate will be sent to your registered email address once ready.

**üíº WHAT'S NEXT:**
‚Ä¢ Monitor your email for certificate delivery
‚Ä¢ View your portfolio to track your investments
‚Ä¢ Consider additional share purchases
‚Ä¢ Share your referral link to earn commissions

**üìû NEED HELP?**
Contact support if you have questions about your certificate or KYC status.`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üíº View Portfolio", callback_data: "view_portfolio" }
      ],
      [
        { text: "üì§ Share Referral Link", callback_data: "share_referral" }
      ],
      [
        { text: "üè† Back to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(completedMessage, { reply_markup: keyboard });
}

// Handle KYC text input
async function handleKYCTextInput(ctx, text) {
  const user = ctx.from;
  const kycSession = ctx.session.kyc;

  try {
    switch (kycSession.step) {
      case 'awaiting_first_name':
        await handleKYCFirstNameInput(ctx, text);
        break;
      case 'awaiting_last_name':
        await handleKYCLastNameInput(ctx, text);
        break;
      case 'awaiting_id_type':
        await handleKYCIdTypeInput(ctx, text);
        break;
      case 'awaiting_id_number':
        await handleKYCIdNumberInput(ctx, text);
        break;
      case 'awaiting_phone':
        await handleKYCPhoneInput(ctx, text);
        break;
      case 'awaiting_email':
        await handleKYCEmailInput(ctx, text);
        break;
      case 'awaiting_address':
        await handleKYCAddressInput(ctx, text);
        break;
      case 'awaiting_city':
        await handleKYCCityInput(ctx, text);
        break;
      default:
        await ctx.reply('‚ùì Unknown KYC step. Please restart the process.');
        break;
    }
  } catch (error) {
    console.error('Error handling KYC text input:', error);
    await ctx.reply('‚ùå Error processing your input. Please try again.');
  }
}

// Handle first name input
async function handleKYCFirstNameInput(ctx, firstName) {
  // Validate first name
  if (!firstName || firstName.trim().length < 2) {
    await ctx.reply('‚ùå Please enter a valid first name (at least 2 characters).');
    return;
  }

  if (!/^[a-zA-Z\s'-]+$/.test(firstName.trim())) {
    await ctx.reply('‚ùå First name can only contain letters, spaces, hyphens, and apostrophes.');
    return;
  }

  // Store first name
  ctx.session.kyc.data.first_name = firstName.trim();

  // Move to next step
  await showKYCLastNameStep(ctx);
}

// Show last name step
async function showKYCLastNameStep(ctx) {
  const lastNameMessage = `üìù **KYC STEP 2 OF 6: LAST NAME**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üë§ ENTER YOUR LAST NAME**

Please enter your last name (surname) exactly as it appears on your government-issued ID or passport.

**üìã REQUIREMENTS:**
‚Ä¢ Use your legal last name/surname only
‚Ä¢ Match your official identification document
‚Ä¢ No nicknames or abbreviations
‚Ä¢ Letters only (no numbers or symbols)

**üí° EXAMPLE:**
If your ID shows "John Michael Smith", enter: **Smith**

**‚úÖ FIRST NAME SAVED:** ${ctx.session.kyc.data.first_name}

**‚úçÔ∏è Please type your last name below:**`;

  ctx.session.kyc.step = 'awaiting_last_name';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to First Name", callback_data: "kyc_back_first_name" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(lastNameMessage, { reply_markup: keyboard });
}

// Handle last name input
async function handleKYCLastNameInput(ctx, lastName) {
  // Validate last name
  if (!lastName || lastName.trim().length < 2) {
    await ctx.reply('‚ùå Please enter a valid last name (at least 2 characters).');
    return;
  }

  if (!/^[a-zA-Z\s'-]+$/.test(lastName.trim())) {
    await ctx.reply('‚ùå Last name can only contain letters, spaces, hyphens, and apostrophes.');
    return;
  }

  // Store last name
  ctx.session.kyc.data.last_name = lastName.trim();

  // Move to next step
  await showKYCIdTypeStep(ctx);
}

// Handle ID number input
async function handleKYCIdNumberInput(ctx, idNumber) {
  const idType = ctx.session.kyc.id_type;

  // Validate ID number
  if (!idNumber || idNumber.trim().length < 5) {
    await ctx.reply('‚ùå Please enter a valid ID/passport number (at least 5 characters).');
    return;
  }

  const cleanIdNumber = idNumber.trim().replace(/\s+/g, '');

  // Validate based on ID type
  if (idType === 'national_id') {
    // South African ID validation
    if (!/^\d{13}$/.test(cleanIdNumber)) {
      await ctx.reply('‚ùå South African ID number must be exactly 13 digits. Please try again.');
      return;
    }
  } else if (idType === 'passport') {
    // Passport validation
    if (!/^[A-Z0-9]{6,15}$/i.test(cleanIdNumber)) {
      await ctx.reply('‚ùå Passport number must be 6-15 characters (letters and numbers only). Please try again.');
      return;
    }
  }

  // Store ID number
  ctx.session.kyc.data.id_number = cleanIdNumber;

  // Move to next step - phone number
  await showKYCPhoneStep(ctx);
}

// Show ID type step
async function showKYCIdTypeStep(ctx) {
  const idTypeMessage = `üìù **KYC STEP 3 OF 6: IDENTIFICATION TYPE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üÜî SELECT YOUR IDENTIFICATION TYPE**

Please choose the type of government-issued identification you will provide:

**üìã AVAILABLE OPTIONS:**

**üáøüá¶ SOUTH AFRICAN RESIDENTS:**
‚Ä¢ National ID Number (13-digit SA ID)

**üåç INTERNATIONAL RESIDENTS:**
‚Ä¢ Passport Number (from any country)

**‚úÖ NAME SAVED:** ${ctx.session.kyc.data.first_name} ${ctx.session.kyc.data.last_name}

**üí° IMPORTANT:**
Choose the document type that matches what you'll provide for verification.`;

  ctx.session.kyc.step = 'awaiting_id_type';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üáøüá¶ South African ID Number", callback_data: "kyc_id_type_national" }
      ],
      [
        { text: "üåç International Passport", callback_data: "kyc_id_type_passport" }
      ],
      [
        { text: "üîô Back to Last Name", callback_data: "kyc_back_last_name" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(idTypeMessage, { reply_markup: keyboard });
}

// Show ID number collection step
async function showKYCIdNumberStep(ctx, idType) {
  const isNational = idType === 'national';
  const idTypeDisplay = isNational ? 'South African ID Number' : 'International Passport Number';
  const requirements = isNational
    ? '‚Ä¢ 13-digit South African ID number\n‚Ä¢ Format: YYMMDDGGGGGGG\n‚Ä¢ No spaces or dashes'
    : '‚Ä¢ Valid passport number\n‚Ä¢ As shown on your passport\n‚Ä¢ Letters and numbers only';

  const idNumberMessage = `üìù **KYC STEP 4 OF 6: ${idTypeDisplay.toUpperCase()}**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üÜî ENTER YOUR ${idTypeDisplay.toUpperCase()}**

Please enter your ${idTypeDisplay.toLowerCase()} exactly as it appears on your identification document.

**üìã REQUIREMENTS:**
${requirements}

**üí° EXAMPLE:**
${isNational ? 'If your ID is 9001015009087, enter: **9001015009087**' : 'If your passport is AB1234567, enter: **AB1234567**'}

**‚ö†Ô∏è IMPORTANT:**
This information will be used for identity verification and must match your official documents.

**‚úçÔ∏è Please type your ${idTypeDisplay.toLowerCase()} below:**`;

  ctx.session.kyc.step = 'awaiting_id_number';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to ID Type", callback_data: "kyc_back_id_type" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(idNumberMessage, { reply_markup: keyboard });
}

// Temporary KYC completion (until full system is implemented)
async function showKYCTemporaryCompletion(ctx) {
  const completionMessage = `‚úÖ **KYC DATA COLLECTED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üéâ BASIC KYC INFORMATION SAVED:**

**üë§ Name:** ${ctx.session.kyc.data.first_name} ${ctx.session.kyc.data.last_name}
**üÜî ID Type:** ${ctx.session.kyc.id_type === 'national_id' ? 'South African ID' : 'International Passport'}
**üìã ID Number:** ${ctx.session.kyc.data.id_number}

**‚ö†Ô∏è SYSTEM NOTICE:**
The full KYC system (including phone, email, address collection) is currently being finalized. Your basic information has been saved and you can now access your dashboard.

**üìã NEXT STEPS:**
‚Ä¢ Complete KYC system will be available soon
‚Ä¢ You will be notified when additional information is needed
‚Ä¢ Your share certificates will be generated once full KYC is complete

**üè† You can now return to your dashboard to continue using the bot.**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üè† Return to Dashboard", callback_data: "main_menu" }
      ],
      [
        { text: "üíº View Portfolio", callback_data: "view_portfolio" }
      ]
    ]
  };

  // Clear KYC session
  ctx.session.kyc = null;

  await ctx.replyWithMarkdown(completionMessage, { reply_markup: keyboard });
}

// Show phone number collection step
async function showKYCPhoneStep(ctx) {
  const phoneMessage = `üìù **KYC STEP 5 OF 6: PHONE NUMBER**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìû ENTER YOUR PHONE NUMBER**

Please enter your phone number for verification and communication purposes.

**üìã REQUIREMENTS:**
‚Ä¢ Include country code (e.g., +27 for South Africa)
‚Ä¢ Use international format
‚Ä¢ Numbers only (no spaces or special characters except +)

**üí° EXAMPLES:**
‚Ä¢ South Africa: **+27821234567**
‚Ä¢ International: **+1234567890**

**‚úÖ INFORMATION SAVED:**
‚Ä¢ **Name:** ${ctx.session.kyc.data.first_name} ${ctx.session.kyc.data.last_name}
‚Ä¢ **ID:** ${ctx.session.kyc.data.id_number}

**‚úçÔ∏è Please type your phone number below:**`;

  ctx.session.kyc.step = 'awaiting_phone';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to ID Number", callback_data: "kyc_back_id_number" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(phoneMessage, { reply_markup: keyboard });
}

// Handle phone number input
async function handleKYCPhoneInput(ctx, phoneNumber) {
  // Validate phone number
  if (!phoneNumber || phoneNumber.trim().length < 8) {
    await ctx.reply('‚ùå Please enter a valid phone number (at least 8 digits).');
    return;
  }

  const cleanPhone = phoneNumber.trim().replace(/\s+/g, '');

  // Basic phone validation (international format)
  if (!/^\+?[1-9]\d{7,14}$/.test(cleanPhone)) {
    await ctx.reply('‚ùå Please enter a valid phone number with country code (e.g., +27821234567).');
    return;
  }

  // Store phone number
  ctx.session.kyc.data.phone_number = cleanPhone;

  // Move to next step - email
  await showKYCEmailStep(ctx);
}

// Show email collection step
async function showKYCEmailStep(ctx) {
  const emailMessage = `üìù **KYC STEP 6 OF 6: EMAIL ADDRESS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìß ENTER YOUR EMAIL ADDRESS**

Please enter your email address for certificate delivery and important communications.

**üìã REQUIREMENTS:**
‚Ä¢ Valid email format (example@domain.com)
‚Ä¢ Active email address you can access
‚Ä¢ Will be used for share certificate delivery

**üí° EXAMPLES:**
‚Ä¢ **john.smith@gmail.com**
‚Ä¢ **investor@company.co.za**

**‚úÖ INFORMATION SAVED:**
‚Ä¢ **Name:** ${ctx.session.kyc.data.first_name} ${ctx.session.kyc.data.last_name}
‚Ä¢ **ID:** ${ctx.session.kyc.data.id_number}
‚Ä¢ **Phone:** ${ctx.session.kyc.data.phone_number}

**‚úçÔ∏è Please type your email address below:**`;

  ctx.session.kyc.step = 'awaiting_email';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to Phone Number", callback_data: "kyc_back_phone" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(emailMessage, { reply_markup: keyboard });
}

// Handle email input
async function handleKYCEmailInput(ctx, email) {
  // Validate email
  if (!email || email.trim().length < 5) {
    await ctx.reply('‚ùå Please enter a valid email address.');
    return;
  }

  const cleanEmail = email.trim().toLowerCase();

  // Email validation regex
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(cleanEmail)) {
    await ctx.reply('‚ùå Please enter a valid email address (e.g., example@domain.com).');
    return;
  }

  // Store email
  ctx.session.kyc.data.email_address = cleanEmail;

  // Move to address step
  await showKYCAddressStep(ctx);
}

// Show address collection step
async function showKYCAddressStep(ctx) {
  const addressMessage = `üìù **KYC STEP 7 OF 8: STREET ADDRESS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üè† ENTER YOUR STREET ADDRESS**

Please enter your complete street address for your share certificates.

**üìã REQUIREMENTS:**
‚Ä¢ Complete street address including house/unit number
‚Ä¢ Street name and any apartment/unit details
‚Ä¢ Do not include city or postal code (next steps)

**üí° EXAMPLES:**
‚Ä¢ **123 Main Street, Apt 4B**
‚Ä¢ **45 Oak Avenue**
‚Ä¢ **Unit 12, 789 Business Park Drive**

**‚úÖ INFORMATION SAVED:**
‚Ä¢ **Name:** ${ctx.session.kyc.data.first_name} ${ctx.session.kyc.data.last_name}
‚Ä¢ **Phone:** ${ctx.session.kyc.data.phone_number}
‚Ä¢ **Email:** ${ctx.session.kyc.data.email_address}

**‚úçÔ∏è Please type your street address below:**`;

  ctx.session.kyc.step = 'awaiting_address';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to Email", callback_data: "kyc_back_email" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(addressMessage, { reply_markup: keyboard });
}

// Handle address input
async function handleKYCAddressInput(ctx, address) {
  // Validate address
  if (!address || address.trim().length < 5) {
    await ctx.reply('‚ùå Please enter a valid street address (at least 5 characters).');
    return;
  }

  // Store address
  ctx.session.kyc.data.street_address = address.trim();

  // Move to city step
  await showKYCCityStep(ctx);
}

// Show city collection step
async function showKYCCityStep(ctx) {
  const cityMessage = `üìù **KYC STEP 8 OF 8: CITY & COMPLETION**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üèôÔ∏è ENTER YOUR CITY**

Please enter the city where you reside.

**üìã REQUIREMENTS:**
‚Ä¢ City name only
‚Ä¢ No postal codes or provinces

**üí° EXAMPLES:**
‚Ä¢ **Cape Town**
‚Ä¢ **Johannesburg**
‚Ä¢ **London**

**‚úÖ INFORMATION COLLECTED:**
‚Ä¢ **Name:** ${ctx.session.kyc.data.first_name} ${ctx.session.kyc.data.last_name}
‚Ä¢ **Phone:** ${ctx.session.kyc.data.phone_number}
‚Ä¢ **Email:** ${ctx.session.kyc.data.email_address}
‚Ä¢ **Address:** ${ctx.session.kyc.data.street_address}

**‚úçÔ∏è Please type your city below:**`;

  ctx.session.kyc.step = 'awaiting_city';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to Address", callback_data: "kyc_back_address" }
      ],
      [
        { text: "üè† Cancel & Return to Dashboard", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(cityMessage, { reply_markup: keyboard });
}

// Handle city input and complete KYC
async function handleKYCCityInput(ctx, city) {
  // Validate city
  if (!city || city.trim().length < 2) {
    await ctx.reply('‚ùå Please enter a valid city name (at least 2 characters).');
    return;
  }

  // Store city
  ctx.session.kyc.data.city = city.trim();

  // Complete KYC process
  await completeKYCProcess(ctx);
}

// Complete the full KYC process
async function completeKYCProcess(ctx) {
  const user = ctx.from;
  const kycData = ctx.session.kyc.data;

  try {
    // Get user data through telegram_users table (correct relationship)
    const { data: telegramUserData, error: telegramError } = await db.client
      .from('telegram_users')
      .select(`
        user_id,
        users!inner (
          id,
          country_of_residence
        )
      `)
      .eq('telegram_id', user.id)
      .single();

    if (telegramError) {
      console.error('‚ùå [KYC] Error getting user data via telegram_users:', telegramError);
      await ctx.reply('‚ùå Error retrieving your user information. Please contact support.');
      return;
    }

    const userData = telegramUserData.users;
    const countryCode = userData?.country_of_residence || 'ZAF';
    const userId = userData?.id;

    // Save KYC data to database
    const { data: kycRecord, error: kycError } = await db.client
      .from('kyc_information')
      .insert({
        user_id: userId,
        first_name: kycData.first_name,
        last_name: kycData.last_name,
        id_type: ctx.session.kyc.id_type,
        id_number_encrypted: kycData.id_number, // TODO: Implement encryption
        id_number_hash: require('crypto').createHash('sha256').update(kycData.id_number).digest('hex'),
        phone_number: kycData.phone_number,
        email_address: kycData.email_address,
        street_address: kycData.street_address,
        city: kycData.city,
        postal_code: '0000', // Default for now
        country_code: countryCode,
        country_name: getCountryName(countryCode),
        data_consent_given: true,
        privacy_policy_accepted: true,
        kyc_status: 'completed',
        created_by_telegram_id: user.id
      })
      .select()
      .single();

    if (kycError) {
      console.error('‚ùå [KYC] Error saving KYC data:', kycError);
      await ctx.reply('‚ùå Error saving your KYC information. Please try again.');
      return;
    }

    // Show completion message
    await showKYCCompletionSuccess(ctx);

  } catch (error) {
    console.error('‚ùå [KYC] Error completing KYC process:', error);
    await ctx.reply('‚ùå Error completing KYC process. Please try again.');
  }
}

// Show KYC completion success
async function showKYCCompletionSuccess(ctx) {
  const kycData = ctx.session.kyc.data;

  const completionMessage = `üéâ **KYC COMPLETED SUCCESSFULLY!**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**‚úÖ ALL REQUIRED INFORMATION COLLECTED:**

**üë§ Personal Information:**
‚Ä¢ **Name:** ${kycData.first_name} ${kycData.last_name}
‚Ä¢ **ID:** ${kycData.id_number}

**üìû Contact Information:**
‚Ä¢ **Phone:** ${kycData.phone_number}
‚Ä¢ **Email:** ${kycData.email_address}

**üè† Address Information:**
‚Ä¢ **Address:** ${kycData.street_address}
‚Ä¢ **City:** ${kycData.city}

**üìã NEXT STEPS:**
‚Ä¢ Your information has been securely saved
‚Ä¢ Share certificates will be generated within 48 business hours
‚Ä¢ Certificates will be emailed to: ${kycData.email_address}
‚Ä¢ You now have full access to all bot features

**üéØ You can now access your complete dashboard and portfolio!**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üè† Go to Dashboard", callback_data: "main_menu" }
      ],
      [
        { text: "üíº View Portfolio", callback_data: "view_portfolio" }
      ]
    ]
  };

  // Clear KYC session
  ctx.session.kyc = null;

  await ctx.replyWithMarkdown(completionMessage, { reply_markup: keyboard });
}

// Helper function to get country name from code
function getCountryName(countryCode) {
  const countries = {
    'ZAF': 'South Africa',
    'USA': 'United States',
    'GBR': 'United Kingdom',
    'CAN': 'Canada',
    'AUS': 'Australia',
    // Add more as needed
  };
  return countries[countryCode] || 'Unknown';
}

// BANK TRANSFER SYSTEM FOR SOUTHERN AFRICAN REGION
// Check if user is eligible for bank transfer payments (ZAF, SWZ, NAM)
async function checkBankTransferEligibility(userId) {
  try {
    const { data: userData, error } = await db.client
      .from('users')
      .select('country_of_residence')
      .eq('id', userId)
      .single();

    if (error || !userData) {
      console.log(`‚ùå [BANK TRANSFER] Error checking user country: ${error?.message}`);
      return false;
    }

    const eligibleCountries = ['ZAF', 'SWZ', 'NAM']; // South Africa, Eswatini, Namibia
    const isEligible = eligibleCountries.includes(userData.country_of_residence);

    console.log(`üè¶ [BANK TRANSFER] User ${userId} country: ${userData.country_of_residence}, eligible: ${isEligible}`);
    return isEligible;

  } catch (error) {
    console.error('‚ùå [BANK TRANSFER] Error in checkBankTransferEligibility:', error);
    return false;
  }
}

// Handle bank transfer payment selection
async function handleBankTransferPayment(ctx) {
  const user = ctx.from;

  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.answerCbQuery('‚ùå User not found');
      return;
    }

    // Double-check eligibility
    const isEligible = await checkBankTransferEligibility(telegramUser.user_id);
    if (!isEligible) {
      await ctx.answerCbQuery('‚ùå Bank transfer not available in your region');
      return;
    }

    await ctx.answerCbQuery('üè¶ Bank Transfer selected');

    // Store bank transfer as selected payment method
    ctx.session.selectedPaymentMethod = 'bank_transfer';

    // Show amount input for bank transfer
    await showBankTransferAmountInput(ctx);

  } catch (error) {
    console.error('‚ùå [BANK TRANSFER] Error in handleBankTransferPayment:', error);
    await ctx.answerCbQuery('‚ùå Error processing bank transfer selection');
  }
}

// Show amount input for bank transfer
async function showBankTransferAmountInput(ctx) {
  const customAmountMessage = `üè¶ **BANK TRANSFER PURCHASE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ ENTER INVESTMENT AMOUNT**

Enter your desired investment amount between $15 and $50,000:

**üìã BANK TRANSFER DETAILS:**
‚Ä¢ Minimum: $15 USD (R270 ZAR)
‚Ä¢ Maximum: $50,000 USD
‚Ä¢ Currency: South African Rand (ZAR)
‚Ä¢ Exchange Rate: R18 ZAR = $1 USD
‚Ä¢ Transaction Fee: 10% additional
‚Ä¢ Payment Method: FNB Bank Transfer

**üí° CALCULATION EXAMPLE:**
$100 USD + 10% fee = $110 USD = R1,980 ZAR

**‚ö†Ô∏è IMPORTANT:**
Bank transfer is only available for users in South Africa, Eswatini, and Namibia.

**Type your investment amount in USD (numbers only):**`;

  await ctx.replyWithMarkdown(customAmountMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîô Back to Payment Methods", callback_data: "menu_purchase_shares" }],
        [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
      ]
    }
  });

  // Set user state to expect amount input
  await setUserState(ctx.from.id, 'awaiting_custom_amount');
}

// Calculate ZAR amount with 10% transaction fee
function calculateZARAmount(usdAmount) {
  const exchangeRate = 18; // R18 ZAR = $1 USD (fixed rate)
  const transactionFee = 0.10; // 10% fee

  const totalUSD = usdAmount * (1 + transactionFee); // Add 10% fee
  const zarAmount = totalUSD * exchangeRate;

  return {
    originalUSD: usdAmount,
    feeUSD: usdAmount * transactionFee,
    totalUSD: totalUSD,
    zarAmount: zarAmount,
    exchangeRate: exchangeRate
  };
}

// Handle bank transfer payment confirmation
async function handleBankTransferConfirmation(ctx, telegramUser, originalAmount, totalCost, sharesAmount, currentPhase) {
  try {
    console.log(`üîç [DEBUG] handleBankTransferConfirmation - Starting bank transfer for user: ${telegramUser.username}`);
    console.log(`üîç [DEBUG] handleBankTransferConfirmation - Amount: ${totalCost}, Shares: ${sharesAmount}`);

    // Calculate ZAR amounts with 10% fee
    const zarCalculation = calculateZARAmount(totalCost);
    console.log(`üîç [DEBUG] handleBankTransferConfirmation - ZAR calculation:`, zarCalculation);

    // Create bank transfer payment transaction
    const { data: payment, error: paymentError } = await db.client
      .from('crypto_payment_transactions')
      .insert({
        user_id: telegramUser.user_id || null,
        amount: totalCost,
        currency: 'ZAR',
        network: 'BANK_TRANSFER',
        sender_wallet: 'PENDING_PROOF_UPLOAD', // Will store proof file ID when user uploads proof
        receiver_wallet: 'FNB-63154323041', // Bank account reference
        status: 'pending',
        created_at: new Date().toISOString(),
        // Store ZAR amount and bank details in transaction_hash field
        transaction_hash: `ZAR:${zarCalculation.zarAmount.toFixed(2)}|RATE:${zarCalculation.exchangeRate}|FEE:10%`
      })
      .select()
      .single();

    if (paymentError) {
      console.error('Error creating bank transfer payment:', paymentError);
      await ctx.reply('‚ùå Error creating bank transfer payment. Please try again.');
      return;
    }

    // Show bank transfer payment instructions
    await showBankTransferInstructions(ctx, payment, currentPhase, zarCalculation);

    // Notify admin about new bank transfer payment
    await sendAdminNotification('payment_received', {
      username: ctx.from.username || ctx.from.first_name || 'Unknown',
      amount: totalCost,
      shares: sharesAmount,
      user_id: telegramUser.user_id,
      payment_id: payment.id,
      payment_method: 'Bank Transfer (ZAR)',
      zar_amount: zarCalculation.zarAmount
    }, 'medium');

  } catch (error) {
    console.error('Error in handleBankTransferConfirmation:', error);
    await ctx.reply('‚ùå Error processing bank transfer. Please try again.');
  }
}

// Show bank transfer payment instructions
async function showBankTransferInstructions(ctx, payment, phase, zarCalculation) {
  const sharePrice = parseFloat(phase.price_per_share);
  const sharesAmount = Math.floor(payment.amount / sharePrice);

  const bankTransferMessage = `üè¶ **BANK TRANSFER PAYMENT INSTRUCTIONS**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üí∞ AMOUNT TO PAY:**
**üáøüá¶ R${zarCalculation.zarAmount.toFixed(2)} ZAR**

**üìã PURCHASE BREAKDOWN:**
‚Ä¢ USD Amount: ${formatCurrency(zarCalculation.originalUSD)}
‚Ä¢ Transaction Fee (10%): ${formatCurrency(zarCalculation.feeUSD)}
‚Ä¢ Total USD: ${formatCurrency(zarCalculation.totalUSD)}
‚Ä¢ Exchange Rate: R${zarCalculation.exchangeRate} = $1 USD
‚Ä¢ Shares: ${sharesAmount.toLocaleString()}
‚Ä¢ Phase: ${phase.phase_name}
‚Ä¢ Share Price: ${formatCurrency(sharePrice)}
‚Ä¢ Payment ID: #${payment.id.substring(0, 8)}

**üè¶ BANK ACCOUNT DETAILS:**
‚Ä¢ **Bank:** First National Bank (FNB)
‚Ä¢ **Account Type:** GOLD BUSINESS CHEQUE ACCOUNT
‚Ä¢ **Account Number:** 63154323041
‚Ä¢ **Account Status:** Active Account
‚Ä¢ **Branch Code:** 220229
‚Ä¢ **Branch Name:** VERULAM, NTL 091
‚Ä¢ **Swift Code:** FIRNZAJJ
‚Ä¢ **Date Opened:** 2025-05-09

**üí∞ PAYMENT INFORMATION:**
‚Ä¢ **Amount to Transfer:** R${zarCalculation.zarAmount.toFixed(2)} ZAR
‚Ä¢ **Exchange Rate:** R${zarCalculation.exchangeRate} ZAR = $1 USD
‚Ä¢ **Reference:** Payment #${payment.id.substring(0, 8)}

**‚ö†Ô∏è IMPORTANT INSTRUCTIONS:**
1. Transfer EXACTLY R${zarCalculation.zarAmount.toFixed(2)} ZAR
2. Use reference: Payment #${payment.id.substring(0, 8)}
3. Take screenshot of successful transfer
4. Upload proof within 24 hours
5. Wait for admin approval

**üîó BANK VERIFICATION:**
Verify bank details: [FNB Confirmation Document](https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets//fnb.pdf)

**üö® WARNING:**
‚Ä¢ Wrong amount = Payment rejected
‚Ä¢ No proof = No shares allocated
‚Ä¢ Bank transfers are only available for South Africa, Eswatini, and Namibia

**‚è∞ Payment expires in 24 hours**`;

  await ctx.replyWithMarkdown(bankTransferMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üí≥ Submit Payment Proof", callback_data: `upload_proof_${payment.id}` }],
        [{ text: "üîó View Bank Confirmation", url: "https://fgubaqoftdeefcakejwu.supabase.co/storage/v1/object/public/assets//fnb.pdf" }],
        [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
        [{ text: "üè† Main Menu", callback_data: "main_menu" }]
      ]
    }
  });
}

// Handle upload proof request for bank transfer
async function handleUploadProofRequest(ctx, callbackData) {
  const paymentId = callbackData.replace('upload_proof_', '');

  try {
    // Verify payment exists and belongs to user
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', ctx.from.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.answerCbQuery('‚ùå User not found');
      return;
    }

    const { data: payment, error: paymentError } = await db.client
      .from('crypto_payment_transactions')
      .select('*')
      .eq('id', paymentId)
      .eq('user_id', telegramUser.user_id)
      .single();

    if (paymentError || !payment) {
      await ctx.answerCbQuery('‚ùå Payment not found');
      return;
    }

    if (payment.status !== 'pending') {
      await ctx.answerCbQuery('‚ùå Payment already processed');
      return;
    }

    await ctx.answerCbQuery('üì§ Upload payment proof');

    // Store payment ID in session for proof upload
    ctx.session.uploadingProofForPayment = paymentId;

    const uploadMessage = `üì§ **UPLOAD PAYMENT PROOF**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üè¶ BANK TRANSFER PROOF REQUIRED**

Payment ID: #${paymentId.substring(0, 8)}

**üìã UPLOAD REQUIREMENTS:**
‚Ä¢ Screenshot of successful bank transfer
‚Ä¢ Must show transfer amount and reference
‚Ä¢ Clear and readable image
‚Ä¢ Supported formats: JPG, PNG, PDF

**‚ö†Ô∏è IMPORTANT:**
‚Ä¢ Transfer must be from YOUR bank account
‚Ä¢ Amount must match exactly: ${payment.transaction_hash && payment.transaction_hash.includes('ZAR:') ? `R${payment.transaction_hash.match(/ZAR:([0-9.]+)/)?.[1] || 'N/A'}` : 'the required amount'}
‚Ä¢ Reference must include: Payment #${paymentId.substring(0, 8)}

**üì± HOW TO UPLOAD:**
1. Take screenshot of successful transfer
2. Send the image to this chat
3. Wait for admin verification
4. Receive confirmation once approved

**‚è∞ DEADLINE:**
Upload proof within 24 hours or payment will be cancelled.

**Please send your payment proof image now:**`;

    await ctx.replyWithMarkdown(uploadMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå Cancel Upload", callback_data: "cancel_proof_upload" }],
          [{ text: "üè† Back to Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

    // Set user state to expect proof upload
    await setUserState(ctx.from.id, 'uploading_payment_proof');

  } catch (error) {
    console.error('Error in handleUploadProofRequest:', error);
    await ctx.answerCbQuery('‚ùå Error processing upload request');
  }
}

// Handle bank transfer proof upload
async function handleBankTransferProofUpload(ctx, isDocument = false) {
  const user = ctx.from;

  try {
    // Get payment ID from session
    const paymentId = ctx.session.uploadingProofForPayment;
    if (!paymentId) {
      await ctx.reply('‚ùå No payment found for proof upload. Please start the process again.');
      return;
    }

    // Get file info
    let fileId, fileName, fileSize;

    if (isDocument) {
      const document = ctx.message.document;
      fileId = document.file_id;
      fileName = document.file_name || 'payment_proof';
      fileSize = document.file_size;
    } else {
      const photo = ctx.message.photo;
      const largestPhoto = photo[photo.length - 1]; // Get highest resolution
      fileId = largestPhoto.file_id;
      fileName = 'payment_proof.jpg';
      fileSize = largestPhoto.file_size;
    }

    // Check file size (max 20MB)
    if (fileSize > 20 * 1024 * 1024) {
      await ctx.reply('‚ùå File too large. Please upload a file smaller than 20MB.');
      return;
    }

    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id, username')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.reply('‚ùå User not found. Please try again.');
      return;
    }

    // Update payment with proof file ID
    const { error: updateError } = await db.client
      .from('crypto_payment_transactions')
      .update({
        sender_wallet: fileId, // Store file ID in sender_wallet field for bank transfers
        status: 'pending', // Change status to pending for admin review
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId)
      .eq('user_id', telegramUser.user_id);

    if (updateError) {
      console.error('Error updating payment with proof:', updateError);
      await ctx.reply('‚ùå Error saving payment proof. Please try again.');
      return;
    }

    // Clear session data
    delete ctx.session.uploadingProofForPayment;
    await setUserState(user.id, null);

    // Send confirmation to user
    const confirmationMessage = `‚úÖ **PAYMENT PROOF UPLOADED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üì§ PROOF SUCCESSFULLY SUBMITTED**

Payment ID: #${paymentId.substring(0, 8)}
File: ${fileName}
Status: Pending Admin Review

**‚è≥ WHAT HAPPENS NEXT:**
1. Admin will review your payment proof
2. Bank transfer will be verified
3. You'll receive confirmation once approved
4. Shares will be allocated to your portfolio

**‚è∞ REVIEW TIME:**
Typically 2-24 hours during business days

**üì± NOTIFICATIONS:**
You'll receive a message when your payment is approved or if additional information is needed.

Thank you for your patience!`;

    await ctx.replyWithMarkdown(confirmationMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
          [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

    // Notify admin about proof upload
    await sendAdminNotification('bank_transfer_proof_uploaded', {
      username: telegramUser.username || user.first_name || 'Unknown',
      payment_id: paymentId,
      file_id: fileId,
      file_name: fileName,
      user_id: telegramUser.user_id
    }, 'high');

  } catch (error) {
    console.error('Error in handleBankTransferProofUpload:', error);
    await ctx.reply('‚ùå Error processing payment proof. Please try again.');
  }
}

// Handle viewing bank transfer proof for admin
async function handleViewBankProof(ctx, callbackData) {
  const user = ctx.from;

  // Check admin authorization
  if (user.username !== 'TTTFOUNDER') {
    await ctx.answerCbQuery('‚ùå Access denied');
    return;
  }

  const paymentId = callbackData.replace('view_bank_proof_', '');

  try {
    // Get payment details
    const { data: payment, error: fetchError } = await db.client
      .from('crypto_payment_transactions')
      .select('*')
      .eq('id', paymentId)
      .single();

    if (fetchError || !payment) {
      await ctx.answerCbQuery('‚ùå Payment not found');
      return;
    }

    if (!payment.sender_wallet) {
      await ctx.answerCbQuery('‚ùå No proof uploaded');
      return;
    }

    await ctx.answerCbQuery('üìÑ Displaying bank transfer proof');

    // Send the proof file (stored in sender_wallet field for bank transfers)
    const fileId = payment.sender_wallet;

    const proofMessage = `üè¶ **BANK TRANSFER PROOF**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Payment ID:** #${paymentId.substring(0, 8)}
**Amount:** $${payment.amount} USD

**üìã VERIFICATION CHECKLIST:**
‚úÖ Transfer amount matches required amount
‚úÖ Reference includes payment ID
‚úÖ Transfer from user's account
‚úÖ FNB account details correct
‚úÖ Transfer successful/completed

**‚ö†Ô∏è ADMIN NOTES:**
‚Ä¢ Verify ZAR amount matches USD conversion
‚Ä¢ Check transfer date/time
‚Ä¢ Confirm account holder details if needed`;

    await ctx.replyWithMarkdown(proofMessage);

    // Forward the proof file
    try {
      await ctx.telegram.forwardMessage(ctx.chat.id, ctx.chat.id, fileId);
    } catch (forwardError) {
      // If forwarding fails, try sending as photo/document
      try {
        await ctx.replyWithPhoto(fileId, {
          caption: `Bank Transfer Proof - Payment #${paymentId.substring(0, 8)}`
        });
      } catch (photoError) {
        try {
          await ctx.replyWithDocument(fileId, {
            caption: `Bank Transfer Proof - Payment #${paymentId.substring(0, 8)}`
          });
        } catch (docError) {
          console.error('Error displaying bank proof:', docError);
          await ctx.reply('‚ùå Error displaying proof file. File may be corrupted.');
        }
      }
    }

  } catch (error) {
    console.error('Error in handleViewBankProof:', error);
    await ctx.answerCbQuery('‚ùå Error loading proof');
  }
}

// Handle canceling proof upload
async function handleCancelProofUpload(ctx) {
  const user = ctx.from;

  try {
    // Clear session data
    delete ctx.session.uploadingProofForPayment;
    await setUserState(user.id, null);

    await ctx.answerCbQuery('‚ùå Proof upload cancelled');

    const cancelMessage = `‚ùå **PROOF UPLOAD CANCELLED**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**Upload process has been cancelled.**

You can restart the proof upload process anytime by:
1. Going to your portfolio
2. Finding the pending payment
3. Clicking "Submit Payment Proof"

**‚ö†Ô∏è REMINDER:**
Payment proof must be uploaded within 24 hours or the payment will be automatically cancelled.`;

    await ctx.replyWithMarkdown(cancelMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üíº View Portfolio", callback_data: "menu_portfolio" }],
          [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error in handleCancelProofUpload:', error);
    await ctx.answerCbQuery('‚ùå Error cancelling upload');
  }
}

// COUNTRY SELECTION SYSTEM
// Trigger country selection if needed
async function triggerCountrySelectionIfNeeded(userId) {
  try {
    console.log(`üåç [COUNTRY] Checking country selection status for user ID: ${userId}`);

    // Check if user has already selected country
    const hasSelectedCountry = await checkCountrySelection(userId);

    if (hasSelectedCountry) {
      console.log(`‚úÖ [COUNTRY] User ${userId} already has selected country - skipping selection`);
      return;
    }

    console.log(`üåç [COUNTRY] User ${userId} needs to select country - triggering selection`);

    // Get user's Telegram ID to send country selection request
    const { data: telegramUser, error: telegramError } = await db.client
      .from('telegram_users')
      .select('telegram_id, username')
      .eq('user_id', userId)
      .single();

    if (telegramError || !telegramUser) {
      console.error('‚ùå [COUNTRY] Error getting user Telegram ID:', telegramError);
      return;
    }

    // Send country selection request to user
    await sendCountrySelectionRequest(telegramUser.telegram_id, telegramUser.username);

  } catch (error) {
    console.error('‚ùå [COUNTRY] Error in triggerCountrySelectionIfNeeded:', error);
  }
}

// Check if user has selected country
async function checkCountrySelection(userId) {
  try {
    const { data: userData, error: userError } = await db.client
      .from('users')
      .select('country_selection_completed, country_of_residence')
      .eq('id', userId)
      .single();

    if (userError) {
      console.error('‚ùå [COUNTRY] Error checking country selection:', userError);
      return false;
    }

    return userData.country_selection_completed && userData.country_of_residence;

  } catch (error) {
    console.error('‚ùå [COUNTRY] Error checking country selection:', error);
    return false;
  }
}

// Send country selection request to user
async function sendCountrySelectionRequest(telegramId, username) {
  try {
    console.log(`üåç [COUNTRY] Sending country selection request to user ${username} (${telegramId})`);

    const countryMessage = `üåç **SELECT YOUR COUNTRY OF RESIDENCE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç COUNTRY SELECTION REQUIRED**

To complete your registration and ensure compliance with international regulations, please select your country of residence.

**üîç WHY WE NEED THIS:**
‚Ä¢ Regulatory compliance and legal requirements
‚Ä¢ Tax reporting and documentation
‚Ä¢ Country-specific investment regulations
‚Ä¢ Proper customer verification (KYC)
‚Ä¢ Certificate generation and delivery

**üåç SELECT YOUR COUNTRY:**
Choose from the most common countries below, or select "Show More Countries" for additional options.

**üîí PRIVACY:**
Your country information is securely stored and used only for compliance and service delivery purposes.`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: "üáøüá¶ South Africa", callback_data: "select_country_ZAF" },
          { text: "üá∫üá∏ United States", callback_data: "select_country_USA" }
        ],
        [
          { text: "üá¨üáß United Kingdom", callback_data: "select_country_GBR" },
          { text: "üá®üá¶ Canada", callback_data: "select_country_CAN" }
        ],
        [
          { text: "üá¶üá∫ Australia", callback_data: "select_country_AUS" },
          { text: "üá¶üá™ UAE", callback_data: "select_country_ARE" }
        ],
        [
          { text: "üáÆüá≥ India", callback_data: "select_country_IND" },
          { text: "üáµüá∞ Pakistan", callback_data: "select_country_PAK" }
        ],
        [
          { text: "üåç Show More Countries", callback_data: "show_more_countries" }
        ],
        [
          { text: "üåé Type Your Country", callback_data: "country_selection_other" }
        ]
      ]
    };

    // Send country selection message
    await sendAudioNotificationToUser(
      telegramId,
      countryMessage,
      'COUNTRY',
      {
        reply_markup: keyboard
      },
      true // Enable audio notification for country selection
    );

    console.log(`‚úÖ [COUNTRY] Country selection request sent successfully to user ${username}`);

  } catch (error) {
    console.error('‚ùå [COUNTRY] Error sending country selection request:', error);
  }
}

// Show country selection menu
async function showCountrySelection(ctx) {
  const countryMessage = `üåç **SELECT YOUR COUNTRY OF RESIDENCE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç COUNTRY SELECTION REQUIRED**

To complete your registration and ensure compliance with international regulations, please select your country of residence.

**üîç WHY WE NEED THIS:**
‚Ä¢ Regulatory compliance and legal requirements
‚Ä¢ Tax reporting and documentation
‚Ä¢ Country-specific investment regulations
‚Ä¢ Proper customer verification (KYC)
‚Ä¢ Certificate generation and delivery

**üåç SELECT YOUR COUNTRY:**
Choose from the most common countries below, or select "Show More Countries" for additional options.

**üîí PRIVACY:**
Your country information is securely stored and used only for compliance and service delivery purposes.`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üáøüá¶ South Africa", callback_data: "select_country_ZAF" },
        { text: "üá∫üá∏ United States", callback_data: "select_country_USA" }
      ],
      [
        { text: "üá¨üáß United Kingdom", callback_data: "select_country_GBR" },
        { text: "üá®üá¶ Canada", callback_data: "select_country_CAN" }
      ],
      [
        { text: "üá¶üá∫ Australia", callback_data: "select_country_AUS" },
        { text: "üá¶üá™ UAE", callback_data: "select_country_ARE" }
      ],
      [
        { text: "üáÆüá≥ India", callback_data: "select_country_IND" },
        { text: "üáµüá∞ Pakistan", callback_data: "select_country_PAK" }
      ],
      [
        { text: "üåç Show More Countries", callback_data: "show_more_countries" }
      ],
      [
        { text: "üåé Type Your Country", callback_data: "country_selection_other" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(countryMessage, { reply_markup: keyboard });
}

// Handle country selection
async function handleCountrySelection(ctx, callbackData) {
  const user = ctx.from;
  const countryCode = callbackData.replace('select_country_', '');

  try {
    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.answerCbQuery('‚ùå User not found');
      return;
    }

    // Get country information
    const countryInfo = getCountryInfo(countryCode);

    if (!countryInfo) {
      await ctx.answerCbQuery('‚ùå Invalid country selection');
      return;
    }

    // Update user's country
    const { error: updateError } = await db.client
      .from('users')
      .update({
        country_of_residence: countryCode,
        country_name: countryInfo.name,
        country_selection_completed: true,
        country_selected_at: new Date().toISOString(),
        country_updated_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', telegramUser.user_id);

    if (updateError) {
      console.error('Error updating user country:', updateError);
      await ctx.answerCbQuery('‚ùå Error saving country selection');
      return;
    }

    // Log country change
    await logCountryChange(telegramUser.user_id, null, null, countryCode, countryInfo.name, user.id, user.username, 'initial_selection');

    await ctx.answerCbQuery(`${countryInfo.flag} ${countryInfo.name} selected`);

    // Show confirmation message
    const confirmationMessage = `‚úÖ **COUNTRY SELECTED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üåç COUNTRY OF RESIDENCE CONFIRMED**

${countryInfo.flag} **${countryInfo.name}**

**üìã REGISTRATION COMPLETE:**
‚Ä¢ Country selection: ‚úÖ Completed
‚Ä¢ Compliance status: ‚úÖ Updated
‚Ä¢ Account setup: ‚úÖ Finalized

**üéØ WHAT'S NEXT:**
‚Ä¢ Explore our gold mining investment opportunities
‚Ä¢ Review company presentation and mining operations
‚Ä¢ Start your investment journey with confidence

**üí° NEED TO CHANGE?**
You can update your country selection later through the settings menu.

**üèÜ Welcome to Aureus Alliance Holdings!**`;

    await ctx.replyWithMarkdown(confirmationMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
          [{ text: "üìã Company Presentation", callback_data: "menu_presentation" }],
          [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling country selection:', error);
    await ctx.answerCbQuery('‚ùå Error processing country selection');
  }
}

// Show more countries
async function showMoreCountries(ctx) {
  const moreCountriesMessage = `üåç **MORE COUNTRIES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç ADDITIONAL COUNTRY OPTIONS**

Select your country from the expanded list below:

**üá™üá∫ EUROPE:**`;

  const keyboard = {
    inline_keyboard: [
      // Europe Row 1
      [
        { text: "üá©üá™ Germany", callback_data: "select_country_DEU" },
        { text: "üá´üá∑ France", callback_data: "select_country_FRA" }
      ],
      [
        { text: "üáÆüáπ Italy", callback_data: "select_country_ITA" },
        { text: "üá™üá∏ Spain", callback_data: "select_country_ESP" }
      ],
      [
        { text: "üá≥üá± Netherlands", callback_data: "select_country_NLD" },
        { text: "üáßüá™ Belgium", callback_data: "select_country_BEL" }
      ],
      [
        { text: "üá®üá≠ Switzerland", callback_data: "select_country_CHE" },
        { text: "üá∏üá™ Sweden", callback_data: "select_country_SWE" }
      ],
      [
        { text: "üá≥üá¥ Norway", callback_data: "select_country_NOR" },
        { text: "üá©üá∞ Denmark", callback_data: "select_country_DNK" }
      ],
      [
        { text: "üá´üáÆ Finland", callback_data: "select_country_FIN" },
        { text: "üáÆüá™ Ireland", callback_data: "select_country_IRL" }
      ],
      [
        { text: "üáµüáπ Portugal", callback_data: "select_country_PRT" },
        { text: "üá¨üá∑ Greece", callback_data: "select_country_GRC" }
      ],
      [
        { text: "üáµüá± Poland", callback_data: "select_country_POL" },
        { text: "üá®üáø Czech Republic", callback_data: "select_country_CZE" }
      ],
      [
        { text: "üá≠üá∫ Hungary", callback_data: "select_country_HUN" },
        { text: "üá∑üá¥ Romania", callback_data: "select_country_ROU" }
      ],
      [
        { text: "üáßüá¨ Bulgaria", callback_data: "select_country_BGR" },
        { text: "üáπüá∑ Turkey", callback_data: "select_country_TUR" }
      ],
      // Navigation
      [
        { text: "üåè Show Asia & Middle East", callback_data: "show_asia_countries" }
      ],
      [
        { text: "üîô Back to Main Countries", callback_data: "main_menu" }
      ],
      [
        { text: "üåé Type Your Country", callback_data: "country_selection_other" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(moreCountriesMessage, { reply_markup: keyboard });
}

// Handle other country selection - prompt for custom input
async function handleOtherCountrySelection(ctx) {
  await ctx.answerCbQuery('Type your country name');

  // Set session to await custom country input
  ctx.session.awaitingCustomCountry = true;

  const customCountryMessage = `üåé **TYPE YOUR COUNTRY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç CUSTOM COUNTRY ENTRY**

Your country is not listed in our predefined options? No problem!

**‚úçÔ∏è PLEASE TYPE YOUR COUNTRY NAME:**

Simply type the name of your country below and we'll save it for you.

**üìã EXAMPLES:**
‚Ä¢ "Switzerland"
‚Ä¢ "New Zealand"
‚Ä¢ "Costa Rica"
‚Ä¢ "Luxembourg"

**üí° TIPS:**
‚Ä¢ Use the full country name
‚Ä¢ Check spelling for accuracy
‚Ä¢ This will be used for compliance purposes

**‚úçÔ∏è Type your country name now:**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üîô Back to Country Selection", callback_data: "main_menu" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(customCountryMessage, { reply_markup: keyboard });
}

// Handle custom country input
async function handleCustomCountryInput(ctx, countryName) {
  const user = ctx.from;

  try {
    // Clear the awaiting state
    ctx.session.awaitingCustomCountry = false;

    // Validate country name
    if (!countryName || countryName.trim().length < 2) {
      await ctx.reply('‚ùå Please enter a valid country name (at least 2 characters).');
      ctx.session.awaitingCustomCountry = true; // Keep waiting
      return;
    }

    if (!/^[a-zA-Z\s\-'\.]+$/.test(countryName.trim())) {
      await ctx.reply('‚ùå Country name can only contain letters, spaces, hyphens, apostrophes, and periods.');
      ctx.session.awaitingCustomCountry = true; // Keep waiting
      return;
    }

    const cleanCountryName = countryName.trim();

    // Get user from database
    const { data: telegramUser, error: userError } = await db.client
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', user.id)
      .single();

    if (userError || !telegramUser) {
      await ctx.reply('‚ùå User not found. Please try again.');
      return;
    }

    // Save custom country
    const { error: updateError } = await db.client
      .from('users')
      .update({
        country_of_residence: 'OTH',
        country_name: cleanCountryName,
        country_selection_completed: true,
        country_selected_at: new Date().toISOString(),
        country_updated_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', telegramUser.user_id);

    if (updateError) {
      console.error('Error updating user custom country:', updateError);
      await ctx.reply('‚ùå Error saving country selection. Please try again.');
      return;
    }

    // Log country change
    await logCountryChange(telegramUser.user_id, null, null, 'OTH', cleanCountryName, user.id, user.username, 'custom_entry');

    // Show confirmation message
    const confirmationMessage = `‚úÖ **COUNTRY SAVED SUCCESSFULLY**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üåç COUNTRY OF RESIDENCE CONFIRMED**

üåé **${cleanCountryName}**

**üìã REGISTRATION COMPLETE:**
‚Ä¢ Country selection: ‚úÖ Completed
‚Ä¢ Compliance status: ‚úÖ Updated
‚Ä¢ Account setup: ‚úÖ Finalized

**üéØ WHAT'S NEXT:**
‚Ä¢ Explore our gold mining investment opportunities
‚Ä¢ Review company presentation and mining operations
‚Ä¢ Start your investment journey with confidence

**üí° NEED TO CHANGE?**
You can update your country selection later through the settings menu.

**üèÜ Welcome to Aureus Alliance Holdings!**`;

    await ctx.replyWithMarkdown(confirmationMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üõí Purchase Gold Shares", callback_data: "menu_purchase_shares" }],
          [{ text: "üìã Company Presentation", callback_data: "menu_presentation" }],
          [{ text: "üè† Main Dashboard", callback_data: "main_menu" }]
        ]
      }
    });

  } catch (error) {
    console.error('Error handling custom country input:', error);
    await ctx.reply('‚ùå Error processing country input. Please try again.');
    ctx.session.awaitingCustomCountry = true; // Keep waiting for retry
  }
}

// Show Asia & Middle East countries
async function showAsiaCountries(ctx) {
  const asiaMessage = `üåè **ASIA & MIDDLE EAST COUNTRIES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç SELECT YOUR COUNTRY:**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üáØüáµ Japan", callback_data: "select_country_JPN" },
        { text: "üá∞üá∑ South Korea", callback_data: "select_country_KOR" }
      ],
      [
        { text: "üá®üá≥ China", callback_data: "select_country_CHN" },
        { text: "üá∏üá¨ Singapore", callback_data: "select_country_SGP" }
      ],
      [
        { text: "üá≠üá∞ Hong Kong", callback_data: "select_country_HKG" },
        { text: "üáπüá≠ Thailand", callback_data: "select_country_THA" }
      ],
      [
        { text: "üá≤üáæ Malaysia", callback_data: "select_country_MYS" },
        { text: "üáÆüá© Indonesia", callback_data: "select_country_IDN" }
      ],
      [
        { text: "üáµüá≠ Philippines", callback_data: "select_country_PHL" },
        { text: "üáªüá≥ Vietnam", callback_data: "select_country_VNM" }
      ],
      [
        { text: "üáßüá© Bangladesh", callback_data: "select_country_BGD" },
        { text: "üá±üá∞ Sri Lanka", callback_data: "select_country_LKA" }
      ],
      [
        { text: "üá≥üáµ Nepal", callback_data: "select_country_NPL" },
        { text: "üá¶üá´ Afghanistan", callback_data: "select_country_AFG" }
      ],
      [
        { text: "üá∏üá¶ Saudi Arabia", callback_data: "select_country_SAU" },
        { text: "üá∂üá¶ Qatar", callback_data: "select_country_QAT" }
      ],
      [
        { text: "üá∞üáº Kuwait", callback_data: "select_country_KWT" },
        { text: "üáßüá≠ Bahrain", callback_data: "select_country_BHR" }
      ],
      [
        { text: "üá¥üá≤ Oman", callback_data: "select_country_OMN" },
        { text: "üáØüá¥ Jordan", callback_data: "select_country_JOR" }
      ],
      [
        { text: "üá±üáß Lebanon", callback_data: "select_country_LBN" },
        { text: "üáÆüá± Israel", callback_data: "select_country_ISR" }
      ],
      [
        { text: "üáÆüá∑ Iran", callback_data: "select_country_IRN" },
        { text: "üáÆüá∂ Iraq", callback_data: "select_country_IRQ" }
      ],
      [
        { text: "üåç Show Africa", callback_data: "show_africa_countries" }
      ],
      [
        { text: "üîô Back to Europe", callback_data: "show_more_countries" }
      ],
      [
        { text: "üåé Type Your Country", callback_data: "country_selection_other" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(asiaMessage, { reply_markup: keyboard });
}

// Show Africa countries - Complete coverage with alphabetical ordering
async function showAfricaCountries(ctx) {
  const africaMessage = `üåç **AFRICAN COUNTRIES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç SELECT YOUR COUNTRY (Alphabetical):**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üá©üáø Algeria", callback_data: "select_country_DZA" },
        { text: "üá¶üá¥ Angola", callback_data: "select_country_AGO" }
      ],
      [
        { text: "üáßüáØ Benin", callback_data: "select_country_BEN" },
        { text: "üáßüáº Botswana", callback_data: "select_country_BWA" }
      ],
      [
        { text: "üáßüá´ Burkina Faso", callback_data: "select_country_BFA" },
        { text: "üáßüáÆ Burundi", callback_data: "select_country_BDI" }
      ],
      [
        { text: "üá®üá≤ Cameroon", callback_data: "select_country_CMR" },
        { text: "üá®üáª Cape Verde", callback_data: "select_country_CPV" }
      ],
      [
        { text: "üá®üá´ Central African Rep.", callback_data: "select_country_CAF" },
        { text: "üáπüá© Chad", callback_data: "select_country_TCD" }
      ],
      [
        { text: "üá∞üá≤ Comoros", callback_data: "select_country_COM" },
        { text: "üá®üá¨ Congo", callback_data: "select_country_COG" }
      ],
      [
        { text: "üá®üá© DR Congo", callback_data: "select_country_COD" },
        { text: "üá©üáØ Djibouti", callback_data: "select_country_DJI" }
      ],
      [
        { text: "üá™üá¨ Egypt", callback_data: "select_country_EGY" },
        { text: "üá¨üá∂ Equatorial Guinea", callback_data: "select_country_GNQ" }
      ],
      [
        { text: "üá™üá∑ Eritrea", callback_data: "select_country_ERI" },
        { text: "üá∏üáø Eswatini", callback_data: "select_country_SWZ" }
      ],
      [
        { text: "üá™üáπ Ethiopia", callback_data: "select_country_ETH" },
        { text: "üá¨üá¶ Gabon", callback_data: "select_country_GAB" }
      ],
      [
        { text: "üá¨üá≤ Gambia", callback_data: "select_country_GMB" },
        { text: "üá¨üá≠ Ghana", callback_data: "select_country_GHA" }
      ],
      [
        { text: "üá¨üá≥ Guinea", callback_data: "select_country_GIN" },
        { text: "üá¨üáº Guinea-Bissau", callback_data: "select_country_GNB" }
      ],
      [
        { text: "üá®üáÆ Ivory Coast", callback_data: "select_country_CIV" },
        { text: "üá∞üá™ Kenya", callback_data: "select_country_KEN" }
      ],
      [
        { text: "üá±üá∏ Lesotho", callback_data: "select_country_LSO" },
        { text: "üá±üá∑ Liberia", callback_data: "select_country_LBR" }
      ],
      [
        { text: "üá±üáæ Libya", callback_data: "select_country_LBY" },
        { text: "üá≤üá¨ Madagascar", callback_data: "select_country_MDG" }
      ],
      [
        { text: "üá≤üáº Malawi", callback_data: "select_country_MWI" },
        { text: "üá≤üá± Mali", callback_data: "select_country_MLI" }
      ],
      [
        { text: "üá≤üá∑ Mauritania", callback_data: "select_country_MRT" },
        { text: "üá≤üá∫ Mauritius", callback_data: "select_country_MUS" }
      ],
      [
        { text: "üá≤üá¶ Morocco", callback_data: "select_country_MAR" },
        { text: "üá≤üáø Mozambique", callback_data: "select_country_MOZ" }
      ],
      [
        { text: "üá≥üá¶ Namibia", callback_data: "select_country_NAM" },
        { text: "üá≥üá™ Niger", callback_data: "select_country_NER" }
      ],
      [
        { text: "üá≥üá¨ Nigeria", callback_data: "select_country_NGA" },
        { text: "üá∑üáº Rwanda", callback_data: "select_country_RWA" }
      ],
      [
        { text: "üá∏üáπ Sao Tome & Principe", callback_data: "select_country_STP" },
        { text: "üá∏üá≥ Senegal", callback_data: "select_country_SEN" }
      ],
      [
        { text: "üá∏üá® Seychelles", callback_data: "select_country_SYC" },
        { text: "üá∏üá± Sierra Leone", callback_data: "select_country_SLE" }
      ],
      [
        { text: "üá∏üá¥ Somalia", callback_data: "select_country_SOM" },
        { text: "üá∏üá© Sudan", callback_data: "select_country_SDN" }
      ],
      [
        { text: "üá∏üá∏ South Sudan", callback_data: "select_country_SSD" },
        { text: "üáπüáø Tanzania", callback_data: "select_country_TZA" }
      ],
      [
        { text: "üáπüá¨ Togo", callback_data: "select_country_TGO" },
        { text: "üáπüá≥ Tunisia", callback_data: "select_country_TUN" }
      ],
      [
        { text: "üá∫üá¨ Uganda", callback_data: "select_country_UGA" },
        { text: "üáøüá≤ Zambia", callback_data: "select_country_ZMB" }
      ],
      [
        { text: "üáøüáº Zimbabwe", callback_data: "select_country_ZWE" }
      ],
      [
        { text: "üåé Show Americas", callback_data: "show_americas_countries" }
      ],
      [
        { text: "üîô Back to Asia", callback_data: "show_asia_countries" }
      ],
      [
        { text: "üåé Type Your Country", callback_data: "country_selection_other" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(africaMessage, { reply_markup: keyboard });
}

// Show Americas countries
async function showAmericasCountries(ctx) {
  const americasMessage = `üåé **AMERICAN COUNTRIES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç SELECT YOUR COUNTRY (Alphabetical):**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üá¶üá∑ Argentina", callback_data: "select_country_ARG" },
        { text: "üáßüáß Barbados", callback_data: "select_country_BRB" }
      ],
      [
        { text: "üáßüáø Belize", callback_data: "select_country_BLZ" },
        { text: "üáßüá¥ Bolivia", callback_data: "select_country_BOL" }
      ],
      [
        { text: "üáßüá∑ Brazil", callback_data: "select_country_BRA" },
        { text: "üá®üá± Chile", callback_data: "select_country_CHL" }
      ],
      [
        { text: "üá®üá¥ Colombia", callback_data: "select_country_COL" },
        { text: "üá®üá∑ Costa Rica", callback_data: "select_country_CRI" }
      ],
      [
        { text: "üá®üá∫ Cuba", callback_data: "select_country_CUB" },
        { text: "üá©üá¥ Dominican Republic", callback_data: "select_country_DOM" }
      ],
      [
        { text: "üá™üá® Ecuador", callback_data: "select_country_ECU" },
        { text: "üá∏üáª El Salvador", callback_data: "select_country_SLV" }
      ],
      [
        { text: "üá¨üáπ Guatemala", callback_data: "select_country_GTM" },
        { text: "üá¨üáæ Guyana", callback_data: "select_country_GUY" }
      ],
      [
        { text: "üá≠üáπ Haiti", callback_data: "select_country_HTI" },
        { text: "üá≠üá≥ Honduras", callback_data: "select_country_HND" }
      ],
      [
        { text: "üáØüá≤ Jamaica", callback_data: "select_country_JAM" },
        { text: "üá≤üáΩ Mexico", callback_data: "select_country_MEX" }
      ],
      [
        { text: "üá≥üáÆ Nicaragua", callback_data: "select_country_NIC" },
        { text: "üáµüá¶ Panama", callback_data: "select_country_PAN" }
      ],
      [
        { text: "üáµüáæ Paraguay", callback_data: "select_country_PRY" },
        { text: "üáµüá™ Peru", callback_data: "select_country_PER" }
      ],
      [
        { text: "üá∏üá∑ Suriname", callback_data: "select_country_SUR" },
        { text: "üáπüáπ Trinidad & Tobago", callback_data: "select_country_TTO" }
      ],
      [
        { text: "üá∫üáæ Uruguay", callback_data: "select_country_URY" },
        { text: "üáªüá™ Venezuela", callback_data: "select_country_VEN" }
      ],
      [
        { text: "üèùÔ∏è Show Oceania", callback_data: "show_oceania_countries" }
      ],
      [
        { text: "üîô Back to Africa", callback_data: "show_africa_countries" }
      ],
      [
        { text: "üåé Type Your Country", callback_data: "country_selection_other" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(americasMessage, { reply_markup: keyboard });
}

// Show Oceania countries
async function showOceaniaCountries(ctx) {
  const oceaniaMessage = `üèùÔ∏è **OCEANIA COUNTRIES**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üìç SELECT YOUR COUNTRY:**`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üá´üáØ Fiji", callback_data: "select_country_FJI" },
        { text: "üá≥üá® New Caledonia", callback_data: "select_country_NCL" }
      ],
      [
        { text: "üáµüá¨ Papua New Guinea", callback_data: "select_country_PNG" },
        { text: "üáµüá´ French Polynesia", callback_data: "select_country_PYF" }
      ],
      [
        { text: "üá∏üáß Solomon Islands", callback_data: "select_country_SLB" },
        { text: "üáªüá∫ Vanuatu", callback_data: "select_country_VUT" }
      ],
      [
        { text: "üîô Back to Americas", callback_data: "show_americas_countries" }
      ],
      [
        { text: "üåé Type Your Country", callback_data: "country_selection_other" }
      ]
    ]
  };

  await ctx.replyWithMarkdown(oceaniaMessage, { reply_markup: keyboard });
}

// Get country information by code
function getCountryInfo(countryCode) {
  const countries = {
    // Primary countries
    'ZAF': { name: 'South Africa', flag: 'üáøüá¶' },
    'USA': { name: 'United States', flag: 'üá∫üá∏' },
    'GBR': { name: 'United Kingdom', flag: 'üá¨üáß' },
    'CAN': { name: 'Canada', flag: 'üá®üá¶' },
    'AUS': { name: 'Australia', flag: 'üá¶üá∫' },
    'ARE': { name: 'United Arab Emirates', flag: 'üá¶üá™' },
    'IND': { name: 'India', flag: 'üáÆüá≥' },
    'PAK': { name: 'Pakistan', flag: 'üáµüá∞' },

    // Europe
    'DEU': { name: 'Germany', flag: 'üá©üá™' },
    'FRA': { name: 'France', flag: 'üá´üá∑' },
    'ITA': { name: 'Italy', flag: 'üáÆüáπ' },
    'ESP': { name: 'Spain', flag: 'üá™üá∏' },
    'NLD': { name: 'Netherlands', flag: 'üá≥üá±' },
    'BEL': { name: 'Belgium', flag: 'üáßüá™' },
    'CHE': { name: 'Switzerland', flag: 'üá®üá≠' },
    'SWE': { name: 'Sweden', flag: 'üá∏üá™' },
    'NOR': { name: 'Norway', flag: 'üá≥üá¥' },
    'DNK': { name: 'Denmark', flag: 'üá©üá∞' },
    'FIN': { name: 'Finland', flag: 'üá´üáÆ' },
    'IRL': { name: 'Ireland', flag: 'üáÆüá™' },
    'PRT': { name: 'Portugal', flag: 'üáµüáπ' },
    'GRC': { name: 'Greece', flag: 'üá¨üá∑' },
    'POL': { name: 'Poland', flag: 'üáµüá±' },
    'CZE': { name: 'Czech Republic', flag: 'üá®üáø' },
    'HUN': { name: 'Hungary', flag: 'üá≠üá∫' },
    'ROU': { name: 'Romania', flag: 'üá∑üá¥' },
    'BGR': { name: 'Bulgaria', flag: 'üáßüá¨' },
    'TUR': { name: 'Turkey', flag: 'üáπüá∑' },

    // Asia-Pacific
    'JPN': { name: 'Japan', flag: 'üáØüáµ' },
    'KOR': { name: 'South Korea', flag: 'üá∞üá∑' },
    'CHN': { name: 'China', flag: 'üá®üá≥' },
    'SGP': { name: 'Singapore', flag: 'üá∏üá¨' },
    'HKG': { name: 'Hong Kong', flag: 'üá≠üá∞' },
    'NZL': { name: 'New Zealand', flag: 'üá≥üáø' },
    'THA': { name: 'Thailand', flag: 'üáπüá≠' },
    'MYS': { name: 'Malaysia', flag: 'üá≤üáæ' },
    'IDN': { name: 'Indonesia', flag: 'üáÆüá©' },
    'PHL': { name: 'Philippines', flag: 'üáµüá≠' },
    'VNM': { name: 'Vietnam', flag: 'üáªüá≥' },
    'BGD': { name: 'Bangladesh', flag: 'üáßüá©' },
    'LKA': { name: 'Sri Lanka', flag: 'üá±üá∞' },
    'NPL': { name: 'Nepal', flag: 'üá≥üáµ' },
    'AFG': { name: 'Afghanistan', flag: 'üá¶üá´' },

    // Middle East
    'SAU': { name: 'Saudi Arabia', flag: 'üá∏üá¶' },
    'QAT': { name: 'Qatar', flag: 'üá∂üá¶' },
    'KWT': { name: 'Kuwait', flag: 'üá∞üáº' },
    'BHR': { name: 'Bahrain', flag: 'üáßüá≠' },
    'OMN': { name: 'Oman', flag: 'üá¥üá≤' },
    'JOR': { name: 'Jordan', flag: 'üáØüá¥' },
    'LBN': { name: 'Lebanon', flag: 'üá±üáß' },
    'ISR': { name: 'Israel', flag: 'üáÆüá±' },
    'IRN': { name: 'Iran', flag: 'üáÆüá∑' },
    'IRQ': { name: 'Iraq', flag: 'üáÆüá∂' },

    // Africa (Complete coverage - alphabetical)
    'DZA': { name: 'Algeria', flag: 'üá©üáø' },
    'AGO': { name: 'Angola', flag: 'üá¶üá¥' },
    'BEN': { name: 'Benin', flag: 'üáßüáØ' },
    'BWA': { name: 'Botswana', flag: 'üáßüáº' },
    'BFA': { name: 'Burkina Faso', flag: 'üáßüá´' },
    'BDI': { name: 'Burundi', flag: 'üáßüáÆ' },
    'CMR': { name: 'Cameroon', flag: 'üá®üá≤' },
    'CPV': { name: 'Cape Verde', flag: 'üá®üáª' },
    'CAF': { name: 'Central African Republic', flag: 'üá®üá´' },
    'TCD': { name: 'Chad', flag: 'üáπüá©' },
    'COM': { name: 'Comoros', flag: 'üá∞üá≤' },
    'COG': { name: 'Congo', flag: 'üá®üá¨' },
    'COD': { name: 'Democratic Republic of Congo', flag: 'üá®üá©' },
    'DJI': { name: 'Djibouti', flag: 'üá©üáØ' },
    'EGY': { name: 'Egypt', flag: 'üá™üá¨' },
    'GNQ': { name: 'Equatorial Guinea', flag: 'üá¨üá∂' },
    'ERI': { name: 'Eritrea', flag: 'üá™üá∑' },
    'SWZ': { name: 'Eswatini', flag: 'üá∏üáø' },
    'ETH': { name: 'Ethiopia', flag: 'üá™üáπ' },
    'GAB': { name: 'Gabon', flag: 'üá¨üá¶' },
    'GMB': { name: 'Gambia', flag: 'üá¨üá≤' },
    'GHA': { name: 'Ghana', flag: 'üá¨üá≠' },
    'GIN': { name: 'Guinea', flag: 'üá¨üá≥' },
    'GNB': { name: 'Guinea-Bissau', flag: 'üá¨üáº' },
    'CIV': { name: 'Ivory Coast', flag: 'üá®üáÆ' },
    'KEN': { name: 'Kenya', flag: 'üá∞üá™' },
    'LSO': { name: 'Lesotho', flag: 'üá±üá∏' },
    'LBR': { name: 'Liberia', flag: 'üá±üá∑' },
    'LBY': { name: 'Libya', flag: 'üá±üáæ' },
    'MDG': { name: 'Madagascar', flag: 'üá≤üá¨' },
    'MWI': { name: 'Malawi', flag: 'üá≤üáº' },
    'MLI': { name: 'Mali', flag: 'üá≤üá±' },
    'MRT': { name: 'Mauritania', flag: 'üá≤üá∑' },
    'MUS': { name: 'Mauritius', flag: 'üá≤üá∫' },
    'MAR': { name: 'Morocco', flag: 'üá≤üá¶' },
    'MOZ': { name: 'Mozambique', flag: 'üá≤üáø' },
    'NAM': { name: 'Namibia', flag: 'üá≥üá¶' },
    'NER': { name: 'Niger', flag: 'üá≥üá™' },
    'NGA': { name: 'Nigeria', flag: 'üá≥üá¨' },
    'RWA': { name: 'Rwanda', flag: 'üá∑üáº' },
    'STP': { name: 'Sao Tome and Principe', flag: 'üá∏üáπ' },
    'SEN': { name: 'Senegal', flag: 'üá∏üá≥' },
    'SYC': { name: 'Seychelles', flag: 'üá∏üá®' },
    'SLE': { name: 'Sierra Leone', flag: 'üá∏üá±' },
    'SOM': { name: 'Somalia', flag: 'üá∏üá¥' },
    'SDN': { name: 'Sudan', flag: 'üá∏üá©' },
    'SSD': { name: 'South Sudan', flag: 'üá∏üá∏' },
    'TZA': { name: 'Tanzania', flag: 'üáπüáø' },
    'TGO': { name: 'Togo', flag: 'üáπüá¨' },
    'TUN': { name: 'Tunisia', flag: 'üáπüá≥' },
    'UGA': { name: 'Uganda', flag: 'üá∫üá¨' },
    'ZMB': { name: 'Zambia', flag: 'üáøüá≤' },
    'ZWE': { name: 'Zimbabwe', flag: 'üáøüáº' },

    // Americas (alphabetical)
    'ARG': { name: 'Argentina', flag: 'üá¶üá∑' },
    'BRB': { name: 'Barbados', flag: 'üáßüáß' },
    'BLZ': { name: 'Belize', flag: 'üáßüáø' },
    'BOL': { name: 'Bolivia', flag: 'üáßüá¥' },
    'BRA': { name: 'Brazil', flag: 'üáßüá∑' },
    'CHL': { name: 'Chile', flag: 'üá®üá±' },
    'COL': { name: 'Colombia', flag: 'üá®üá¥' },
    'CRI': { name: 'Costa Rica', flag: 'üá®üá∑' },
    'CUB': { name: 'Cuba', flag: 'üá®üá∫' },
    'DOM': { name: 'Dominican Republic', flag: 'üá©üá¥' },
    'ECU': { name: 'Ecuador', flag: 'üá™üá®' },
    'SLV': { name: 'El Salvador', flag: 'üá∏üáª' },
    'GTM': { name: 'Guatemala', flag: 'üá¨üáπ' },
    'GUY': { name: 'Guyana', flag: 'üá¨üáæ' },
    'HTI': { name: 'Haiti', flag: 'üá≠üáπ' },
    'HND': { name: 'Honduras', flag: 'üá≠üá≥' },
    'JAM': { name: 'Jamaica', flag: 'üáØüá≤' },
    'MEX': { name: 'Mexico', flag: 'üá≤üáΩ' },
    'NIC': { name: 'Nicaragua', flag: 'üá≥üáÆ' },
    'PAN': { name: 'Panama', flag: 'üáµüá¶' },
    'PRY': { name: 'Paraguay', flag: 'üáµüáæ' },
    'PER': { name: 'Peru', flag: 'üáµüá™' },
    'SUR': { name: 'Suriname', flag: 'üá∏üá∑' },
    'TTO': { name: 'Trinidad and Tobago', flag: 'üáπüáπ' },
    'URY': { name: 'Uruguay', flag: 'üá∫üáæ' },
    'VEN': { name: 'Venezuela', flag: 'üáªüá™' },

    // Oceania
    'FJI': { name: 'Fiji', flag: 'üá´üáØ' },
    'NCL': { name: 'New Caledonia', flag: 'üá≥üá®' },
    'PNG': { name: 'Papua New Guinea', flag: 'üáµüá¨' },
    'PYF': { name: 'French Polynesia', flag: 'üáµüá´' },
    'SLB': { name: 'Solomon Islands', flag: 'üá∏üáß' },
    'VUT': { name: 'Vanuatu', flag: 'üáªüá∫' },

    // Other
    'OTH': { name: 'Other Country', flag: 'üåé' }
  };

  return countries[countryCode] || null;
}

// Log country change
async function logCountryChange(userId, oldCountryCode, oldCountryName, newCountryCode, newCountryName, telegramId, username, reason) {
  try {
    const { error: logError } = await db.client
      .from('country_change_log')
      .insert({
        user_id: userId,
        old_country_code: oldCountryCode,
        old_country_name: oldCountryName,
        new_country_code: newCountryCode,
        new_country_name: newCountryName,
        changed_by_telegram_id: telegramId,
        changed_by_username: username,
        change_reason: reason,
        changed_at: new Date().toISOString()
      });

    if (logError) {
      console.error('Error logging country change:', logError);
    } else {
      console.log(`‚úÖ [COUNTRY] Country change logged for user ${userId}: ${oldCountryCode || 'null'} -> ${newCountryCode}`);
    }

  } catch (error) {
    console.error('Error in logCountryChange:', error);
  }
}

// Helper function to get network display information
function getNetworkDisplayInfo(networkCode) {
  const networkMap = {
    'USDT-ERC20': {
      fullName: 'Ethereum',
      technical: 'ERC-20',
      icon: 'üî∑'
    },
    'USDT-BEP20': {
      fullName: 'Binance Smart Chain',
      technical: 'BEP-20',
      icon: 'üü°'
    },
    'USDT-Polygon': {
      fullName: 'Polygon',
      technical: 'Polygon',
      icon: 'üü£'
    },
    'USDT-TRC20': {
      fullName: 'TRON',
      technical: 'TRC-20',
      icon: 'üî¥'
    }
  };

  return networkMap[networkCode] || {
    fullName: 'Unknown Network',
    technical: networkCode,
    icon: '‚ùì'
  };
}

// Start the bot
startBot();
